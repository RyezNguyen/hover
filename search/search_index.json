{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hover - 0.8.1 Documentation","text":"<p>Explore and label on a map of raw data.</p> <p>Get enough to feed your model in no time.</p> <p> </p> <p><code>hover</code> speeds up data labeling through <code>embedding + visualization + callbacks</code>.</p> <ul> <li>You just need raw data and an embedding to get a map.</li> <li>Explore the map to find \"zones\" that are easy and those that are tricky.</li> <li>Start the conquest of your data by coloring the zones through wisdom!</li> </ul> <p></p>"},{"location":"#live-demos","title":"Live Demos","text":""},{"location":"#with-code","title":"With code","text":"<ul> <li>edit &amp; run code in your browser to get a labeling interface, with guides along the way.</li> </ul>"},{"location":"#without-code","title":"Without code","text":"<ul> <li>go directly to a labeling interface, pre-coded and hosted on Binder.</li> </ul>"},{"location":"#features-click-bullets-to-show-gif","title":"Features (click bullets to show GIF)","text":"<p>It's fast because it labels data in bulk.</p> <p> A semantic scatter plot of your data for labeling, equipped with</p> <ul> <li> <p> Tooltip for each point on mouse hover  </p> </li> <li> <p> Table view for inspecting all selected points  </p> </li> <li> <p> Toggle buttons that clearly distinguish data subsets  </p> </li> <li> <p> Search widgets for ad-hoc data highlight  </p> </li> </ul> <p>It's accurate because multiple angles work together.</p> <p> Supplementary views to use in conjunction with the annotator, including</p> <ul> <li> <p>  Finder: filter data by search criteria </p> </li> <li> <p>  Softlabel: active learning by in-the-loop model prediction score </p> </li> <li> <p>  Snorkel: custom functions for labeling and filtering </p> </li> </ul> <p>It's flexible (and fun!) because the process never gets old.</p> <p>:toolbox: Additional tools and options that allow you to</p> <ul> <li> <p>  Go to higher dimensions (3D? 4D?) and choose your xy-axes  </p> </li> <li> <p> Consecutively select across areas, dimensions, and views </p> </li> <li> <p> Kick outliers and fix mistakes </p> </li> </ul> <p> Click on the bullet points above to view GIFs!</p>"},{"location":"#install","title":"Install","text":"<p>Python: 3.8+</p> <p>OS: Linux &amp; Mac &amp; Windows</p> <p>PyPI (for all releases): <code>pip install hover</code></p> <p>Conda-forge (for 0.6.0 and above): <code>conda install -c conda-forge hover</code></p> <p>For Windows users, we recommend Windows Subsystem for Linux.</p> <ul> <li>On Windows itself you will need C++ build tools for dependencies.</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Tutorials</li> <li>Binder repo</li> <li>Changelog</li> <li>Documentation</li> </ul>"},{"location":"#announcements","title":"Announcements","text":"<ul> <li>Jan 21, 2023 version 0.8.0 is now available. Check out the changelog for details :partying_face:.</li> </ul>"},{"location":"#remarks","title":"Remarks","text":""},{"location":"#shoutouts","title":"Shoutouts","text":"<ul> <li>Thanks to <code>Bokeh</code> because <code>hover</code> would not exist without linked plots and callbacks, or be nearly as good without embeddable server apps.</li> <li>Thanks to Philip Vollet for sharing <code>hover</code> with the community even when it was really green.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>All feedbacks are welcome, especially what you find lacking and want it fixed!</li> <li><code>./requirements-dev.txt</code> lists required packages for development.</li> <li>Pull requests are advised to use a superset of the pre-commit hooks listed in .pre-commit-config.yaml.</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>If you have found <code>hover</code> useful to your work, please let us know :hugs:</p> <pre><code>@misc{hover,\n  title={{hover}: label data at scale},\n  url={https://github.com/phurwicz/hover},\n  note={Open software from https://github.com/phurwicz/hover},\n  author={\n    Pavel Hurwicz and\n    Haochuan Wei},\n  year={2021},\n}\n</code></pre>"},{"location":"pages/guides/g0-datatype-image/","title":"Image Data","text":"<p><code>hover</code> supports bulk-labeling images through their URLs.</p> <p> Let's do a quickstart for images and note what's different from texts.</p> This page assumes that you have know the basics <p>i.e. simple usage of <code>dataset</code> and <code>annotator</code>. Please visit the quickstart tutorial if you haven't done so.</p>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p>"},{"location":"pages/guides/g0-datatype-image/#dataset-for-images","title":"Dataset for Images","text":"<p><code>hover</code> handles images through their URL addresses. URLs are strings which can be easily stored, hashed, and looked up against. They are also convenient for rendering tooltips in the annotation interface.</p> <p>Similarly to <code>SupervisableTextDataset</code>, we can build one for images:</p> <pre>\nfrom hover.core.dataset import SupervisableImageDataset\nimport pandas as pd\n\n# this is a 1000-image-url set of ImageNet data\n# with custom labels: animal, object, food\nexample_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.7.0/imagenet_custom.csv\"\ndf = pd.read_csv(example_csv_path).sample(frac=1).reset_index(drop=True)\ndf[\"SUBSET\"] = \"raw\"\ndf.loc[500:800, 'SUBSET'] = 'train'\ndf.loc[800:900, 'SUBSET'] = 'dev'\ndf.loc[900:, 'SUBSET'] = 'test'\n\ndataset = SupervisableImageDataset.from_pandas(df, feature_key=\"image\", label_key=\"label\")\n\n# each subset can be accessed as its own DataFrame\ndataset.dfs[\"raw\"].head(5)\n</pre>"},{"location":"pages/guides/g0-datatype-image/#vectorizer-for-images","title":"Vectorizer for Images","text":"<p>We can follow a <code>URL -&gt; content -&gt; image object -&gt; vector</code> path.</p> <pre>\nimport requests\nfrom functools import lru_cache\n\n@lru_cache(maxsize=10000)\ndef url_to_content(url):\n    \"\"\"\n    Turn a URL to response content.\n    \"\"\"\n    response = requests.get(url)\n    return response.content\n</pre> <pre>\nfrom PIL import Image\nfrom io import BytesIO\n\n@lru_cache(maxsize=10000)\ndef url_to_image(url):\n    \"\"\"\n    Turn a URL to a PIL Image.\n    \"\"\"\n    img = Image.open(BytesIO(url_to_content(url))).convert(\"RGB\")\n    return img\n</pre> Caching and reading from disk <p>This guide uses <code>@wrappy.memoize</code> in place of <code>@functools.lru_cache</code> for caching.</p> <ul> <li>The benefit is that <code>wrappy.memoize</code> can persist the cache to disk, speeding up code across sessions.</li> </ul> <p>Cached values for this guide have been pre-computed, making it much master to run the guide.</p> <pre>\nimport torch\nimport wrappy\nfrom efficientnet_pytorch import EfficientNet\nfrom torchvision import transforms\n\n# EfficientNet is a series of pre-trained models\n# https://github.com/lukemelas/EfficientNet-PyTorch\neffnet = EfficientNet.from_pretrained(\"efficientnet-b0\")\neffnet.eval()\n\n# standard transformations for ImageNet-trained models\ntfms = transforms.Compose(\n    [\n        transforms.Resize(224),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),\n    ]\n)\n\n@wrappy.memoize(cache_limit=10000, persist_path='custom_cache/image_url_to_vector.pkl')\ndef vectorizer(url):\n    \"\"\"\n    Using logits on ImageNet-1000 classes.\n    \"\"\"\n    img = tfms(url_to_image(url)).unsqueeze(0)\n\n    with torch.no_grad():\n        outputs = effnet(img)\n\n    return outputs.detach().numpy().flatten()\n</pre>"},{"location":"pages/guides/g0-datatype-image/#embedding-and-plot","title":"Embedding and Plot","text":"<p>This is exactly the same as in the quickstart, just switching to image data:</p> <pre>\n# any kwargs will be passed onto the corresponding reduction\n# for umap: https://umap-learn.readthedocs.io/en/latest/parameters.html\n# for ivis: https://bering-ivis.readthedocs.io/en/latest/api.html\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=2)\n</pre> <pre>\nfrom hover.recipes.stable import simple_annotator\n\ninteractive_plot = simple_annotator(dataset)\n\n# ---------- SERVER MODE: for the documentation page ----------\n# because this tutorial is remotely hosted, we need explicit serving to expose the plot to you\nfrom local_lib.binder_helper import binder_proxy_app_url\nfrom bokeh.server.server import Server\nserver = Server({'/my-app': interactive_plot}, port=5007, allow_websocket_origin=['*'], use_xheaders=True)\nserver.start()\n# visit this URL printed in cell output to see the interactive plot; locally you would just do \"https://localhost:5007/my-app\"\nbinder_proxy_app_url('my-app', port=5007)\n\n# ---------- NOTEBOOK MODE: for your actual Jupyter environment ---------\n# this code will render the entire plot in Jupyter\n# from bokeh.io import show, output_notebook\n# output_notebook()\n# show(interactive_plot, notebook_url='https://localhost:8888')\n</pre> What's special for images? <p>Tooltips</p> <p>For text, the tooltip shows the original value.</p> <p>For images, the tooltip embeds the image based on URL.</p> <ul> <li>images in the local file system shall be served through <code>python -m http.server</code>.</li> <li>they can then be accessed through <code>https://localhost:&lt;port&gt;/relative/path/to/file</code>.</li> </ul> <p>Search</p> <p>For text, the search widget is based on regular expressions.</p> <p>For images, the search widget is based on vector cosine similarity.</p> <ul> <li>the <code>dataset</code> has remembered the <code>vectorizer</code> under the hood and passed it to the <code>annotator</code>.</li> <li> please let us know if you think there's a better way to search images in this case. </li> </ul>"},{"location":"pages/guides/g1-datatype-audio/","title":"Audio Data","text":"<p><code>hover</code> supports bulk-labeling audios through their URLs.</p> <p> Let's do a quickstart for audios and note what's different from texts.</p> This page assumes that you have know the basics <p>i.e. simple usage of <code>dataset</code> and <code>annotator</code>. Please visit the quickstart tutorial if you haven't done so.</p>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p>"},{"location":"pages/guides/g1-datatype-audio/#dataset-for-audios","title":"Dataset for audios","text":"<p><code>hover</code> handles audios through their URL addresses. URLs are strings which can be easily stored, hashed, and looked up against. They are also convenient for rendering tooltips in the annotation interface.</p> <p>Similarly to <code>SupervisableTextDataset</code>, we can build one for audios:</p> <pre>\nfrom hover.core.dataset import SupervisableAudioDataset\nimport pandas as pd\n\n# this is a table of audio-MNIST (pronounced digit 0-9) urls, 100 audios per digit\nexample_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.7.0/audio_mnist.csv\"\ndf = pd.read_csv(example_csv_path).sample(frac=1).reset_index(drop=True)\ndf[\"SUBSET\"] = \"raw\"\ndf.loc[500:800, 'SUBSET'] = 'train'\ndf.loc[800:900, 'SUBSET'] = 'dev'\ndf.loc[900:, 'SUBSET'] = 'test'\n\ndataset = SupervisableAudioDataset.from_pandas(df, feature_key=\"audio\", label_key=\"label\")\n\n# each subset can be accessed as its own DataFrame\ndataset.dfs[\"raw\"].head(5)\n</pre>"},{"location":"pages/guides/g1-datatype-audio/#vectorizer-for-audios","title":"Vectorizer for audios","text":"<p>We can follow a <code>URL -&gt; content -&gt; audio array -&gt; vector</code> path.</p> <pre>\nimport requests\nfrom functools import lru_cache\n\n@lru_cache(maxsize=10000)\ndef url_to_content(url):\n    \"\"\"\n    Turn a URL to response content.\n    \"\"\"\n    response = requests.get(url)\n    return response.content\n</pre> <pre>\nimport librosa\nfrom io import BytesIO\n\n@lru_cache(maxsize=10000)\ndef url_to_audio(url):\n    \"\"\"\n    Turn a URL to audio data.\n    \"\"\"\n    data, sampling_rate = librosa.load(BytesIO(url_to_content(url)))\n    return data, sampling_rate\n</pre> Caching and reading from disk <p>This guide uses <code>@wrappy.memoize</code> in place of <code>@functools.lru_cache</code> for caching.</p> <ul> <li>The benefit is that <code>wrappy.memoize</code> can persist the cache to disk, speeding up code across sessions.</li> </ul> <p>Cached values for this guide have been pre-computed, making it much master to run the guide.</p> <pre>\nimport wrappy\n\n@wrappy.memoize(cache_limit=10000, persist_path='custom_cache/audio_url_to_vector.pkl')\ndef vectorizer(url):\n    \"\"\"\n    Averaged MFCC over time.\n    Resembles word-embedding-average-as-doc-embedding for texts.\n    \"\"\"\n    y, sr = url_to_audio(url)\n    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=32)\n    return mfcc.mean(axis=1)\n</pre>"},{"location":"pages/guides/g1-datatype-audio/#embedding-and-plot","title":"Embedding and Plot","text":"<p>This is exactly the same as in the quickstart, just switching to audio data:</p> <pre>\n# any kwargs will be passed onto the corresponding reduction\n# for umap: https://umap-learn.readthedocs.io/en/latest/parameters.html\n# for ivis: https://bering-ivis.readthedocs.io/en/latest/api.html\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=2)\n</pre> <pre>\nfrom hover.recipes.stable import simple_annotator\n\ninteractive_plot = simple_annotator(dataset)\n\n# ---------- SERVER MODE: for the documentation page ----------\n# because this tutorial is remotely hosted, we need explicit serving to expose the plot to you\nfrom local_lib.binder_helper import binder_proxy_app_url\nfrom bokeh.server.server import Server\nserver = Server({'/my-app': interactive_plot}, port=5007, allow_websocket_origin=['*'], use_xheaders=True)\nserver.start()\n# visit this URL printed in cell output to see the interactive plot; locally you would just do \"https://localhost:5007/my-app\"\nbinder_proxy_app_url('my-app', port=5007)\n\n# ---------- NOTEBOOK MODE: for your actual Jupyter environment ---------\n# this code will render the entire plot in Jupyter\n# from bokeh.io import show, output_notebook\n# output_notebook()\n# show(interactive_plot, notebook_url='https://localhost:8888')\n</pre> What's special for audios? <p>Tooltips</p> <p>For text, the tooltip shows the original value.</p> <p>For audios, the tooltip embeds the audio based on URL.</p> <ul> <li>audios in the local file system shall be served through <code>python -m http.server</code>.</li> <li>they can then be accessed through <code>https://localhost:&lt;port&gt;/relative/path/to/file</code>.</li> </ul> <p>Search</p> <p>For text, the search widget is based on regular expressions.</p> <p>For audios, the search widget is based on vector cosine similarity.</p> <ul> <li>the <code>dataset</code> has remembered the <code>vectorizer</code> under the hood and passed it to the <code>annotator</code>.</li> <li> please let us know if you think there's a better way to search audios in this case. <ul> <li>dynamic time warping, due to its running time (&gt; 10ms per pair for small 100x10 MFCC arrays), is too slow for search.<ul> <li>we are experimenting with subsampled signals and pre-selected data points (by vector similarity, for example).</li> </ul> </li> </ul> </li> </ul>"},{"location":"pages/guides/g2-hover-config/","title":"Custom Config","text":"<p><code>hover</code> can be customized through its module config.</p> <p> Let's explore a few use cases.</p> This page assumes that you have know the basics <p>i.e. simple usage of <code>dataset</code> and <code>annotator</code>. Please visit the quickstart tutorial if you haven't done so.</p>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p>"},{"location":"pages/guides/g2-hover-config/#color-palette-for-labeled-data-points","title":"Color Palette for Labeled Data Points","text":"<p>You may want to customize the color palette for better contrast or accessibility, which can depend on specific scenarios.</p> <p>The snippet below shows an example of default colors assigned to 6 classes. <code>hover</code> by default samples <code>Turbo256</code> to accommodate a large number of classes while keeping good contrast.</p> <pre>\nimport hover\nfrom hover.utils.bokeh_helper import auto_label_color\nfrom rich.console import Console\n\nconsole = Console()\nlabels = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\ncolor_dict = auto_label_color(labels)\nabstain = hover.config['data.values']['abstain_decoded']\n\nfor _label in [abstain, *labels]:\n    console.print(f\"\\u2b24{_label}\", style=color_dict[_label])\n</pre> <p>You can change the palette using any <code>bokeh</code> palette, or any iterable of hex colors like <code>\"#000000\"</code>.</p> <pre>\nhover.config[\"visual\"][\"abstain_hexcolor\"] = \"#bababa\"\n</pre> Config changes should happen early <p><code>hover.config</code> assignments need to happen before plotting your data.</p> <ul> <li>This is because <code>hover</code> locks config values for consistency as soon as each config value is read by other code.</li> <li>Ideally you should change config immediately after <code>import hover</code>.</li> </ul>"},{"location":"pages/guides/g2-hover-config/#color-of-unlabeled-data-points","title":"Color of Unlabeled Data Points","text":"<p>For unlabeled data points, <code>hover</code> uses a light gray color <code>\"#dcdcdc\"</code>. This is not configured in the color palette above, but here:</p> <pre>\nhover.config[\"visual\"][\"abstain_hexcolor\"] = \"#bababa\"\n</pre>"},{"location":"pages/guides/g2-hover-config/#dimensionality-reduction-method","title":"Dimensionality Reduction Method","text":"<p><code>hover</code> uses dimensionality reduction in a lot of places. It can be cumbersome to find these places and use your preferred method. In such cases a module-level override can be handy:</p> <pre>\nhover.config[\"data.embedding\"][\"default_reduction_method\"] = \"ivis\"\n</pre>"},{"location":"pages/guides/g2-hover-config/#browse-more-configs","title":"Browse more configs","text":"<p>There are more configurations that are more niche which we will skip here. You can find a full list of configurations, default values, and hints here:</p> <pre>\nhover.config.hint()\n</pre> <p>Happy customizing!</p>"},{"location":"pages/reference/core-dataset/","title":"hover.core.dataset","text":"<ul> <li> Dataset classes which extend beyond DataFrames. <p>When we supervise a collection of data, these operations need to be simple:</p> <ul> <li>managing <code>raw</code>/<code>train</code>/<code>dev</code>/<code>test</code> subsets</li> <li>transferring data points between subsets</li> <li>pulling updates from annotation interfaces</li> <li>pushing updates to annotation interfaces</li> <li>getting a 2D embedding</li> <li>loading data for training models</li> </ul> </li> </ul>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableAudioDataset","title":"<code> SupervisableAudioDataset            (SupervisableDataset)         </code>","text":"<code>SupervisableDataset</code> whose primary feature is <code>audio</code>. Source code in <code>hover/core/dataset.py</code> <pre><code>class SupervisableAudioDataset(SupervisableDataset):\n\"\"\"\n    ???+ note \"`SupervisableDataset` whose primary feature is `audio`.\"\n    \"\"\"\n\n    FEATURE_KEY = \"audio\"\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset","title":"<code> SupervisableDataset            (Loggable)         </code>","text":"Feature-agnostic class for a dataset open to supervision. <p>Keeping a DataFrame form and a list-of-dicts (\"dictl\") form, with the intention that</p> <ul> <li>the DataFrame form supports most kinds of operations;</li> <li>the list-of-dicts form could be useful for manipulations outside the scope of pandas;</li> <li>synchronization between the two forms should be called sparingly.</li> </ul> Source code in <code>hover/core/dataset.py</code> <pre><code>class SupervisableDataset(Loggable):\n\"\"\"\n    ???+ note \"Feature-agnostic class for a dataset open to supervision.\"\n\n        Keeping a DataFrame form and a list-of-dicts (\"dictl\") form, with the intention that\n\n        - the DataFrame form supports most kinds of operations;\n        - the list-of-dicts form could be useful for manipulations outside the scope of pandas;\n        - synchronization between the two forms should be called sparingly.\n    \"\"\"\n\n    # 'scratch': intended to be directly editable by other objects, i.e. Explorers\n    # labels will be stored but not used for information in hover itself\n    SCRATCH_SUBSETS = tuple([\"raw\"])\n\n    # non-'scratch': intended to be read-only outside of the class\n    # 'public': labels will be considered as part of the classification task and will be used for built-in supervision\n    PUBLIC_SUBSETS = tuple([\"train\", \"dev\"])\n    # 'private': labels will be considered as part of the classification task and will NOT be used for supervision\n    PRIVATE_SUBSETS = tuple([\"test\"])\n\n    FEATURE_KEY = \"feature\"\n\n    def __init__(self, *args, **kwargs):\n\"\"\"\n        ???+ note \"Set up data subsets, widgets, and supplementary data structures.\"\n\n            See `self.setup_dfs` for parameter details.\n        \"\"\"\n        self._info(\"Initializing...\")\n        self.setup_dfs(*args, **kwargs)\n        self.df_deduplicate()\n        self.compute_feature_index()\n        self.setup_widgets()\n        # self.setup_label_coding() # redundant if setup_pop_table() immediately calls this again\n        self.setup_file_export()\n        self.setup_pop_table()\n        self.setup_sel_table()\n        self._vectorizer_lookup = OrderedDict()\n        self._good(f\"{self.__class__.__name__}: finished initialization.\")\n\n    def setup_dfs(\n        self,\n        raw_dictl,\n        train_dictl=None,\n        dev_dictl=None,\n        test_dictl=None,\n        feature_key=\"feature\",\n        label_key=\"label\",\n    ):\n\"\"\"\n        ???+ note \"Subroutine of the constructor that creates standard-format DataFrames.\"\n\n            | Param         | Type   | Description                          |\n            | :------------ | :----- | :----------------------------------- |\n            | `raw_dictl`   | `list` | list of dicts holding the **to-be-supervised** raw data |\n            | `train_dictl` | `list` | list of dicts holding any **supervised** train data |\n            | `dev_dictl`   | `list` | list of dicts holding any **supervised** dev data   |\n            | `test_dictl`  | `list` | list of dicts holding any **supervised** test data  |\n            | `feature_key` | `str`  | the key for the feature in each piece of data |\n            | `label_key`   | `str`  | the key for the `**str**` label in supervised data |\n        \"\"\"\n\n        def dictl_transform(dictl, labels=True):\n\"\"\"\n            Burner function to transform the input list of dictionaries into standard format.\n            \"\"\"\n            # edge case when dictl is empty or None\n            if not dictl:\n                return []\n\n            # transform the feature and possibly the label\n            key_transform = {feature_key: self.__class__.FEATURE_KEY}\n            if labels:\n                key_transform[label_key] = \"label\"\n\n            def burner(d):\n\"\"\"\n                Burner function to transform a single dict.\n                \"\"\"\n                if labels:\n                    assert label_key in d, f\"Expected dict key {label_key}\"\n\n                trans_d = {key_transform.get(_k, _k): _v for _k, _v in d.items()}\n\n                if not labels:\n                    trans_d[\"label\"] = module_config.ABSTAIN_DECODED\n\n                return trans_d\n\n            return [burner(_d) for _d in dictl]\n\n        # standardize records\n        dictls = {\n            \"raw\": dictl_transform(raw_dictl, labels=False),\n            \"train\": dictl_transform(train_dictl),\n            \"dev\": dictl_transform(dev_dictl),\n            \"test\": dictl_transform(test_dictl),\n        }\n\n        # initialize dataframes\n        self.dfs = dict()\n        for _key, _dictl in dictls.items():\n            if _dictl:\n                _df = pd.DataFrame(_dictl)\n                assert self.__class__.FEATURE_KEY in _df.columns\n                assert \"label\" in _df.columns\n            else:\n                _df = pd.DataFrame(columns=[self.__class__.FEATURE_KEY, \"label\"])\n\n            self.dfs[_key] = _df\n\n    def copy(self):\n\"\"\"\n        ???+ note \"Create another instance, copying over the data entries.\"\n\n            Also copy data structures that don't get created in the new instance.\n        \"\"\"\n        dataset = self.__class__.from_pandas(self.to_pandas())\n        dataset._vectorizer_lookup.update(self._vectorizer_lookup)\n        return dataset\n\n    def compute_feature_index(self):\n\"\"\"\n        ???+ note \"Allow lookup by feature value without setting it as the index.\"\n\n            Assumes that feature values are unique. The reason not to just set the feature as the index is because integer indices work smoothly with Bokeh `DataSource`s, NumPy `array`s, and Torch `Tensor`s.\n        \"\"\"\n        feature_to_subset_idx = {}\n        for _subset, _df in self.dfs.items():\n            _values = _df[self.__class__.FEATURE_KEY].values\n            for i, _val in enumerate(_values):\n                if _val in feature_to_subset_idx:\n                    raise ValueError(\n                        f\"Expected unique feature values, found duplicate {_val}\"\n                    )\n                feature_to_subset_idx[_val] = (_subset, i)\n        self.feature_to_subset_idx = feature_to_subset_idx\n\n    def locate_by_feature_value(self, value, auto_recompute=True):\n\"\"\"\n        ???+ note \"Find the subset and index given a feature value.\"\n\n            Assumes that the value is present and detects if the subset and index found is consistent with the value.\n        \"\"\"\n        subset, index = self.feature_to_subset_idx[value]\n\n        current_value = self.dfs[subset].at[index, self.__class__.FEATURE_KEY]\n        if current_value != value:\n            if auto_recompute:\n                self._warn(\"locate_by_feature_value mismatch. Recomputing index.\")\n                self.compute_feature_index()\n                # if ever need to recompute twice, there must be a bug\n                return self.locate_by_feature_value(value, auto_recompute=False)\n            else:\n                raise ValueError(\"locate_by_feature_value mismatch.\")\n        return subset, index\n\n    def to_pandas(self):\n\"\"\"\n        ???+ note \"Export to a pandas DataFrame.\"\n        \"\"\"\n        dfs = []\n        for _subset in [\"raw\", \"train\", \"dev\", \"test\"]:\n            _df = self.dfs[_subset].copy()\n            _df[DATASET_SUBSET_FIELD] = _subset\n            dfs.append(_df)\n\n        return pd.concat(dfs, axis=0)\n\n    @classmethod\n    def from_pandas(cls, df, **kwargs):\n\"\"\"\n        ???+ note \"Import from a pandas DataFrame.\"\n            | Param    | Type   | Description                          |\n            | :------- | :----- | :----------------------------------- |\n            | `df` | `DataFrame` | with a \"SUBSET\" field dividing subsets |\n        \"\"\"\n        SUBSETS = cls.SCRATCH_SUBSETS + cls.PUBLIC_SUBSETS + cls.PRIVATE_SUBSETS\n\n        if DATASET_SUBSET_FIELD not in df.columns:\n            raise ValueError(\n                f\"Expecting column '{DATASET_SUBSET_FIELD}' in the DataFrame which takes values from {SUBSETS}\"\n            )\n\n        dictls = {}\n        for _subset in [\"raw\", \"train\", \"dev\", \"test\"]:\n            _sub_df = df[df[DATASET_SUBSET_FIELD] == _subset]\n            dictls[_subset] = _sub_df.to_dict(orient=\"records\")\n\n        return cls(\n            raw_dictl=dictls[\"raw\"],\n            train_dictl=dictls[\"train\"],\n            dev_dictl=dictls[\"dev\"],\n            test_dictl=dictls[\"test\"],\n            **kwargs,\n        )\n\n    def setup_widgets(self):\n\"\"\"\n        ???+ note \"Create `bokeh` widgets for interactive data management.\"\n\n            Operations:\n            -   PUSH: push updated dataframes to linked `explorer`s.\n            -   COMMIT: added selected points to a specific subset `dataframe`.\n            -   DEDUP: cross-deduplicate across all subset `dataframe`s.\n            -   VIEW: view selected points of linked `explorer`s.\n                -   the link can be different from that for PUSH. Typically all the `explorer`s sync their selections, and only an `annotator` is linked to the `dataset`.\n            -   PATCH: update a few edited rows from VIEW result to the dataset.\n            -   EVICT: remove a few rows from both VIEW result and linked `explorer` selection.\n        \"\"\"\n        self.update_pusher = Button(\n            label=\"Push\",\n            button_type=\"success\",\n        )\n        self.data_committer = Dropdown(\n            label=\"Commit\",\n            button_type=\"warning\",\n            menu=[*self.__class__.PUBLIC_SUBSETS, *self.__class__.PRIVATE_SUBSETS],\n        )\n        self.dedup_trigger = Button(\n            label=\"Dedup\",\n            button_type=\"warning\",\n        )\n        self.selection_viewer = Button(\n            label=\"View Selected\",\n            button_type=\"primary\",\n        )\n        self.selection_patcher = Button(\n            label=\"Update Row Values\",\n            button_type=\"warning\",\n        )\n        self.selection_evictor = Button(\n            label=\"Evict Rows from Selection\",\n            button_type=\"primary\",\n        )\n\n        self.selection_table_refresh_box = CheckboxGroup(\n            labels=[\"auto refresh selection table\"], active=[]\n        )\n        self.help_div = dataset_help_widget()\n\n        def commit_base_callback():\n\"\"\"\n            COMMIT creates cross-duplicates between subsets.\n            Changes dataset rows.\n            No change to explorers.\n\n            - PUSH shall be blocked until DEDUP is executed.\n            - PATCH shall be blocked until PUSH is executed.\n            - EVICT shall be blocked until PUSH is executed.\n            \"\"\"\n            self.dedup_trigger.disabled = False\n            self.update_pusher.disabled = True\n            self.selection_patcher.disabled = True\n            self.selection_evictor.disabled = True\n\n        def dedup_base_callback():\n\"\"\"\n            DEDUP re-creates dfs with different indices than before.\n            Changes dataset rows.\n            No change to explorers.\n\n            - COMMIT shall be blocked until PUSH is executed.\n            - PATCH shall be blocked until PUSH is executed.\n            - EVICT shall be blocked until PUSH is executed.\n            \"\"\"\n            self.update_pusher.disabled = False\n            self.data_committer.disabled = True\n            self.selection_patcher.disabled = True\n            self.selection_evictor.disabled = True\n            self.df_deduplicate()\n\n        def push_base_callback():\n\"\"\"\n            PUSH enforces df consistency with all linked explorers.\n            No change to dataset rows.\n            Changes explorers.\n\n            - DEDUP could be blocked because it stays trivial until COMMIT is executed.\n            \"\"\"\n            self.data_committer.disabled = False\n            self.dedup_trigger.disabled = True\n            # empty the selection table, then allow PATCH and EVICT\n            self.sel_table.source.data = dict()\n            self.sel_table.source.selected.indices = []\n            self.selection_patcher.disabled = False\n            self.selection_evictor.disabled = False\n\n        self.update_pusher.on_click(push_base_callback)\n        self.data_committer.on_click(commit_base_callback)\n        self.dedup_trigger.on_click(dedup_base_callback)\n\n    def view(self):\n\"\"\"\n        ???+ note \"Defines the layout of `bokeh` objects when visualized.\"\n        \"\"\"\n        # local import to avoid naming confusion/conflicts\n        from bokeh.layouts import row, column\n\n        return column(\n            self.help_div,\n            # population table and directly associated widgets\n            row(\n                self.update_pusher,\n                self.data_committer,\n                self.dedup_trigger,\n                self.file_exporter,\n            ),\n            self.pop_table,\n            # selection table and directly associated widgets\n            row(\n                self.selection_viewer,\n                self.selection_patcher,\n                self.selection_evictor,\n            ),\n            row(\n                self.selection_table_refresh_box,\n            ),\n            self.sel_table,\n        )\n\n    def subscribe_update_push(self, explorer, subset_mapping):\n\"\"\"\n        ???+ note \"Enable pushing updated DataFrames to explorers that depend on them.\"\n            | Param            | Type   | Description                            |\n            | :--------------- | :----- | :------------------------------------- |\n            | `explorer`       | `BokehBaseExplorer` | the explorer to register  |\n            | `subset_mapping` | `dict` | `dataset` -&gt; `explorer` subset mapping |\n\n            Note: the reason we need this is due to `self.dfs[key] = ...`-like assignments. If DF operations were all in-place, then the explorers could directly access the updates through their `self.dfs` references.\n        \"\"\"\n\n        explorer.link_dataset(self)\n\n        def callback_push():\n            df_dict = {_v: self.dfs[_k] for _k, _v in subset_mapping.items()}\n            explorer._setup_dfs(df_dict)\n            explorer._update_sources()\n\n        self.update_pusher.on_click(callback_push)\n        self._good(\n            f\"Subscribed {explorer.__class__.__name__} to dataset pushes: {subset_mapping}\"\n        )\n\n    def subscribe_data_commit(self, explorer, subset_mapping):\n\"\"\"\n        ???+ note \"Enable committing data across subsets, specified by a selection in an explorer and a dropdown widget of the dataset.\"\n            | Param            | Type   | Description                            |\n            | :--------------- | :----- | :------------------------------------- |\n            | `explorer`       | `BokehBaseExplorer` | the explorer to register  |\n            | `subset_mapping` | `dict` | `dataset` -&gt; `explorer` subset mapping |\n        \"\"\"\n\n        explorer.link_dataset(self)\n\n        def callback_commit(event):\n            for sub_k, sub_v in subset_mapping.items():\n                sub_to = event.item\n                selected_idx = explorer.sources[sub_v].selected.indices\n                if not selected_idx:\n                    self._warn(\n                        f\"Attempting data commit: did not select any data points in subset {sub_v}.\"\n                    )\n                    return\n\n                sel_slice = self.dfs[sub_k].iloc[selected_idx]\n                valid_slice = sel_slice[\n                    sel_slice[\"label\"] != module_config.ABSTAIN_DECODED\n                ]\n\n                # concat to the end and do some accounting\n                size_before = self.dfs[sub_to].shape[0]\n                self.dfs[sub_to] = pd.concat(\n                    [self.dfs[sub_to], valid_slice],\n                    axis=0,\n                    sort=False,\n                    ignore_index=True,\n                )\n                size_mid = self.dfs[sub_to].shape[0]\n                self.dfs[sub_to].drop_duplicates(\n                    subset=[self.__class__.FEATURE_KEY], keep=\"last\", inplace=True\n                )\n                size_after = self.dfs[sub_to].shape[0]\n\n                self._info(\n                    f\"Committed {valid_slice.shape[0]} (valid out of {sel_slice.shape[0]} selected) entries from {sub_k} to {sub_to} ({size_before} -&gt; {size_after} with {size_mid-size_after} overwrites).\"\n                )\n            # chain another callback\n            self._callback_update_population()\n\n        self.data_committer.on_click(callback_commit)\n        self._good(\n            f\"Subscribed {explorer.__class__.__name__} to dataset commits: {subset_mapping}\"\n        )\n\n    def subscribe_selection_view(self, explorer, subsets):\n\"\"\"\n        ???+ note \"Enable viewing groups of data entries, specified by a selection in an explorer.\"\n            | Param            | Type   | Description                            |\n            | :--------------- | :----- | :------------------------------------- |\n            | `explorer`       | `BokehBaseExplorer` | the explorer to register  |\n            | `subsets`        | `list` | subset selections to consider          |\n        \"\"\"\n        assert (\n            isinstance(subsets, list) and len(subsets) &gt; 0\n        ), \"Expected a non-empty list of subsets\"\n\n        explorer.link_dataset(self)\n\n        def callback_view():\n            sel_slices = []\n            for subset in subsets:\n                selected_idx = sorted(explorer.sources[subset].selected.indices)\n                sub_slice = explorer.dfs[subset].iloc[selected_idx]\n                sel_slices.append(sub_slice)\n\n            selected = pd.concat(sel_slices, axis=0)\n            self._callback_update_selection(selected)\n\n        def callback_view_refresh():\n            if 0 in self.selection_table_refresh_box.active:\n                callback_view()\n\n        def callback_evict():\n            # create sets for fast index discarding\n            subset_to_indicies = {}\n            for subset in subsets:\n                indicies = set(explorer.sources[subset].selected.indices)\n                subset_to_indicies[subset] = indicies\n\n            # from datatable index, get feature values to look up dataframe index\n            sel_source = self.sel_table.source\n            raw_indicies = sel_source.selected.indices\n            for i in raw_indicies:\n                feature_value = sel_source.data[self.__class__.FEATURE_KEY][i]\n                subset, idx = self.locate_by_feature_value(feature_value)\n                subset_to_indicies[subset].discard(idx)\n\n            # assign indices back to change actual selection\n            for subset in subsets:\n                indicies = sorted(list(subset_to_indicies[subset]))\n                explorer.sources[subset].selected.indices = indicies\n\n            self._good(\n                f\"Selection table: evicted {len(raw_indicies)} points from selection.\"\n            )\n            # refresh the selection table\n            callback_view()\n\n        explorer._register_selection_callback(\"read\", callback_view_refresh)\n        self.selection_viewer.on_click(callback_view)\n        self.selection_evictor.on_click(callback_evict)\n        self._good(\n            f\"Subscribed {explorer.__class__.__name__} to selection table: {subsets}\"\n        )\n\n    def setup_label_coding(self, verbose=True, debug=False):\n\"\"\"\n        ???+ note \"Auto-determine labels in the dataset, then create encoder/decoder in lexical order.\"\n            Add `\"ABSTAIN\"` as a no-label placeholder which gets ignored categorically.\n\n            | Param     | Type   | Description                        |\n            | :-------- | :----- | :--------------------------------- |\n            | `verbose` | `bool` | whether to log verbosely           |\n            | `debug`   | `bool` | whether to enable label validation |\n        \"\"\"\n        all_labels = set()\n        for _key in [*self.__class__.PUBLIC_SUBSETS, *self.__class__.PRIVATE_SUBSETS]:\n            _df = self.dfs[_key]\n            _found_labels = set(_df[\"label\"].tolist())\n            all_labels = all_labels.union(_found_labels)\n\n        # exclude ABSTAIN from self.classes, but include it in the encoding\n        all_labels.discard(module_config.ABSTAIN_DECODED)\n        self.classes = sorted(all_labels)\n        self.label_encoder = {\n            **{_label: _i for _i, _label in enumerate(self.classes)},\n            module_config.ABSTAIN_DECODED: module_config.ABSTAIN_ENCODED,\n        }\n        self.label_decoder = {_v: _k for _k, _v in self.label_encoder.items()}\n\n        if verbose:\n            self._good(\n                f\"Set up label encoder/decoder with {len(self.classes)} classes.\"\n            )\n        if debug:\n            self.validate_labels()\n\n    def validate_labels(self, raise_exception=True):\n\"\"\"\n        ???+ note \"Assert that every label is in the encoder.\"\n\n            | Param             | Type   | Description                         |\n            | :---------------- | :----- | :---------------------------------- |\n            | `raise_exception` | `bool` | whether to raise errors when failed |\n        \"\"\"\n        for _key in [*self.__class__.PUBLIC_SUBSETS, *self.__class__.PRIVATE_SUBSETS]:\n            _invalid_indices = None\n            assert \"label\" in self.dfs[_key].columns\n            _mask = self.dfs[_key][\"label\"].apply(\n                lambda x: int(x in self.label_encoder)\n            )\n            # DO NOT change the \"==\" to \"is\"; False in pandas is not False below\n            _invalid_indices = np.where(_mask == 0)[0].tolist()\n            if _invalid_indices:\n                self._fail(f\"Subset {_key} has invalid labels:\")\n                self._print(self.dfs[_key].loc[_invalid_indices])\n                if raise_exception:\n                    raise ValueError(\"invalid labels\")\n\n    def setup_file_export(self):\n        self.file_exporter = Dropdown(\n            label=\"Export\",\n            button_type=\"warning\",\n            menu=[\"Excel\", \"CSV\", \"JSON\", \"pickle\"],\n            height_policy=\"fit\",\n            width_policy=\"min\",\n        )\n\n        def callback_export(event, path_root=None):\n\"\"\"\n            A callback on clicking the 'self.annotator_export' button.\n            Saves the dataframe to a pickle.\n            \"\"\"\n            export_format = event.item\n\n            # auto-determine the export path root\n            if path_root is None:\n                timestamp = current_time(\"%Y%m%d%H%M%S\")\n                export_dir = module_config.DATA_SAVE_DIR\n                path_root = os.path.join(export_dir, f\"hover-dataset-{timestamp}\")\n\n            export_df = self.to_pandas()\n\n            if export_format == \"Excel\":\n                export_path = f\"{path_root}.xlsx\"\n                export_df.to_excel(export_path, index=False)\n            elif export_format == \"CSV\":\n                export_path = f\"{path_root}.csv\"\n                export_df.to_csv(export_path, index=False)\n            elif export_format == \"JSON\":\n                export_path = f\"{path_root}.json\"\n                export_df.to_json(export_path, orient=\"records\")\n            elif export_format == \"pickle\":\n                export_path = f\"{path_root}.pkl\"\n                export_df.to_pickle(export_path)\n            else:\n                raise ValueError(f\"Unexpected export format {export_format}\")\n\n            self._good(f\"saved Pandas DataFrame version to {export_path}\")\n\n        # assign the callback, keeping its reference\n        self._callback_export = callback_export\n        self.file_exporter.on_click(self._callback_export)\n\n    def setup_pop_table(self, **kwargs):\n\"\"\"\n        ???+ note \"Set up a bokeh `DataTable` widget for monitoring subset data populations.\"\n\n            | Param      | Type   | Description                  |\n            | :--------- | :----- | :--------------------------- |\n            | `**kwargs` |        | forwarded to the `DataTable` |\n        \"\"\"\n        subsets = [\n            *self.__class__.SCRATCH_SUBSETS,\n            *self.__class__.PUBLIC_SUBSETS,\n            *self.__class__.PRIVATE_SUBSETS,\n        ]\n        pop_source = ColumnDataSource(dict())\n        pop_columns = [\n            TableColumn(field=\"label\", title=\"label\"),\n            *[\n                TableColumn(field=f\"count_{_subset}\", title=_subset)\n                for _subset in subsets\n            ],\n            TableColumn(\n                field=\"color\",\n                title=\"color\",\n                formatter=HTMLTemplateFormatter(template=COLOR_GLYPH_TEMPLATE),\n            ),\n        ]\n        self.pop_table = DataTable(source=pop_source, columns=pop_columns, **kwargs)\n\n        def update_population():\n\"\"\"\n            Callback function.\n            \"\"\"\n            # make sure that the label coding is correct\n            self.setup_label_coding()\n\n            # re-compute label population\n            eff_labels = [module_config.ABSTAIN_DECODED, *self.classes]\n            color_dict = auto_label_color(self.classes)\n            eff_colors = [color_dict[_label] for _label in eff_labels]\n\n            pop_data = dict(color=eff_colors, label=eff_labels)\n            for _subset in subsets:\n                _subpop = self.dfs[_subset][\"label\"].value_counts()\n                pop_data[f\"count_{_subset}\"] = [\n                    _subpop.get(_label, 0) for _label in eff_labels\n                ]\n\n            # push results to bokeh data source\n            pop_source.data = pop_data\n\n            self._good(\n                f\"Population updater: latest population with {len(self.classes)} classes.\"\n            )\n\n        update_population()\n        self.dedup_trigger.on_click(update_population)\n\n        # store the callback so that it can be referenced by other methods\n        self._callback_update_population = update_population\n\n    def setup_sel_table(self, **kwargs):\n\"\"\"\n        ???+ note \"Set up a bokeh `DataTable` widget for viewing selected data points.\"\n\n            | Param      | Type   | Description                  |\n            | :--------- | :----- | :--------------------------- |\n            | `**kwargs` |        | forwarded to the `DataTable` |\n        \"\"\"\n\n        sel_source = ColumnDataSource(dict())\n        sel_columns = dataset_default_sel_table_columns(self.__class__.FEATURE_KEY)\n        table_kwargs = dataset_default_sel_table_kwargs(self.__class__.FEATURE_KEY)\n        table_kwargs.update(kwargs)\n        self.sel_table = DataTable(\n            source=sel_source, columns=sel_columns, **table_kwargs\n        )\n\n        def update_selection(selected_df):\n\"\"\"\n            To be triggered as a subroutine of `self.selection_viewer`.\n            \"\"\"\n            sel_source.data = selected_df.to_dict(orient=\"list\")\n            # now that selection table has changed, clear sub-selection\n            sel_source.selected.indices = []\n\n            self._good(\n                f\"Selection table: latest selection with {selected_df.shape[0]} entries.\"\n            )\n\n        self._callback_update_selection = update_selection\n\n        def patch_edited_selection():\n            sel_source = self.sel_table.source\n            raw_indices = sel_source.selected.indices\n            for i in raw_indices:\n                feature_value = sel_source.data[self.__class__.FEATURE_KEY][i]\n                subset, idx = self.locate_by_feature_value(feature_value)\n                for key in sel_source.data.keys():\n                    self.dfs[subset].at[idx, key] = sel_source.data[key][i]\n\n            self._good(f\"Selection table: edited {len(raw_indices)} dataset rows.\")\n            # if edited labels (which is common), then population has changed\n            self._callback_update_population()\n\n        self.selection_patcher.on_click(patch_edited_selection)\n\n    def df_deduplicate(self):\n\"\"\"\n        ???+ note \"Cross-deduplicate data entries by feature between subsets.\"\n        \"\"\"\n        self._info(\"Deduplicating...\")\n        # for data entry accounting\n        before, after = dict(), dict()\n\n        # deduplicating rule: entries that come LATER are of higher priority\n        ordered_subsets = [\n            *self.__class__.SCRATCH_SUBSETS,\n            *self.__class__.PUBLIC_SUBSETS,\n            *self.__class__.PRIVATE_SUBSETS,\n        ]\n\n        # keep track of which df has which columns and which rows came from which subset\n        columns = dict()\n        for _key in ordered_subsets:\n            before[_key] = self.dfs[_key].shape[0]\n            columns[_key] = self.dfs[_key].columns\n            self.dfs[_key][\"__subset\"] = _key\n\n        # concatenate in order and deduplicate\n        overall_df = pd.concat(\n            [self.dfs[_key] for _key in ordered_subsets], axis=0, sort=False\n        )\n        overall_df.drop_duplicates(\n            subset=[self.__class__.FEATURE_KEY], keep=\"last\", inplace=True\n        )\n        overall_df.reset_index(drop=True, inplace=True)\n\n        # cut up slices\n        for _key in ordered_subsets:\n            self.dfs[_key] = overall_df[overall_df[\"__subset\"] == _key].reset_index(\n                drop=True, inplace=False\n            )[columns[_key]]\n            after[_key] = self.dfs[_key].shape[0]\n            self._info(f\"--subset {_key} rows: {before[_key]} -&gt; {after[_key]}.\")\n\n        self.compute_feature_index()\n\n    @property\n    def vectorizer_lookup(self):\n        return self._vectorizer_lookup\n\n    @vectorizer_lookup.setter\n    def vectorizer_lookup(self, *args, **kwargs):\n        self._fail(\"assigning vectorizer lookup by reference is forbidden.\")\n\n    def compute_nd_embedding(self, vectorizer, method=None, dimension=2, **kwargs):\n\"\"\"\n        ???+ note \"Get embeddings in n-dimensional space and return the dimensionality reducer.\"\n            Reference: [`DimensionalityReducer`](https://github.com/phurwicz/hover/blob/main/hover/core/representation/reduction.py)\n\n            | Param        | Type       | Description                        |\n            | :----------- | :--------- | :--------------------------------- |\n            | `vectorizer` | `callable` | the feature -&gt; vector function     |\n            | `method`     | `str`      | arg for `DimensionalityReducer`    |\n            | `dimension`  | `int`      | dimension of output embedding      |\n            | `**kwargs`   |            | kwargs for `DimensionalityReducer` |\n        \"\"\"\n        from hover.core.representation.reduction import DimensionalityReducer\n\n        if method is None:\n            method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n        # register the vectorizer for scenarios that may need it\n        self.vectorizer_lookup[dimension] = vectorizer\n\n        # prepare input vectors to manifold learning\n        fit_subset = [*self.__class__.SCRATCH_SUBSETS, *self.__class__.PUBLIC_SUBSETS]\n        trans_subset = [*self.__class__.PRIVATE_SUBSETS]\n\n        assert not set(fit_subset).intersection(set(trans_subset)), \"Unexpected overlap\"\n        assert isinstance(dimension, int) and dimension &gt;= 2\n        embedding_cols = [embedding_field(dimension, i) for i in range(dimension)]\n\n        # compute vectors and keep track which where to slice the array for fitting\n        feature_inp = []\n        for _key in fit_subset:\n            feature_inp.extend(self.dfs[_key][self.__class__.FEATURE_KEY].tolist())\n        fit_num = len(feature_inp)\n        for _key in trans_subset:\n            feature_inp.extend(self.dfs[_key][self.__class__.FEATURE_KEY].tolist())\n        trans_arr = np.array(\n            [vectorizer(_inp) for _inp in tqdm(feature_inp, desc=\"Vectorizing\")]\n        )\n\n        # initialize and fit manifold learning reducer using specified subarray\n        self._info(f\"Fit-transforming {method.upper()} on {fit_num} samples...\")\n        reducer = DimensionalityReducer(trans_arr[:fit_num])\n        fit_embedding = reducer.fit_transform(method, dimension=dimension, **kwargs)\n\n        # compute embedding of the whole dataset\n        self._info(\n            f\"Transforming {method.upper()} on {trans_arr.shape[0]-fit_num} samples...\"\n        )\n        trans_embedding = reducer.transform(trans_arr[fit_num:], method)\n\n        # assign x and y coordinates to dataset\n        start_idx = 0\n        for _subset, _embedding in [\n            (fit_subset, fit_embedding),\n            (trans_subset, trans_embedding),\n        ]:\n            # edge case: embedding is too small\n            if _embedding.shape[0] &lt; 1:\n                for _key in _subset:\n                    assert (\n                        self.dfs[_key].shape[0] == 0\n                    ), \"Expected empty df due to empty embedding\"\n                continue\n            for _key in _subset:\n                _length = self.dfs[_key].shape[0]\n                for _i in range(dimension):\n                    _col = embedding_cols[_i]\n                    self.dfs[_key][_col] = pd.Series(\n                        _embedding[start_idx : (start_idx + _length), _i]\n                    )\n                start_idx += _length\n\n        self._good(f\"Computed {dimension}-d embedding in columns {embedding_cols}\")\n        return reducer\n\n    def compute_2d_embedding(self, vectorizer, method=None, **kwargs):\n\"\"\"\n        ???+ note \"Get embeddings in the xy-plane and return the dimensionality reducer.\"\n            A special case of `compute_nd_embedding`.\n\n            | Param        | Type       | Description                        |\n            | :----------- | :--------- | :--------------------------------- |\n            | `vectorizer` | `callable` | the feature -&gt; vector function     |\n            | `method`     | `str`      | arg for `DimensionalityReducer`    |\n            | `**kwargs`   |            | kwargs for `DimensionalityReducer` |\n        \"\"\"\n        reducer = self.compute_nd_embedding(\n            vectorizer, method=None, dimension=2, **kwargs\n        )\n        return reducer\n\n    def loader(self, key, *vectorizers, batch_size=64, smoothing_coeff=0.0):\n\"\"\"\n        ???+ note \"Prepare a torch `Dataloader` for training or evaluation.\"\n            | Param         | Type          | Description                        |\n            | :------------ | :------------ | :--------------------------------- |\n            | `key`         | `str`         | subset of data, e.g. `\"train\"`     |\n            | `vectorizers` | `callable`(s) | the feature -&gt; vector function(s)  |\n            | `batch_size`  | `int`         | size per batch                     |\n            | `smoothing_coeff` | `float`   | portion of probability to equally split between classes |\n        \"\"\"\n        # lazy import: missing torch should not break the rest of the class\n        from hover.utils.torch_helper import (\n            VectorDataset,\n            MultiVectorDataset,\n            one_hot,\n            label_smoothing,\n        )\n\n        # take the slice that has a meaningful label\n        df = self.dfs[key][self.dfs[key][\"label\"] != module_config.ABSTAIN_DECODED]\n\n        # edge case: valid slice is too small\n        if df.shape[0] &lt; 1:\n            raise ValueError(f\"Subset {key} has too few samples ({df.shape[0]})\")\n        batch_size = min(batch_size, df.shape[0])\n\n        # prepare output vectors\n        labels = df[\"label\"].apply(lambda x: self.label_encoder[x]).tolist()\n        output_vectors = one_hot(labels, num_classes=len(self.classes))\n        if smoothing_coeff &gt; 0.0:\n            output_vectors = label_smoothing(\n                output_vectors, coefficient=smoothing_coeff\n            )\n\n        # prepare input vectors\n        assert len(vectorizers) &gt; 0, \"Expected at least one vectorizer\"\n        multi_flag = len(vectorizers) &gt; 1\n        features = df[self.__class__.FEATURE_KEY].tolist()\n\n        input_vector_lists = []\n        for _vec_func in vectorizers:\n            self._info(f\"Preparing {key} input vectors...\")\n            _input_vecs = [_vec_func(_f) for _f in tqdm(features, desc=\"Vectorizing\")]\n            input_vector_lists.append(_input_vecs)\n\n        self._info(f\"Preparing {key} data loader...\")\n        if multi_flag:\n            assert len(input_vector_lists) &gt; 1, \"Expected multiple lists of vectors\"\n            loader = MultiVectorDataset(input_vector_lists, output_vectors).loader(\n                batch_size=batch_size\n            )\n        else:\n            assert len(input_vector_lists) == 1, \"Expected only one list of vectors\"\n            input_vectors = input_vector_lists[0]\n            loader = VectorDataset(input_vectors, output_vectors).loader(\n                batch_size=batch_size\n            )\n        self._good(\n            f\"Prepared {key} loader with {len(features)} examples; {len(vectorizers)} vectors per feature, batch size {batch_size}\"\n        )\n        return loader\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.__init__","title":"<code>__init__(self, *args, **kwargs)</code>  <code>special</code>","text":"Set up data subsets, widgets, and supplementary data structures. <p>See <code>self.setup_dfs</code> for parameter details.</p> Source code in <code>hover/core/dataset.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\"\"\"\n    ???+ note \"Set up data subsets, widgets, and supplementary data structures.\"\n\n        See `self.setup_dfs` for parameter details.\n    \"\"\"\n    self._info(\"Initializing...\")\n    self.setup_dfs(*args, **kwargs)\n    self.df_deduplicate()\n    self.compute_feature_index()\n    self.setup_widgets()\n    # self.setup_label_coding() # redundant if setup_pop_table() immediately calls this again\n    self.setup_file_export()\n    self.setup_pop_table()\n    self.setup_sel_table()\n    self._vectorizer_lookup = OrderedDict()\n    self._good(f\"{self.__class__.__name__}: finished initialization.\")\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.compute_2d_embedding","title":"<code>compute_2d_embedding(self, vectorizer, method=None, **kwargs)</code>","text":"Get embeddings in the xy-plane and return the dimensionality reducer. <p>A special case of <code>compute_nd_embedding</code>.</p> Param Type Description <code>vectorizer</code> <code>callable</code> the feature -&gt; vector function <code>method</code> <code>str</code> arg for <code>DimensionalityReducer</code> <code>**kwargs</code> kwargs for <code>DimensionalityReducer</code> Source code in <code>hover/core/dataset.py</code> <pre><code>def compute_2d_embedding(self, vectorizer, method=None, **kwargs):\n\"\"\"\n    ???+ note \"Get embeddings in the xy-plane and return the dimensionality reducer.\"\n        A special case of `compute_nd_embedding`.\n\n        | Param        | Type       | Description                        |\n        | :----------- | :--------- | :--------------------------------- |\n        | `vectorizer` | `callable` | the feature -&gt; vector function     |\n        | `method`     | `str`      | arg for `DimensionalityReducer`    |\n        | `**kwargs`   |            | kwargs for `DimensionalityReducer` |\n    \"\"\"\n    reducer = self.compute_nd_embedding(\n        vectorizer, method=None, dimension=2, **kwargs\n    )\n    return reducer\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.compute_feature_index","title":"<code>compute_feature_index(self)</code>","text":"Allow lookup by feature value without setting it as the index. <p>Assumes that feature values are unique. The reason not to just set the feature as the index is because integer indices work smoothly with Bokeh <code>DataSource</code>s, NumPy <code>array</code>s, and Torch <code>Tensor</code>s.</p> Source code in <code>hover/core/dataset.py</code> <pre><code>def compute_feature_index(self):\n\"\"\"\n    ???+ note \"Allow lookup by feature value without setting it as the index.\"\n\n        Assumes that feature values are unique. The reason not to just set the feature as the index is because integer indices work smoothly with Bokeh `DataSource`s, NumPy `array`s, and Torch `Tensor`s.\n    \"\"\"\n    feature_to_subset_idx = {}\n    for _subset, _df in self.dfs.items():\n        _values = _df[self.__class__.FEATURE_KEY].values\n        for i, _val in enumerate(_values):\n            if _val in feature_to_subset_idx:\n                raise ValueError(\n                    f\"Expected unique feature values, found duplicate {_val}\"\n                )\n            feature_to_subset_idx[_val] = (_subset, i)\n    self.feature_to_subset_idx = feature_to_subset_idx\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.compute_nd_embedding","title":"<code>compute_nd_embedding(self, vectorizer, method=None, dimension=2, **kwargs)</code>","text":"Get embeddings in n-dimensional space and return the dimensionality reducer. <p>Reference: <code>DimensionalityReducer</code></p> Param Type Description <code>vectorizer</code> <code>callable</code> the feature -&gt; vector function <code>method</code> <code>str</code> arg for <code>DimensionalityReducer</code> <code>dimension</code> <code>int</code> dimension of output embedding <code>**kwargs</code> kwargs for <code>DimensionalityReducer</code> Source code in <code>hover/core/dataset.py</code> <pre><code>def compute_nd_embedding(self, vectorizer, method=None, dimension=2, **kwargs):\n\"\"\"\n    ???+ note \"Get embeddings in n-dimensional space and return the dimensionality reducer.\"\n        Reference: [`DimensionalityReducer`](https://github.com/phurwicz/hover/blob/main/hover/core/representation/reduction.py)\n\n        | Param        | Type       | Description                        |\n        | :----------- | :--------- | :--------------------------------- |\n        | `vectorizer` | `callable` | the feature -&gt; vector function     |\n        | `method`     | `str`      | arg for `DimensionalityReducer`    |\n        | `dimension`  | `int`      | dimension of output embedding      |\n        | `**kwargs`   |            | kwargs for `DimensionalityReducer` |\n    \"\"\"\n    from hover.core.representation.reduction import DimensionalityReducer\n\n    if method is None:\n        method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n    # register the vectorizer for scenarios that may need it\n    self.vectorizer_lookup[dimension] = vectorizer\n\n    # prepare input vectors to manifold learning\n    fit_subset = [*self.__class__.SCRATCH_SUBSETS, *self.__class__.PUBLIC_SUBSETS]\n    trans_subset = [*self.__class__.PRIVATE_SUBSETS]\n\n    assert not set(fit_subset).intersection(set(trans_subset)), \"Unexpected overlap\"\n    assert isinstance(dimension, int) and dimension &gt;= 2\n    embedding_cols = [embedding_field(dimension, i) for i in range(dimension)]\n\n    # compute vectors and keep track which where to slice the array for fitting\n    feature_inp = []\n    for _key in fit_subset:\n        feature_inp.extend(self.dfs[_key][self.__class__.FEATURE_KEY].tolist())\n    fit_num = len(feature_inp)\n    for _key in trans_subset:\n        feature_inp.extend(self.dfs[_key][self.__class__.FEATURE_KEY].tolist())\n    trans_arr = np.array(\n        [vectorizer(_inp) for _inp in tqdm(feature_inp, desc=\"Vectorizing\")]\n    )\n\n    # initialize and fit manifold learning reducer using specified subarray\n    self._info(f\"Fit-transforming {method.upper()} on {fit_num} samples...\")\n    reducer = DimensionalityReducer(trans_arr[:fit_num])\n    fit_embedding = reducer.fit_transform(method, dimension=dimension, **kwargs)\n\n    # compute embedding of the whole dataset\n    self._info(\n        f\"Transforming {method.upper()} on {trans_arr.shape[0]-fit_num} samples...\"\n    )\n    trans_embedding = reducer.transform(trans_arr[fit_num:], method)\n\n    # assign x and y coordinates to dataset\n    start_idx = 0\n    for _subset, _embedding in [\n        (fit_subset, fit_embedding),\n        (trans_subset, trans_embedding),\n    ]:\n        # edge case: embedding is too small\n        if _embedding.shape[0] &lt; 1:\n            for _key in _subset:\n                assert (\n                    self.dfs[_key].shape[0] == 0\n                ), \"Expected empty df due to empty embedding\"\n            continue\n        for _key in _subset:\n            _length = self.dfs[_key].shape[0]\n            for _i in range(dimension):\n                _col = embedding_cols[_i]\n                self.dfs[_key][_col] = pd.Series(\n                    _embedding[start_idx : (start_idx + _length), _i]\n                )\n            start_idx += _length\n\n    self._good(f\"Computed {dimension}-d embedding in columns {embedding_cols}\")\n    return reducer\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.copy","title":"<code>copy(self)</code>","text":"Create another instance, copying over the data entries. <p>Also copy data structures that don't get created in the new instance.</p> Source code in <code>hover/core/dataset.py</code> <pre><code>def copy(self):\n\"\"\"\n    ???+ note \"Create another instance, copying over the data entries.\"\n\n        Also copy data structures that don't get created in the new instance.\n    \"\"\"\n    dataset = self.__class__.from_pandas(self.to_pandas())\n    dataset._vectorizer_lookup.update(self._vectorizer_lookup)\n    return dataset\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.df_deduplicate","title":"<code>df_deduplicate(self)</code>","text":"Cross-deduplicate data entries by feature between subsets. Source code in <code>hover/core/dataset.py</code> <pre><code>def df_deduplicate(self):\n\"\"\"\n    ???+ note \"Cross-deduplicate data entries by feature between subsets.\"\n    \"\"\"\n    self._info(\"Deduplicating...\")\n    # for data entry accounting\n    before, after = dict(), dict()\n\n    # deduplicating rule: entries that come LATER are of higher priority\n    ordered_subsets = [\n        *self.__class__.SCRATCH_SUBSETS,\n        *self.__class__.PUBLIC_SUBSETS,\n        *self.__class__.PRIVATE_SUBSETS,\n    ]\n\n    # keep track of which df has which columns and which rows came from which subset\n    columns = dict()\n    for _key in ordered_subsets:\n        before[_key] = self.dfs[_key].shape[0]\n        columns[_key] = self.dfs[_key].columns\n        self.dfs[_key][\"__subset\"] = _key\n\n    # concatenate in order and deduplicate\n    overall_df = pd.concat(\n        [self.dfs[_key] for _key in ordered_subsets], axis=0, sort=False\n    )\n    overall_df.drop_duplicates(\n        subset=[self.__class__.FEATURE_KEY], keep=\"last\", inplace=True\n    )\n    overall_df.reset_index(drop=True, inplace=True)\n\n    # cut up slices\n    for _key in ordered_subsets:\n        self.dfs[_key] = overall_df[overall_df[\"__subset\"] == _key].reset_index(\n            drop=True, inplace=False\n        )[columns[_key]]\n        after[_key] = self.dfs[_key].shape[0]\n        self._info(f\"--subset {_key} rows: {before[_key]} -&gt; {after[_key]}.\")\n\n    self.compute_feature_index()\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.from_pandas","title":"<code>from_pandas(df, **kwargs)</code>  <code>classmethod</code>","text":"Import from a pandas DataFrame. Param Type Description <code>df</code> <code>DataFrame</code> with a \"SUBSET\" field dividing subsets Source code in <code>hover/core/dataset.py</code> <pre><code>@classmethod\ndef from_pandas(cls, df, **kwargs):\n\"\"\"\n    ???+ note \"Import from a pandas DataFrame.\"\n        | Param    | Type   | Description                          |\n        | :------- | :----- | :----------------------------------- |\n        | `df` | `DataFrame` | with a \"SUBSET\" field dividing subsets |\n    \"\"\"\n    SUBSETS = cls.SCRATCH_SUBSETS + cls.PUBLIC_SUBSETS + cls.PRIVATE_SUBSETS\n\n    if DATASET_SUBSET_FIELD not in df.columns:\n        raise ValueError(\n            f\"Expecting column '{DATASET_SUBSET_FIELD}' in the DataFrame which takes values from {SUBSETS}\"\n        )\n\n    dictls = {}\n    for _subset in [\"raw\", \"train\", \"dev\", \"test\"]:\n        _sub_df = df[df[DATASET_SUBSET_FIELD] == _subset]\n        dictls[_subset] = _sub_df.to_dict(orient=\"records\")\n\n    return cls(\n        raw_dictl=dictls[\"raw\"],\n        train_dictl=dictls[\"train\"],\n        dev_dictl=dictls[\"dev\"],\n        test_dictl=dictls[\"test\"],\n        **kwargs,\n    )\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.loader","title":"<code>loader(self, key, *vectorizers, *, batch_size=64, smoothing_coeff=0.0)</code>","text":"Prepare a torch <code>Dataloader</code> for training or evaluation. Param Type Description <code>key</code> <code>str</code> subset of data, e.g. <code>\"train\"</code> <code>vectorizers</code> <code>callable</code>(s) the feature -&gt; vector function(s) <code>batch_size</code> <code>int</code> size per batch <code>smoothing_coeff</code> <code>float</code> portion of probability to equally split between classes Source code in <code>hover/core/dataset.py</code> <pre><code>def loader(self, key, *vectorizers, batch_size=64, smoothing_coeff=0.0):\n\"\"\"\n    ???+ note \"Prepare a torch `Dataloader` for training or evaluation.\"\n        | Param         | Type          | Description                        |\n        | :------------ | :------------ | :--------------------------------- |\n        | `key`         | `str`         | subset of data, e.g. `\"train\"`     |\n        | `vectorizers` | `callable`(s) | the feature -&gt; vector function(s)  |\n        | `batch_size`  | `int`         | size per batch                     |\n        | `smoothing_coeff` | `float`   | portion of probability to equally split between classes |\n    \"\"\"\n    # lazy import: missing torch should not break the rest of the class\n    from hover.utils.torch_helper import (\n        VectorDataset,\n        MultiVectorDataset,\n        one_hot,\n        label_smoothing,\n    )\n\n    # take the slice that has a meaningful label\n    df = self.dfs[key][self.dfs[key][\"label\"] != module_config.ABSTAIN_DECODED]\n\n    # edge case: valid slice is too small\n    if df.shape[0] &lt; 1:\n        raise ValueError(f\"Subset {key} has too few samples ({df.shape[0]})\")\n    batch_size = min(batch_size, df.shape[0])\n\n    # prepare output vectors\n    labels = df[\"label\"].apply(lambda x: self.label_encoder[x]).tolist()\n    output_vectors = one_hot(labels, num_classes=len(self.classes))\n    if smoothing_coeff &gt; 0.0:\n        output_vectors = label_smoothing(\n            output_vectors, coefficient=smoothing_coeff\n        )\n\n    # prepare input vectors\n    assert len(vectorizers) &gt; 0, \"Expected at least one vectorizer\"\n    multi_flag = len(vectorizers) &gt; 1\n    features = df[self.__class__.FEATURE_KEY].tolist()\n\n    input_vector_lists = []\n    for _vec_func in vectorizers:\n        self._info(f\"Preparing {key} input vectors...\")\n        _input_vecs = [_vec_func(_f) for _f in tqdm(features, desc=\"Vectorizing\")]\n        input_vector_lists.append(_input_vecs)\n\n    self._info(f\"Preparing {key} data loader...\")\n    if multi_flag:\n        assert len(input_vector_lists) &gt; 1, \"Expected multiple lists of vectors\"\n        loader = MultiVectorDataset(input_vector_lists, output_vectors).loader(\n            batch_size=batch_size\n        )\n    else:\n        assert len(input_vector_lists) == 1, \"Expected only one list of vectors\"\n        input_vectors = input_vector_lists[0]\n        loader = VectorDataset(input_vectors, output_vectors).loader(\n            batch_size=batch_size\n        )\n    self._good(\n        f\"Prepared {key} loader with {len(features)} examples; {len(vectorizers)} vectors per feature, batch size {batch_size}\"\n    )\n    return loader\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.locate_by_feature_value","title":"<code>locate_by_feature_value(self, value, auto_recompute=True)</code>","text":"Find the subset and index given a feature value. <p>Assumes that the value is present and detects if the subset and index found is consistent with the value.</p> Source code in <code>hover/core/dataset.py</code> <pre><code>def locate_by_feature_value(self, value, auto_recompute=True):\n\"\"\"\n    ???+ note \"Find the subset and index given a feature value.\"\n\n        Assumes that the value is present and detects if the subset and index found is consistent with the value.\n    \"\"\"\n    subset, index = self.feature_to_subset_idx[value]\n\n    current_value = self.dfs[subset].at[index, self.__class__.FEATURE_KEY]\n    if current_value != value:\n        if auto_recompute:\n            self._warn(\"locate_by_feature_value mismatch. Recomputing index.\")\n            self.compute_feature_index()\n            # if ever need to recompute twice, there must be a bug\n            return self.locate_by_feature_value(value, auto_recompute=False)\n        else:\n            raise ValueError(\"locate_by_feature_value mismatch.\")\n    return subset, index\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_dfs","title":"<code>setup_dfs(self, raw_dictl, train_dictl=None, dev_dictl=None, test_dictl=None, feature_key='feature', label_key='label')</code>","text":"Subroutine of the constructor that creates standard-format DataFrames. Param Type Description <code>raw_dictl</code> <code>list</code> list of dicts holding the to-be-supervised raw data <code>train_dictl</code> <code>list</code> list of dicts holding any supervised train data <code>dev_dictl</code> <code>list</code> list of dicts holding any supervised dev data <code>test_dictl</code> <code>list</code> list of dicts holding any supervised test data <code>feature_key</code> <code>str</code> the key for the feature in each piece of data <code>label_key</code> <code>str</code> the key for the <code>**str**</code> label in supervised data Source code in <code>hover/core/dataset.py</code> <pre><code>def setup_dfs(\n    self,\n    raw_dictl,\n    train_dictl=None,\n    dev_dictl=None,\n    test_dictl=None,\n    feature_key=\"feature\",\n    label_key=\"label\",\n):\n\"\"\"\n    ???+ note \"Subroutine of the constructor that creates standard-format DataFrames.\"\n\n        | Param         | Type   | Description                          |\n        | :------------ | :----- | :----------------------------------- |\n        | `raw_dictl`   | `list` | list of dicts holding the **to-be-supervised** raw data |\n        | `train_dictl` | `list` | list of dicts holding any **supervised** train data |\n        | `dev_dictl`   | `list` | list of dicts holding any **supervised** dev data   |\n        | `test_dictl`  | `list` | list of dicts holding any **supervised** test data  |\n        | `feature_key` | `str`  | the key for the feature in each piece of data |\n        | `label_key`   | `str`  | the key for the `**str**` label in supervised data |\n    \"\"\"\n\n    def dictl_transform(dictl, labels=True):\n\"\"\"\n        Burner function to transform the input list of dictionaries into standard format.\n        \"\"\"\n        # edge case when dictl is empty or None\n        if not dictl:\n            return []\n\n        # transform the feature and possibly the label\n        key_transform = {feature_key: self.__class__.FEATURE_KEY}\n        if labels:\n            key_transform[label_key] = \"label\"\n\n        def burner(d):\n\"\"\"\n            Burner function to transform a single dict.\n            \"\"\"\n            if labels:\n                assert label_key in d, f\"Expected dict key {label_key}\"\n\n            trans_d = {key_transform.get(_k, _k): _v for _k, _v in d.items()}\n\n            if not labels:\n                trans_d[\"label\"] = module_config.ABSTAIN_DECODED\n\n            return trans_d\n\n        return [burner(_d) for _d in dictl]\n\n    # standardize records\n    dictls = {\n        \"raw\": dictl_transform(raw_dictl, labels=False),\n        \"train\": dictl_transform(train_dictl),\n        \"dev\": dictl_transform(dev_dictl),\n        \"test\": dictl_transform(test_dictl),\n    }\n\n    # initialize dataframes\n    self.dfs = dict()\n    for _key, _dictl in dictls.items():\n        if _dictl:\n            _df = pd.DataFrame(_dictl)\n            assert self.__class__.FEATURE_KEY in _df.columns\n            assert \"label\" in _df.columns\n        else:\n            _df = pd.DataFrame(columns=[self.__class__.FEATURE_KEY, \"label\"])\n\n        self.dfs[_key] = _df\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_label_coding","title":"<code>setup_label_coding(self, verbose=True, debug=False)</code>","text":"Auto-determine labels in the dataset, then create encoder/decoder in lexical order. <p>Add <code>\"ABSTAIN\"</code> as a no-label placeholder which gets ignored categorically.</p> Param Type Description <code>verbose</code> <code>bool</code> whether to log verbosely <code>debug</code> <code>bool</code> whether to enable label validation Source code in <code>hover/core/dataset.py</code> <pre><code>def setup_label_coding(self, verbose=True, debug=False):\n\"\"\"\n    ???+ note \"Auto-determine labels in the dataset, then create encoder/decoder in lexical order.\"\n        Add `\"ABSTAIN\"` as a no-label placeholder which gets ignored categorically.\n\n        | Param     | Type   | Description                        |\n        | :-------- | :----- | :--------------------------------- |\n        | `verbose` | `bool` | whether to log verbosely           |\n        | `debug`   | `bool` | whether to enable label validation |\n    \"\"\"\n    all_labels = set()\n    for _key in [*self.__class__.PUBLIC_SUBSETS, *self.__class__.PRIVATE_SUBSETS]:\n        _df = self.dfs[_key]\n        _found_labels = set(_df[\"label\"].tolist())\n        all_labels = all_labels.union(_found_labels)\n\n    # exclude ABSTAIN from self.classes, but include it in the encoding\n    all_labels.discard(module_config.ABSTAIN_DECODED)\n    self.classes = sorted(all_labels)\n    self.label_encoder = {\n        **{_label: _i for _i, _label in enumerate(self.classes)},\n        module_config.ABSTAIN_DECODED: module_config.ABSTAIN_ENCODED,\n    }\n    self.label_decoder = {_v: _k for _k, _v in self.label_encoder.items()}\n\n    if verbose:\n        self._good(\n            f\"Set up label encoder/decoder with {len(self.classes)} classes.\"\n        )\n    if debug:\n        self.validate_labels()\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_pop_table","title":"<code>setup_pop_table(self, **kwargs)</code>","text":"Set up a bokeh <code>DataTable</code> widget for monitoring subset data populations. Param Type Description <code>**kwargs</code> forwarded to the <code>DataTable</code> Source code in <code>hover/core/dataset.py</code> <pre><code>def setup_pop_table(self, **kwargs):\n\"\"\"\n    ???+ note \"Set up a bokeh `DataTable` widget for monitoring subset data populations.\"\n\n        | Param      | Type   | Description                  |\n        | :--------- | :----- | :--------------------------- |\n        | `**kwargs` |        | forwarded to the `DataTable` |\n    \"\"\"\n    subsets = [\n        *self.__class__.SCRATCH_SUBSETS,\n        *self.__class__.PUBLIC_SUBSETS,\n        *self.__class__.PRIVATE_SUBSETS,\n    ]\n    pop_source = ColumnDataSource(dict())\n    pop_columns = [\n        TableColumn(field=\"label\", title=\"label\"),\n        *[\n            TableColumn(field=f\"count_{_subset}\", title=_subset)\n            for _subset in subsets\n        ],\n        TableColumn(\n            field=\"color\",\n            title=\"color\",\n            formatter=HTMLTemplateFormatter(template=COLOR_GLYPH_TEMPLATE),\n        ),\n    ]\n    self.pop_table = DataTable(source=pop_source, columns=pop_columns, **kwargs)\n\n    def update_population():\n\"\"\"\n        Callback function.\n        \"\"\"\n        # make sure that the label coding is correct\n        self.setup_label_coding()\n\n        # re-compute label population\n        eff_labels = [module_config.ABSTAIN_DECODED, *self.classes]\n        color_dict = auto_label_color(self.classes)\n        eff_colors = [color_dict[_label] for _label in eff_labels]\n\n        pop_data = dict(color=eff_colors, label=eff_labels)\n        for _subset in subsets:\n            _subpop = self.dfs[_subset][\"label\"].value_counts()\n            pop_data[f\"count_{_subset}\"] = [\n                _subpop.get(_label, 0) for _label in eff_labels\n            ]\n\n        # push results to bokeh data source\n        pop_source.data = pop_data\n\n        self._good(\n            f\"Population updater: latest population with {len(self.classes)} classes.\"\n        )\n\n    update_population()\n    self.dedup_trigger.on_click(update_population)\n\n    # store the callback so that it can be referenced by other methods\n    self._callback_update_population = update_population\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_sel_table","title":"<code>setup_sel_table(self, **kwargs)</code>","text":"Set up a bokeh <code>DataTable</code> widget for viewing selected data points. Param Type Description <code>**kwargs</code> forwarded to the <code>DataTable</code> Source code in <code>hover/core/dataset.py</code> <pre><code>def setup_sel_table(self, **kwargs):\n\"\"\"\n    ???+ note \"Set up a bokeh `DataTable` widget for viewing selected data points.\"\n\n        | Param      | Type   | Description                  |\n        | :--------- | :----- | :--------------------------- |\n        | `**kwargs` |        | forwarded to the `DataTable` |\n    \"\"\"\n\n    sel_source = ColumnDataSource(dict())\n    sel_columns = dataset_default_sel_table_columns(self.__class__.FEATURE_KEY)\n    table_kwargs = dataset_default_sel_table_kwargs(self.__class__.FEATURE_KEY)\n    table_kwargs.update(kwargs)\n    self.sel_table = DataTable(\n        source=sel_source, columns=sel_columns, **table_kwargs\n    )\n\n    def update_selection(selected_df):\n\"\"\"\n        To be triggered as a subroutine of `self.selection_viewer`.\n        \"\"\"\n        sel_source.data = selected_df.to_dict(orient=\"list\")\n        # now that selection table has changed, clear sub-selection\n        sel_source.selected.indices = []\n\n        self._good(\n            f\"Selection table: latest selection with {selected_df.shape[0]} entries.\"\n        )\n\n    self._callback_update_selection = update_selection\n\n    def patch_edited_selection():\n        sel_source = self.sel_table.source\n        raw_indices = sel_source.selected.indices\n        for i in raw_indices:\n            feature_value = sel_source.data[self.__class__.FEATURE_KEY][i]\n            subset, idx = self.locate_by_feature_value(feature_value)\n            for key in sel_source.data.keys():\n                self.dfs[subset].at[idx, key] = sel_source.data[key][i]\n\n        self._good(f\"Selection table: edited {len(raw_indices)} dataset rows.\")\n        # if edited labels (which is common), then population has changed\n        self._callback_update_population()\n\n    self.selection_patcher.on_click(patch_edited_selection)\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_widgets","title":"<code>setup_widgets(self)</code>","text":"Create <code>bokeh</code> widgets for interactive data management. <p>Operations: -   PUSH: push updated dataframes to linked <code>explorer</code>s. -   COMMIT: added selected points to a specific subset <code>dataframe</code>. -   DEDUP: cross-deduplicate across all subset <code>dataframe</code>s. -   VIEW: view selected points of linked <code>explorer</code>s.     -   the link can be different from that for PUSH. Typically all the <code>explorer</code>s sync their selections, and only an <code>annotator</code> is linked to the <code>dataset</code>. -   PATCH: update a few edited rows from VIEW result to the dataset. -   EVICT: remove a few rows from both VIEW result and linked <code>explorer</code> selection.</p> Source code in <code>hover/core/dataset.py</code> <pre><code>def setup_widgets(self):\n\"\"\"\n    ???+ note \"Create `bokeh` widgets for interactive data management.\"\n\n        Operations:\n        -   PUSH: push updated dataframes to linked `explorer`s.\n        -   COMMIT: added selected points to a specific subset `dataframe`.\n        -   DEDUP: cross-deduplicate across all subset `dataframe`s.\n        -   VIEW: view selected points of linked `explorer`s.\n            -   the link can be different from that for PUSH. Typically all the `explorer`s sync their selections, and only an `annotator` is linked to the `dataset`.\n        -   PATCH: update a few edited rows from VIEW result to the dataset.\n        -   EVICT: remove a few rows from both VIEW result and linked `explorer` selection.\n    \"\"\"\n    self.update_pusher = Button(\n        label=\"Push\",\n        button_type=\"success\",\n    )\n    self.data_committer = Dropdown(\n        label=\"Commit\",\n        button_type=\"warning\",\n        menu=[*self.__class__.PUBLIC_SUBSETS, *self.__class__.PRIVATE_SUBSETS],\n    )\n    self.dedup_trigger = Button(\n        label=\"Dedup\",\n        button_type=\"warning\",\n    )\n    self.selection_viewer = Button(\n        label=\"View Selected\",\n        button_type=\"primary\",\n    )\n    self.selection_patcher = Button(\n        label=\"Update Row Values\",\n        button_type=\"warning\",\n    )\n    self.selection_evictor = Button(\n        label=\"Evict Rows from Selection\",\n        button_type=\"primary\",\n    )\n\n    self.selection_table_refresh_box = CheckboxGroup(\n        labels=[\"auto refresh selection table\"], active=[]\n    )\n    self.help_div = dataset_help_widget()\n\n    def commit_base_callback():\n\"\"\"\n        COMMIT creates cross-duplicates between subsets.\n        Changes dataset rows.\n        No change to explorers.\n\n        - PUSH shall be blocked until DEDUP is executed.\n        - PATCH shall be blocked until PUSH is executed.\n        - EVICT shall be blocked until PUSH is executed.\n        \"\"\"\n        self.dedup_trigger.disabled = False\n        self.update_pusher.disabled = True\n        self.selection_patcher.disabled = True\n        self.selection_evictor.disabled = True\n\n    def dedup_base_callback():\n\"\"\"\n        DEDUP re-creates dfs with different indices than before.\n        Changes dataset rows.\n        No change to explorers.\n\n        - COMMIT shall be blocked until PUSH is executed.\n        - PATCH shall be blocked until PUSH is executed.\n        - EVICT shall be blocked until PUSH is executed.\n        \"\"\"\n        self.update_pusher.disabled = False\n        self.data_committer.disabled = True\n        self.selection_patcher.disabled = True\n        self.selection_evictor.disabled = True\n        self.df_deduplicate()\n\n    def push_base_callback():\n\"\"\"\n        PUSH enforces df consistency with all linked explorers.\n        No change to dataset rows.\n        Changes explorers.\n\n        - DEDUP could be blocked because it stays trivial until COMMIT is executed.\n        \"\"\"\n        self.data_committer.disabled = False\n        self.dedup_trigger.disabled = True\n        # empty the selection table, then allow PATCH and EVICT\n        self.sel_table.source.data = dict()\n        self.sel_table.source.selected.indices = []\n        self.selection_patcher.disabled = False\n        self.selection_evictor.disabled = False\n\n    self.update_pusher.on_click(push_base_callback)\n    self.data_committer.on_click(commit_base_callback)\n    self.dedup_trigger.on_click(dedup_base_callback)\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.subscribe_data_commit","title":"<code>subscribe_data_commit(self, explorer, subset_mapping)</code>","text":"Enable committing data across subsets, specified by a selection in an explorer and a dropdown widget of the dataset. Param Type Description <code>explorer</code> <code>BokehBaseExplorer</code> the explorer to register <code>subset_mapping</code> <code>dict</code> <code>dataset</code> -&gt; <code>explorer</code> subset mapping Source code in <code>hover/core/dataset.py</code> <pre><code>def subscribe_data_commit(self, explorer, subset_mapping):\n\"\"\"\n    ???+ note \"Enable committing data across subsets, specified by a selection in an explorer and a dropdown widget of the dataset.\"\n        | Param            | Type   | Description                            |\n        | :--------------- | :----- | :------------------------------------- |\n        | `explorer`       | `BokehBaseExplorer` | the explorer to register  |\n        | `subset_mapping` | `dict` | `dataset` -&gt; `explorer` subset mapping |\n    \"\"\"\n\n    explorer.link_dataset(self)\n\n    def callback_commit(event):\n        for sub_k, sub_v in subset_mapping.items():\n            sub_to = event.item\n            selected_idx = explorer.sources[sub_v].selected.indices\n            if not selected_idx:\n                self._warn(\n                    f\"Attempting data commit: did not select any data points in subset {sub_v}.\"\n                )\n                return\n\n            sel_slice = self.dfs[sub_k].iloc[selected_idx]\n            valid_slice = sel_slice[\n                sel_slice[\"label\"] != module_config.ABSTAIN_DECODED\n            ]\n\n            # concat to the end and do some accounting\n            size_before = self.dfs[sub_to].shape[0]\n            self.dfs[sub_to] = pd.concat(\n                [self.dfs[sub_to], valid_slice],\n                axis=0,\n                sort=False,\n                ignore_index=True,\n            )\n            size_mid = self.dfs[sub_to].shape[0]\n            self.dfs[sub_to].drop_duplicates(\n                subset=[self.__class__.FEATURE_KEY], keep=\"last\", inplace=True\n            )\n            size_after = self.dfs[sub_to].shape[0]\n\n            self._info(\n                f\"Committed {valid_slice.shape[0]} (valid out of {sel_slice.shape[0]} selected) entries from {sub_k} to {sub_to} ({size_before} -&gt; {size_after} with {size_mid-size_after} overwrites).\"\n            )\n        # chain another callback\n        self._callback_update_population()\n\n    self.data_committer.on_click(callback_commit)\n    self._good(\n        f\"Subscribed {explorer.__class__.__name__} to dataset commits: {subset_mapping}\"\n    )\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.subscribe_selection_view","title":"<code>subscribe_selection_view(self, explorer, subsets)</code>","text":"Enable viewing groups of data entries, specified by a selection in an explorer. Param Type Description <code>explorer</code> <code>BokehBaseExplorer</code> the explorer to register <code>subsets</code> <code>list</code> subset selections to consider Source code in <code>hover/core/dataset.py</code> <pre><code>def subscribe_selection_view(self, explorer, subsets):\n\"\"\"\n    ???+ note \"Enable viewing groups of data entries, specified by a selection in an explorer.\"\n        | Param            | Type   | Description                            |\n        | :--------------- | :----- | :------------------------------------- |\n        | `explorer`       | `BokehBaseExplorer` | the explorer to register  |\n        | `subsets`        | `list` | subset selections to consider          |\n    \"\"\"\n    assert (\n        isinstance(subsets, list) and len(subsets) &gt; 0\n    ), \"Expected a non-empty list of subsets\"\n\n    explorer.link_dataset(self)\n\n    def callback_view():\n        sel_slices = []\n        for subset in subsets:\n            selected_idx = sorted(explorer.sources[subset].selected.indices)\n            sub_slice = explorer.dfs[subset].iloc[selected_idx]\n            sel_slices.append(sub_slice)\n\n        selected = pd.concat(sel_slices, axis=0)\n        self._callback_update_selection(selected)\n\n    def callback_view_refresh():\n        if 0 in self.selection_table_refresh_box.active:\n            callback_view()\n\n    def callback_evict():\n        # create sets for fast index discarding\n        subset_to_indicies = {}\n        for subset in subsets:\n            indicies = set(explorer.sources[subset].selected.indices)\n            subset_to_indicies[subset] = indicies\n\n        # from datatable index, get feature values to look up dataframe index\n        sel_source = self.sel_table.source\n        raw_indicies = sel_source.selected.indices\n        for i in raw_indicies:\n            feature_value = sel_source.data[self.__class__.FEATURE_KEY][i]\n            subset, idx = self.locate_by_feature_value(feature_value)\n            subset_to_indicies[subset].discard(idx)\n\n        # assign indices back to change actual selection\n        for subset in subsets:\n            indicies = sorted(list(subset_to_indicies[subset]))\n            explorer.sources[subset].selected.indices = indicies\n\n        self._good(\n            f\"Selection table: evicted {len(raw_indicies)} points from selection.\"\n        )\n        # refresh the selection table\n        callback_view()\n\n    explorer._register_selection_callback(\"read\", callback_view_refresh)\n    self.selection_viewer.on_click(callback_view)\n    self.selection_evictor.on_click(callback_evict)\n    self._good(\n        f\"Subscribed {explorer.__class__.__name__} to selection table: {subsets}\"\n    )\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.subscribe_update_push","title":"<code>subscribe_update_push(self, explorer, subset_mapping)</code>","text":"Enable pushing updated DataFrames to explorers that depend on them. Param Type Description <code>explorer</code> <code>BokehBaseExplorer</code> the explorer to register <code>subset_mapping</code> <code>dict</code> <code>dataset</code> -&gt; <code>explorer</code> subset mapping <p>Note: the reason we need this is due to <code>self.dfs[key] = ...</code>-like assignments. If DF operations were all in-place, then the explorers could directly access the updates through their <code>self.dfs</code> references.</p> Source code in <code>hover/core/dataset.py</code> <pre><code>def subscribe_update_push(self, explorer, subset_mapping):\n\"\"\"\n    ???+ note \"Enable pushing updated DataFrames to explorers that depend on them.\"\n        | Param            | Type   | Description                            |\n        | :--------------- | :----- | :------------------------------------- |\n        | `explorer`       | `BokehBaseExplorer` | the explorer to register  |\n        | `subset_mapping` | `dict` | `dataset` -&gt; `explorer` subset mapping |\n\n        Note: the reason we need this is due to `self.dfs[key] = ...`-like assignments. If DF operations were all in-place, then the explorers could directly access the updates through their `self.dfs` references.\n    \"\"\"\n\n    explorer.link_dataset(self)\n\n    def callback_push():\n        df_dict = {_v: self.dfs[_k] for _k, _v in subset_mapping.items()}\n        explorer._setup_dfs(df_dict)\n        explorer._update_sources()\n\n    self.update_pusher.on_click(callback_push)\n    self._good(\n        f\"Subscribed {explorer.__class__.__name__} to dataset pushes: {subset_mapping}\"\n    )\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.to_pandas","title":"<code>to_pandas(self)</code>","text":"Export to a pandas DataFrame. Source code in <code>hover/core/dataset.py</code> <pre><code>def to_pandas(self):\n\"\"\"\n    ???+ note \"Export to a pandas DataFrame.\"\n    \"\"\"\n    dfs = []\n    for _subset in [\"raw\", \"train\", \"dev\", \"test\"]:\n        _df = self.dfs[_subset].copy()\n        _df[DATASET_SUBSET_FIELD] = _subset\n        dfs.append(_df)\n\n    return pd.concat(dfs, axis=0)\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.validate_labels","title":"<code>validate_labels(self, raise_exception=True)</code>","text":"Assert that every label is in the encoder. Param Type Description <code>raise_exception</code> <code>bool</code> whether to raise errors when failed Source code in <code>hover/core/dataset.py</code> <pre><code>def validate_labels(self, raise_exception=True):\n\"\"\"\n    ???+ note \"Assert that every label is in the encoder.\"\n\n        | Param             | Type   | Description                         |\n        | :---------------- | :----- | :---------------------------------- |\n        | `raise_exception` | `bool` | whether to raise errors when failed |\n    \"\"\"\n    for _key in [*self.__class__.PUBLIC_SUBSETS, *self.__class__.PRIVATE_SUBSETS]:\n        _invalid_indices = None\n        assert \"label\" in self.dfs[_key].columns\n        _mask = self.dfs[_key][\"label\"].apply(\n            lambda x: int(x in self.label_encoder)\n        )\n        # DO NOT change the \"==\" to \"is\"; False in pandas is not False below\n        _invalid_indices = np.where(_mask == 0)[0].tolist()\n        if _invalid_indices:\n            self._fail(f\"Subset {_key} has invalid labels:\")\n            self._print(self.dfs[_key].loc[_invalid_indices])\n            if raise_exception:\n                raise ValueError(\"invalid labels\")\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.view","title":"<code>view(self)</code>","text":"Defines the layout of <code>bokeh</code> objects when visualized. Source code in <code>hover/core/dataset.py</code> <pre><code>def view(self):\n\"\"\"\n    ???+ note \"Defines the layout of `bokeh` objects when visualized.\"\n    \"\"\"\n    # local import to avoid naming confusion/conflicts\n    from bokeh.layouts import row, column\n\n    return column(\n        self.help_div,\n        # population table and directly associated widgets\n        row(\n            self.update_pusher,\n            self.data_committer,\n            self.dedup_trigger,\n            self.file_exporter,\n        ),\n        self.pop_table,\n        # selection table and directly associated widgets\n        row(\n            self.selection_viewer,\n            self.selection_patcher,\n            self.selection_evictor,\n        ),\n        row(\n            self.selection_table_refresh_box,\n        ),\n        self.sel_table,\n    )\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableImageDataset","title":"<code> SupervisableImageDataset            (SupervisableDataset)         </code>","text":"<code>SupervisableDataset</code> whose primary feature is <code>image</code>. Source code in <code>hover/core/dataset.py</code> <pre><code>class SupervisableImageDataset(SupervisableDataset):\n\"\"\"\n    ???+ note \"`SupervisableDataset` whose primary feature is `image`.\"\n    \"\"\"\n\n    FEATURE_KEY = \"image\"\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableTextDataset","title":"<code> SupervisableTextDataset            (SupervisableDataset)         </code>","text":"<code>SupervisableDataset</code> whose primary feature is <code>text</code>. Source code in <code>hover/core/dataset.py</code> <pre><code>class SupervisableTextDataset(SupervisableDataset):\n\"\"\"\n    ???+ note \"`SupervisableDataset` whose primary feature is `text`.\"\n    \"\"\"\n\n    FEATURE_KEY = \"text\"\n</code></pre>"},{"location":"pages/reference/core-dataset/#hover.core.dataset","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableAudioDataset","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.__init__","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.compute_2d_embedding","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.compute_feature_index","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.compute_nd_embedding","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.copy","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.df_deduplicate","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.from_pandas","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.loader","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.locate_by_feature_value","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_dfs","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_label_coding","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_pop_table","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_sel_table","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.setup_widgets","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.subscribe_data_commit","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.subscribe_selection_view","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.subscribe_update_push","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.to_pandas","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.validate_labels","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableDataset.view","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableImageDataset","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-dataset/#hover.core.dataset.SupervisableTextDataset","title":"hover.core.dataset","text":""},{"location":"pages/reference/core-explorer-base/","title":".base","text":"<ul> <li> Base class(es) for ALL explorer implementations. </li> </ul>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer","title":"<code> BokehBaseExplorer            (Loggable, ABC)         </code>","text":"Base class for visually exploring data with <code>Bokeh</code>. <p>Assumes:</p> <ul> <li>in supplied dataframes</li> <li>(always) xy coordinates in <code>x</code> and <code>y</code> columns;</li> <li>(always) an index for the rows;</li> <li>(always) classification label (or ABSTAIN) in a <code>label</code> column.</li> </ul> <p>Does not assume:</p> <ul> <li>a specific form of data;</li> <li>what the map serves to do.</li> </ul> Source code in <code>hover/core/explorer/base.py</code> <pre><code>class BokehBaseExplorer(Loggable, ABC, metaclass=RichTracebackABCMeta):\n\"\"\"\n    ???+ note \"Base class for visually exploring data with `Bokeh`.\"\n        Assumes:\n\n        - in supplied dataframes\n          - (always) xy coordinates in `x` and `y` columns;\n          - (always) an index for the rows;\n          - (always) classification label (or ABSTAIN) in a `label` column.\n\n        Does not assume:\n\n        - a specific form of data;\n        - what the map serves to do.\n    \"\"\"\n\n    SUBSET_GLYPH_KWARGS = {}\n    DEFAULT_SUBSET_MAPPING = {_k: _k for _k in [\"raw\", \"train\", \"dev\", \"test\"]}\n    SELECTION_PROCESSING_STAGES = [\"save\", \"load\", \"write\", \"read\"]\n\n    PRIMARY_FEATURE = None\n    MANDATORY_COLUMNS = [\"label\"]\n    TOOLTIP_KWARGS = {\n        \"label\": {\"label\": \"Label\"},\n        \"coords\": True,\n        \"index\": True,\n    }\n\n    def __init__(self, df_dict, **kwargs):\n\"\"\"\n        ???+ note \"Constructor shared by all child classes.\"\n            | Param       | Type   | Description                  |\n            | :---------- | :----- | :--------------------------- |\n            | `df_dict`   | `dict` | `str` -&gt; `DataFrame` mapping |\n            | `**kwargs`  |        | forwarded to `bokeh.plotting.figure` |\n\n            1. settle the figure settings by using child class defaults &amp; kwargs overrides\n            2. settle the glyph settings by using child class defaults\n            3. set up dataframes to sync with\n            4. create widgets that child classes can override\n            5. create data sources the correspond to class-specific data subsets.\n            6. initialize a figure under the settings above\n        \"\"\"\n        self.figure_kwargs = {\n            \"tools\": STANDARD_PLOT_TOOLS,\n            \"tooltips\": self._build_tooltip(kwargs.pop(\"tooltips\", \"\")),\n            # bokeh recommends webgl for scalability\n            \"output_backend\": \"webgl\",\n        }\n        self.figure_kwargs.update(kwargs)\n        self.figure = figure(**self.figure_kwargs)\n        self.glyph_kwargs = {\n            _key: _dict[\"constant\"].copy()\n            for _key, _dict in self.__class__.SUBSET_GLYPH_KWARGS.items()\n        }\n        self._setup_dfs(df_dict)\n        self._setup_sources()\n        self._setup_widgets()\n        self._setup_status_flags()\n\n    @classmethod\n    def from_dataset(cls, dataset, subset_mapping, *args, **kwargs):\n\"\"\"\n        ???+ note \"Alternative constructor from a `SupervisableDataset`.\"\n            | Param            | Type   | Description                  |\n            | :--------------- | :----- | :--------------------------- |\n            | `dataset`        | `SupervisableDataset` | dataset with `DataFrame`s |\n            | `subset_mapping` | `dict` | `dataset` -&gt; `explorer` subset mapping |\n            | `*args`          |        | forwarded to the constructor |\n            | `**kwargs`       |        | forwarded to the constructor |\n        \"\"\"\n        # local import to avoid import cycles\n        from hover.core.dataset import SupervisableDataset\n\n        assert isinstance(dataset, SupervisableDataset)\n        df_dict = {_v: dataset.dfs[_k] for _k, _v in subset_mapping.items()}\n        explorer = cls(df_dict, *args, **kwargs)\n        explorer.link_dataset(dataset)\n        return explorer\n\n    def link_dataset(self, dataset):\n\"\"\"\n        ???+ note \"Get tied to a dataset, which is common for explorers.\"\n        \"\"\"\n        if not hasattr(self, \"linked_dataset\"):\n            self.linked_dataset = dataset\n        else:\n            assert self.linked_dataset is dataset, \"cannot link to two datasets\"\n\n    def view(self):\n\"\"\"\n        ???+ note \"Define the high-level visual layout of the whole explorer.\"\n        \"\"\"\n        from bokeh.layouts import column\n\n        return column(self._layout_widgets(), self.figure)\n\n    def _build_tooltip(self, specified):\n\"\"\"\n        ???+ note \"Define a windowed tooltip which shows inspection details.\"\n            | Param            | Type   | Description                  |\n            | :--------------- | :----- | :--------------------------- |\n            | `specified`      | `str`  | user-specified HTML          |\n\n            Note that this is a method rather than a class attribute because\n            child classes may involve instance attributes in the tooltip.\n        \"\"\"\n        if not specified:\n            return bokeh_hover_tooltip(**self.__class__.TOOLTIP_KWARGS)\n        return specified\n\n    def _setup_widgets(self):\n\"\"\"\n        ???+ note \"High-level function creating widgets for interactive functionality.\"\n        \"\"\"\n        self._info(\"Setting up widgets\")\n        self._dynamic_widgets = OrderedDict()\n        self._dynamic_callbacks = OrderedDict()\n        self._dynamic_resources = OrderedDict()\n        self._setup_search_widgets()\n        self._setup_selection_option()\n        self._setup_subset_toggle()\n        self._setup_axes_dropdown()\n\n    @abstractmethod\n    def _layout_widgets(self):\n\"\"\"\n        ???+ note \"Define the low-level layout of widgets.\"\n\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def _setup_search_widgets(self):\n\"\"\"\n        ???+ note \"Define how to search data points.\"\n            Left to child classes that have a specific feature format.\n        \"\"\"\n        pass\n\n    def _setup_status_flags(self):\n\"\"\"\n        ???+ note \"Status flags to permit or forbid certain operations.\"\n        \"\"\"\n        self.status_flags = {\n            \"selecting\": False,\n            \"selection_syncing_out\": False,\n        }\n\n        def update_selecting_status(event):\n            self.status_flags[\"selecting\"] = not event.final\n\n        self.figure.on_event(SelectionGeometry, update_selecting_status)\n\n    def _setup_selection_option(self):\n\"\"\"\n        ???+ note \"Create a group of checkbox(es) for advanced selection options.\"\n        \"\"\"\n        from bokeh.models import RadioGroup\n\n        self.selection_option_box = RadioGroup(\n            labels=[\"keep selecting: none\", \"union\", \"intersection\", \"difference\"],\n            active=0,\n        )\n\n    def _setup_subset_toggle(self):\n\"\"\"\n        ???+ note \"Create a group of buttons for toggling which data subsets to show.\"\n        \"\"\"\n        from bokeh.models import CheckboxButtonGroup, Div\n        from bokeh.layouts import column\n\n        data_keys = list(self.__class__.SUBSET_GLYPH_KWARGS.keys())\n        self.data_key_button_group = CheckboxButtonGroup(\n            labels=data_keys, active=list(range(len(data_keys)))\n        )\n        self.data_key_button_group_help = Div(text=\"Toggle data subset display\")\n        self.subset_toggle_widget_column = column(\n            self.data_key_button_group_help, self.data_key_button_group\n        )\n\n        def update_data_key_display():\n            subsets = self.data_key_button_group.active\n            visible_keys = {self.data_key_button_group.labels[idx] for idx in subsets}\n            for _renderer in self.figure.renderers:\n                # if the renderer has a name \"on the list\", update its visibility\n                if _renderer.name in self.__class__.SUBSET_GLYPH_KWARGS.keys():\n                    _renderer.visible = _renderer.name in visible_keys\n\n        # store the callback (useful, for example, during automated tests) and link it\n        self._callback_subset_display = update_data_key_display\n        self.data_key_button_group.on_change(\n            \"active\", lambda attr, old, new: update_data_key_display()\n        )\n\n    def _setup_axes_dropdown(self):\n\"\"\"\n        ???+ note \"Find embedding fields and allow any of them to be set as the x or y axis.\"\n        \"\"\"\n        from bokeh.models import Dropdown\n\n        embed_cols = self.find_embedding_fields()\n        init_x, init_y = embed_cols[:2]\n        self.dropdown_x_axis = Dropdown(label=f\"X coord: {init_x}\", menu=embed_cols)\n        self.dropdown_y_axis = Dropdown(label=f\"Y coord: {init_y}\", menu=embed_cols)\n\n        def change_x(event):\n            self.dropdown_x_axis.label = f\"X coord: {event.item}\"\n            for _renderer in self.figure.renderers:\n                _renderer.glyph.x = event.item\n\n        def change_y(event):\n            self.dropdown_y_axis.label = f\"Y coord: {event.item}\"\n            for _renderer in self.figure.renderers:\n                _renderer.glyph.y = event.item\n\n        self.dropdown_x_axis.on_click(change_x)\n        self.dropdown_y_axis.on_click(change_y)\n\n        # consider allowing dynamic menu refreshment\n        # def refresh_axes_list():\n        #    embed_cols = self.find_embedding_fields()\n        #    self.dropdown_x_axis.menu = embed_cols[:]\n        #    self.dropdown_y_axis.menu = embed_cols[:]\n\n    def value_patch_by_slider(self, col_original, col_patch, **kwargs):\n\"\"\"\n        ???+ note \"Allow source values to be dynamically patched through a slider.\"\n            | Param            | Type   | Description                  |\n            | :--------------- | :----- | :--------------------------- |\n            | `col_original`   | `str`  | column of values before the patch |\n            | `col_patch`      | `str`  | column of list of values to use as patches |\n            | `**kwargs`       |        | forwarded to the slider |\n\n            [Reference](https://github.com/bokeh/bokeh/blob/2.4.2/examples/howto/patch_app.py)\n        \"\"\"\n        # add a patch slider to widgets, if none exist\n        if \"patch_slider\" not in self._dynamic_widgets:\n            slider = Slider(start=0, end=1, value=0, step=1, **kwargs)\n            slider.disabled = True\n            self._dynamic_widgets[\"patch_slider\"] = slider\n        else:\n            slider = self._dynamic_widgets[\"patch_slider\"]\n\n        # create a slider-adjusting callback exposed to the outside\n        def adjust_slider():\n\"\"\"\n            Infer slider length from the number of patch values.\n            \"\"\"\n            num_patches = None\n            for _key, _df in self.dfs.items():\n                assert (\n                    col_patch in _df.columns\n                ), f\"Subset {_key} expecting column {col_patch} among columns, got {_df.columns}\"\n                # find all array lengths; note that the data subset can be empty\n                _num_patches_seen = _df[col_patch].apply(len).values\n                assert (\n                    len(set(_num_patches_seen)) &lt;= 1\n                ), f\"Expecting consistent number of patches, got {_num_patches_seen}\"\n                _num_patches = _num_patches_seen[0] if _df.shape[0] &gt; 0 else None\n\n                # if a previous subset has implied the number of patches, run a consistency check\n                if num_patches is None:\n                    num_patches = _num_patches\n                else:\n                    assert (\n                        num_patches == _num_patches\n                    ), f\"Conflicting number of patches: {num_patches} vs {_num_patches}\"\n\n            assert num_patches &gt;= 2, f\"Expecting at least 2 patches, got {num_patches}\"\n            slider.end = num_patches - 1\n            slider.disabled = False\n\n        self._dynamic_callbacks[\"adjust_patch_slider\"] = adjust_slider\n\n        # create the callback for patching values\n        def update_patch(attr, old, new):\n            for _key, _df in self.dfs.items():\n                # calculate the patch corresponding to slider value\n                _value = [_arr[new] for _arr in _df[col_patch].values]\n                _slice = slice(_df.shape[0])\n                _patch = {col_original: [(_slice, _value)]}\n                self.sources[_key].patch(_patch)\n\n        slider.on_change(\"value\", update_patch)\n        self._good(f\"Patching {col_original} using {col_patch}\")\n\n    def _mandatory_column_defaults(self):\n\"\"\"\n        ???+ note \"Mandatory columns and default values.\"\n\n            If default value is None, will raise exception if the column is not found.\n        \"\"\"\n        return {_col: None for _col in self.__class__.MANDATORY_COLUMNS}\n\n    def _setup_dfs(self, df_dict, copy=False):\n\"\"\"\n        ???+ note \"Check and store DataFrames **by reference by default**.\"\n            Intended to be extended in child classes for pre/post processing.\n\n            | Param       | Type   | Description                  |\n            | :---------- | :----- | :--------------------------- |\n            | `df_dict`   | `dict` | `str` -&gt; `DataFrame` mapping |\n            | `copy`      | `bool` | whether to copy `DataFrame`s |\n        \"\"\"\n        self._info(\"Setting up DataFrames\")\n        supplied_keys = set(df_dict.keys())\n        expected_keys = set(self.__class__.SUBSET_GLYPH_KWARGS.keys())\n\n        # perform high-level df key checks\n        expected_and_supplied = supplied_keys.intersection(expected_keys)\n        supplied_not_expected = supplied_keys.difference(expected_keys)\n        expected_not_supplied = expected_keys.difference(supplied_keys)\n\n        for _key in supplied_not_expected:\n            self._warn(\n                f\"{self.__class__.__name__}.__init__(): got unexpected df key {_key}\"\n            )\n        for _key in expected_not_supplied:\n            self._warn(\n                f\"{self.__class__.__name__}.__init__(): missing expected df key {_key}\"\n            )\n\n        # assign df with column checks\n        self.dfs = dict()\n        mandatory_col_to_default = self._mandatory_column_defaults()\n        for _key in expected_and_supplied:\n            _df = df_dict[_key]\n            for _col, _default in mandatory_col_to_default.items():\n                # column exists: all good\n                if _col in _df.columns:\n                    continue\n                # no default value: column must be explicitly provided\n                if _default is None:\n                    # edge case: DataFrame has zero rows\n                    _msg = f\"Expecting column '{_col}' from {_key} df: found {list(_df.columns)}\"\n                    assert _df.shape[0] == 0, _msg\n                # default value available, will use it to create column\n                else:\n                    _df[_col] = _default\n            self.dfs[_key] = _df.copy() if copy else _df\n\n        # expected dfs must be present\n        for _key in expected_not_supplied:\n            _df = pd.DataFrame(columns=list(mandatory_col_to_default.keys()))\n            self.dfs[_key] = _df\n\n    def _setup_sources(self):\n\"\"\"\n        ???+ note \"Create, **(not update)**, `ColumnDataSource` objects.\"\n            Intended to be extended in child classes for pre/post processing.\n        \"\"\"\n        self._info(\"Setting up sources\")\n        self.sources = {_key: ColumnDataSource(_df) for _key, _df in self.dfs.items()}\n        self._postprocess_sources()\n\n        # initialize attributes that couple with sources\n        # extra columns for dynamic plotting\n        self._extra_source_cols = defaultdict(dict)\n\n        self._setup_selection_tools()\n\n    def _setup_subroutine_selection_callback_queue(self):\n\"\"\"\n        ???+ note \"For dynamically assigned callbacks triggered by making a selection on the figure.\"\n        \"\"\"\n        all_stages = self.__class__.SELECTION_PROCESSING_STAGES\n        stage_to_order = {_stage: _i for _i, _stage in enumerate(all_stages)}\n\n        self._selection_callbacks = {_k: RootUnionFind(set()) for _k in all_stages}\n\n        def stages_callback(*stages):\n            prev_order = -1\n            for _stage in stages:\n                _order = stage_to_order[_stage]\n                assert _order &gt; prev_order, f\"Misordered stage sequence {stages}\"\n                for _callback in self._selection_callbacks[_stage].data:\n                    _callback()\n\n        self._selection_stages_callback = stages_callback\n\n        self.figure.on_event(\n            SelectionGeometry,\n            lambda event: stages_callback(*all_stages) if event.final else None,\n        )\n\n        def register_selection_callback(stage, callback):\n            assert (\n                stage in all_stages\n            ), f\"Invalid stage: {stage}, expected one of {all_stages}\"\n            self._selection_callbacks[stage].data.add(callback)\n\n        self._register_selection_callback = register_selection_callback\n\n    def _setup_subroutine_selection_store(self):\n\"\"\"\n        ???+ note \"Subroutine of `_setup_selection_tools`.\"\n            Setup callbacks that interact with manual selections.\n        \"\"\"\n\n        def store_selection():\n\"\"\"\n            Keep track of the last manual selection.\n            Useful for applying cumulation / filters dynamically.\n            \"\"\"\n            # determine selection mode\n            selection_option_code = self.selection_option_box.active\n\n            for _key, _source in self.sources.items():\n                _selected = _source.selected.indices\n                # use sets' in-place methods instead of assignment\n                if selection_option_code == 1:\n                    self._last_selections[_key].data.update(_selected)\n                elif selection_option_code == 2:\n                    self._last_selections[_key].data.intersection_update(_selected)\n                elif selection_option_code == 3:\n                    self._last_selections[_key].data.difference_update(_selected)\n                else:\n                    assert selection_option_code == 0\n                    self._last_selections[_key].data.clear()\n                    self._last_selections[_key].data.update(_selected)\n                _source.selected.indices = list(self._last_selections[_key].data)\n\n        def restore_selection():\n\"\"\"\n            Set current selection to the last manual selection.\n            Useful for applying cumulation / filters dynamically.\n            \"\"\"\n            for _key, _source in self.sources.items():\n                _source.selected.indices = list(self._last_selections[_key].data)\n\n        self._store_selection = store_selection\n        self._register_selection_callback(\"save\", store_selection)\n        self._register_selection_callback(\"load\", restore_selection)\n\n    def _setup_subroutine_selection_filter(self):\n\"\"\"\n        ???+ note \"Subroutine of `_setup_selection_tools`.\"\n            Setup callbacks that interact with selection filters.\n        \"\"\"\n\n        def trigger_selection_filters(subsets=None):\n\"\"\"\n            Filter selection indices on specified subsets.\n            \"\"\"\n            if subsets is None:\n                subsets = self.sources.keys()\n            else:\n                assert set(subsets).issubset(\n                    self.sources.keys()\n                ), f\"Expected subsets from {self.sources.keys()}\"\n\n            for _key in subsets:\n                _selected = set(self.sources[_key].selected.indices[:])\n                for _func in self._selection_filters[_key].data:\n                    _selected = _func(_selected, _key)\n                self.sources[_key].selected.indices = sorted(_selected)\n\n        self._register_selection_callback(\"write\", trigger_selection_filters)\n\n    def _setup_subroutine_selection_reset(self):\n\"\"\"\n        ???+ note \"Subroutine of `_setup_selection_tools`.\"\n            Setup callbacks for scenarios where the selection should be reset.\n            For example, when the plot sources have changed.\n        \"\"\"\n\n        def reset_selection():\n\"\"\"\n            Clear last manual selections and source selections.\n            Useful during post-processing of refreshed data source.\n            Not directly defined as a method because of `self._last_selections`.\n            \"\"\"\n            for _key, _source in self.sources.items():\n                self._last_selections[_key].data.clear()\n                _source.selected.indices = []\n\n        self._reset_selection = reset_selection\n\n    def _setup_selection_tools(self):\n\"\"\"\n        ???+ note \"Create data structures and callbacks for dynamic selections.\"\n            Useful for linking and filtering selections across explorers.\n        \"\"\"\n        # store the last manual selections\n        self._last_selections = {\n            _key: RootUnionFind(set()) for _key in self.sources.keys()\n        }\n        # store commutative, idempotent index filters\n        self._selection_filters = {\n            _key: RootUnionFind(set()) for _key in self.sources.keys()\n        }\n\n        self._setup_subroutine_selection_callback_queue()\n        self._setup_subroutine_selection_store()\n        self._setup_subroutine_selection_filter()\n        self._setup_subroutine_selection_reset()\n\n    def _update_sources(self):\n\"\"\"\n        ???+ note \"Update the sources with the corresponding dfs.\"\n            Note that the shapes and fields of sources are overriden.\n            Thus supplementary fields (those that do not exist in the dfs),\n            such as dynamic plotting kwargs, need to be re-assigned.\n        \"\"\"\n        for _key in self.dfs.keys():\n            self.sources[_key].data = self.dfs[_key]\n        self._postprocess_sources()\n\n        # reset selections now that source indices may have changed\n        self._reset_selection()\n\n        # reset attribute values that couple with sources\n        for _key in self.sources.keys():\n            _num_points = len(self.sources[_key].data[\"label\"])\n            # add extra columns\n            for _col, _fill_value in self._extra_source_cols[_key].items():\n                self.sources[_key].add([_fill_value] * _num_points, _col)\n\n            # clear last selection but keep the set object\n            self._last_selections[_key].data.clear()\n            # DON'T DO: self._last_selections = {_key: set() for _key in self.sources.keys()}\n\n    def _postprocess_sources(self):\n\"\"\"\n        ???+ note \"Infer source attributes from the dfs, without altering the dfs.\"\n            Useful for assigning dynamic glyph attributes, similarly to `activate_search()`.\n        \"\"\"\n        pass\n\n    def activate_search(self):\n\"\"\"\n        ???+ note \"Assign search response callbacks to search results. Child methods should bind those callbacks to search widgets.\"\n\n            This is a parent method which takes care of common denominators of parent methods.\n\n            Child methods may inherit the logic here and preprocess/postprocess as needed.\n        \"\"\"\n        self._subroutine_search_create_callbacks()\n        self._subroutine_search_activate_callbacks()\n\n    def _subroutine_search_create_callbacks(self):\n\"\"\"\n        ???+ note \"Create search callback functions based on feature attributes.\"\n        \"\"\"\n        # allow dynamically updated search response through dict element retrieval\n        self._dynamic_callbacks[\"search_response\"] = dict()\n\n        def search_base_response(attr, old, new):\n            for _subset in self.sources.keys():\n                _func = self._dynamic_callbacks[\"search_response\"].get(_subset, blank)\n                _func(attr, old, new)\n            return\n\n        self.search_base_response = search_base_response\n\n        for _key, _dict in self.__class__.SUBSET_GLYPH_KWARGS.items():\n            # create a field that holds search results that could be used elsewhere\n            _num_points = len(self.sources[_key].data[self.__class__.PRIMARY_FEATURE])\n            self._extra_source_cols[_key][SEARCH_SCORE_FIELD] = 0\n            self.sources[_key].add([0] * _num_points, SEARCH_SCORE_FIELD)\n\n            # make attributes respond to search\n            for _, _params in _dict[\"search\"].items():\n                _updated_kwargs = self._subroutine_search_source_change(\n                    _key,\n                    self.glyph_kwargs[_key],\n                    altered_param=_params,\n                )\n                self.glyph_kwargs[_key].clear()\n                self.glyph_kwargs[_key].update(_updated_kwargs)\n\n    def _subroutine_search_activate_callbacks(self):\n\"\"\"\n        ???+ note \"Activate search callback functions by binding them to widgets.\"\n        \"\"\"\n        for _widget in self._search_watch_widgets():\n            _widget.on_change(\"value\", self.search_base_response)\n            self._info(f\"activated search base response on {_widget}\")\n\n    @abstractmethod\n    def _search_watch_widgets(self):\n\"\"\"\n        ???+ note \"Widgets to trigger search callbacks automatically, which can be different across subclasses.\"\n\n            Intended for binding callback functions to widgets.\n        \"\"\"\n\n    @abstractmethod\n    def _validate_search_input(self):\n\"\"\"\n        ???+ note \"Check the search input, skipping callbacks if it's invalid.\"\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def _get_search_score_function(self):\n\"\"\"\n        ???+ note \"Dynamically create a single-argument scoring function.\"\n        \"\"\"\n        pass\n\n    def _subroutine_search_source_change(\n        self, subset, kwargs, altered_param=(\"size\", 10, 5, 7)\n    ):\n\"\"\"\n        ???+ note \"Subroutine of `activate_search()` on a specific subset.\"\n            Modifies the plotting source in-place.\n\n            | Param           | Type    | Description                   |\n            | :-------------- | :------ | :---------------------------  |\n            | `subset`        | `str`   | the subset to activate search on |\n            | `kwargs`        | `bool`  | kwargs for the plot to add to |\n            | `altered_param` | `tuple` | (attribute, positive, negative, default) |\n        \"\"\"\n        assert isinstance(kwargs, dict)\n        updated_kwargs = kwargs.copy()\n\n        feature_key = self.__class__.PRIMARY_FEATURE\n        param_key, param_pos, param_neg, param_default = altered_param\n        initial_num = len(self.sources[subset].data[feature_key])\n        self.sources[subset].add([param_default] * initial_num, param_key)\n        self._extra_source_cols[subset][param_key] = param_default\n\n        updated_kwargs[param_key] = param_key\n\n        def score_to_param(score):\n            if score &gt; 0:\n                return param_pos\n            elif score == 0:\n                return param_default\n            else:\n                return param_neg\n\n        def search_response(attr, old, new):\n            valid_flag = self._validate_search_input()\n            if not valid_flag:\n                return\n            score_func = self._get_search_score_function()\n\n            patch_slice = slice(len(self.sources[subset].data[feature_key]))\n            features = self.sources[subset].data[self.__class__.PRIMARY_FEATURE]\n            # score_func is potentially slow; track its progress\n            # search_scores = list(map(score_func, tqdm(features, desc=\"Search score\")))\n            search_scores = list(map(score_func, features))\n            search_params = list(map(score_to_param, search_scores))\n            self.sources[subset].patch(\n                {SEARCH_SCORE_FIELD: [(patch_slice, search_scores)]}\n            )\n            self.sources[subset].patch({param_key: [(patch_slice, search_params)]})\n            return\n\n        # assign dynamic callback\n        self._dynamic_callbacks[\"search_response\"][subset] = search_response\n        return updated_kwargs\n\n    def _prelink_check(self, other):\n\"\"\"\n        ???+ note \"Sanity check before linking two explorers.\"\n            | Param   | Type    | Description                    |\n            | :------ | :------ | :----------------------------- |\n            | `other` | `BokehBaseExplorer` | the other explorer |\n        \"\"\"\n        assert other is not self, \"Self-loops are fordidden\"\n        assert isinstance(other, BokehBaseExplorer), \"Must link to BokehBaseExplorer\"\n\n    def link_selection(self, other, subset_mapping):\n\"\"\"\n        ???+ note \"Synchronize the selection mechanism between sources.\"\n\n            This includes:\n            -   the selected indices between subsets\n            -   callbacks associated with selections\n            -   selection option values in the widgets\n\n            | Param   | Type    | Description                    |\n            | :------ | :------ | :----------------------------- |\n            | `other` | `BokehBaseExplorer` | the other explorer |\n            | `subset_mapping` | `dict` | mapping of subsets from `self` to `other` |\n        \"\"\"\n        self._prelink_check(other)\n        self._subroutine_link_selection_callbacks(other)\n        self._subroutine_link_selection_indices(other, subset_mapping)\n        self._subroutine_link_selection_options(other)\n\n    def _subroutine_link_selection_callbacks(self, other):\n\"\"\"\n        ???+ note \"Subroutine of `link_selection`.\"\n\n            Union the callbacks triggered by selection event.\n\n            | Param   | Type    | Description                    |\n            | :------ | :------ | :----------------------------- |\n            | `other` | `BokehBaseExplorer` | the other explorer |\n        \"\"\"\n        # link selection callbacks (pointing to the same set)\n        for _k in self.__class__.SELECTION_PROCESSING_STAGES:\n            self._selection_callbacks[_k].data.update(\n                other._selection_callbacks[_k].data\n            )\n            self._selection_callbacks[_k].union(other._selection_callbacks[_k])\n\n    def _subroutine_link_selection_indices(self, other, subset_mapping):\n\"\"\"\n        ???+ note \"Subroutine of `link_selection`.\"\n\n            Synchronize the manually selected indices and actually selected ones.\n\n            | Param   | Type    | Description                    |\n            | :------ | :------ | :----------------------------- |\n            | `other` | `BokehBaseExplorer` | the other explorer |\n            | `subset_mapping` | `dict` | mapping of subsets from `self` to `other` |\n        \"\"\"\n\n        def link_selected_indices(kl, kr):\n            sl, sr = self.sources[_kl], other.sources[_kr]\n\n            # acyclic, DFS-like syncs\n            def left_to_right(attr, old, new):\n                # \"acyclic\"\n                if other.status_flags[\"selection_syncing_out\"]:\n                    return\n\n                # \"DFS-like\"\n                if set(sr.selected.indices) ^ set(sl.selected.indices):\n                    self.status_flags[\"selection_syncing_out\"] = True\n                    sr.selected.indices = sl.selected.indices[:]\n                    self.status_flags[\"selection_syncing_out\"] = False\n\n            def right_to_left(attr, old, new):\n                # \"acyclic\"\n                if self.status_flags[\"selection_syncing_out\"]:\n                    return\n\n                # \"DFS-like\"\n                if set(sl.selected.indices) ^ set(sr.selected.indices):\n                    other.status_flags[\"selection_syncing_out\"] = True\n                    sl.selected.indices = sr.selected.indices[:]\n                    other.status_flags[\"selection_syncing_out\"] = False\n\n            sl.selected.on_change(\"indices\", left_to_right)\n            sr.selected.on_change(\"indices\", right_to_left)\n\n        for _kl, _kr in subset_mapping.items():\n            # link last manual selections (pointing to the same set)\n            self._last_selections[_kl].union(other._last_selections[_kr])\n\n            # link selected indices; these are used by bokeh, not UnionFind-able\n            link_selected_indices(self.sources[_kl], other.sources[_kr])\n\n    def _subroutine_link_selection_options(self, other):\n\"\"\"\n        ???+ note \"Subroutine of `link_selection`.\"\n\n            Synchronize the option widget values associated with selection.\n\n            | Param   | Type    | Description                    |\n            | :------ | :------ | :----------------------------- |\n            | `other` | `BokehBaseExplorer` | the other explorer |\n        \"\"\"\n        # link selection option values\n        def option_lr(attr, old, new):\n            other.selection_option_box.active = self.selection_option_box.active\n\n        def option_rl(attr, old, new):\n            self.selection_option_box.active = other.selection_option_box.active\n\n        self.selection_option_box.on_change(\"active\", option_lr)\n        other.selection_option_box.on_change(\"active\", option_rl)\n\n    def link_xy_range(self, other):\n\"\"\"\n        ???+ note \"Synchronize plotting ranges on the xy-plane.\"\n            | Param   | Type    | Description                    |\n            | :------ | :------ | :----------------------------- |\n            | `other` | `BokehBaseExplorer` | the other explorer |\n        \"\"\"\n        self._prelink_check(other)\n        # link coordinate ranges in a bidirectional manner\n        for _attr in [\"start\", \"end\"]:\n            self.figure.x_range.js_link(_attr, other.figure.x_range, _attr)\n            self.figure.y_range.js_link(_attr, other.figure.y_range, _attr)\n            other.figure.x_range.js_link(_attr, self.figure.x_range, _attr)\n            other.figure.y_range.js_link(_attr, self.figure.y_range, _attr)\n\n    @abstractmethod\n    def plot(self, *args, **kwargs):\n\"\"\"\n        ???+ note \"Plot something onto the figure.\"\n            Implemented in child classes based on their functionalities.\n            | Param      | Type  | Description           |\n            | :--------- | :---- | :-------------------- |\n            | `*args`    |       | left to child classes |\n            | `**kwargs` |       | left to child classes |\n        \"\"\"\n        pass\n\n    def find_embedding_fields(self):\n\"\"\"\n        ???+ note \"Find embedding fields from dataframes.\"\n\n            Intended for scenarios where the embedding is higher than two-dimensional.\n        \"\"\"\n        embedding_cols = None\n        for _key, _df in self.dfs.items():\n            # edge case: dataframe is empty\n            if _df.shape[0] == 0:\n                continue\n            # automatically find embedding columns\n            _emb_cols = sorted(filter(is_embedding_field, _df.columns))\n            if embedding_cols is None:\n                embedding_cols = _emb_cols\n            else:\n                # embedding columns must be the same across subsets\n                assert embedding_cols == _emb_cols, \"Inconsistent embedding columns\"\n        assert (\n            len(embedding_cols) &gt;= 2\n        ), f\"Expected at least two embedding columns, found {embedding_cols}\"\n        return embedding_cols\n\n    def auto_color_mapping(self):\n\"\"\"\n        ???+ note \"Find all labels and an appropriate color for each.\"\n        \"\"\"\n        from hover.utils.bokeh_helper import auto_label_color\n\n        labels = set()\n        for _key in self.dfs.keys():\n            labels = labels.union(set(self.dfs[_key][\"label\"].values))\n\n        return auto_label_color(labels)\n\n    # def auto_legend_correction(self):\n    #    \"\"\"\n    #    ???+ note \"Find legend items and deduplicate by label, keeping the last glyph / legend item of each label.\"\n    #        This is to resolve duplicate legend items due to automatic legend_group and incremental plotting.\n    #    \"\"\"\n    #    from collections import OrderedDict\n    #\n    #    if not hasattr(self.figure, \"legend\"):\n    #        self._fail(\"Attempting auto_legend_correction when there is no legend\")\n    #        return\n    #    # extract all items and start over\n    #    items = self.figure.legend.items[:]\n    #    self.figure.legend.items.clear()\n    #\n    #    # use one item to hold all renderers matching its label\n    #    label_to_item = OrderedDict()\n    #\n    #    # deduplication\n    #    for _item in items:\n    #        _label = _item.label.get(\"value\", \"\")\n    #        label_to_item[_label] = _item\n    #\n    #        # WARNING: the current implementation discards renderer references.\n    #        # This could be for the best because renderers add up their glyphs to the legend item.\n    #        # To keep renderer references, see this example:\n    #        # if _label not in label_to_item.keys():\n    #        #    label_to_item[_label] = _item\n    #        # else:\n    #        #    label_to_item[_label].renderers.extend(_item.renderers)\n    #\n    #    self.figure.legend.items = list(label_to_item.values())\n    #\n    #    return\n    #\n    # @staticmethod\n    # def auto_legend(method):\n    #    \"\"\"\n    #    ???+ note \"Decorator that handles legend pre/post-processing issues.\"\n    #        Usage:\n    #\n    #        ```python\n    #        # in a child class\n    #\n    #        @BokehBaseExplorer.auto_legend\n    #        def plot(self, *args, **kwargs):\n    #            # put code here\n    #            pass\n    #        ```\n    #    \"\"\"\n    #    from functools import wraps\n    #\n    #    @wraps(method)\n    #    def wrapped(ref, *args, **kwargs):\n    #        if hasattr(ref.figure, \"legend\"):\n    #            if hasattr(ref.figure.legend, \"items\"):\n    #                ref.figure.legend.items.clear()\n    #\n    #        retval = method(ref, *args, **kwargs)\n    #\n    #        ref.auto_legend_correction()\n    #\n    #        return retval\n    #\n    #    return wrapped\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.__init__","title":"<code>__init__(self, df_dict, **kwargs)</code>  <code>special</code>","text":"Constructor shared by all child classes. Param Type Description <code>df_dict</code> <code>dict</code> <code>str</code> -&gt; <code>DataFrame</code> mapping <code>**kwargs</code> forwarded to <code>bokeh.plotting.figure</code> <ol> <li>settle the figure settings by using child class defaults &amp; kwargs overrides</li> <li>settle the glyph settings by using child class defaults</li> <li>set up dataframes to sync with</li> <li>create widgets that child classes can override</li> <li>create data sources the correspond to class-specific data subsets.</li> <li>initialize a figure under the settings above</li> </ol> Source code in <code>hover/core/explorer/base.py</code> <pre><code>def __init__(self, df_dict, **kwargs):\n\"\"\"\n    ???+ note \"Constructor shared by all child classes.\"\n        | Param       | Type   | Description                  |\n        | :---------- | :----- | :--------------------------- |\n        | `df_dict`   | `dict` | `str` -&gt; `DataFrame` mapping |\n        | `**kwargs`  |        | forwarded to `bokeh.plotting.figure` |\n\n        1. settle the figure settings by using child class defaults &amp; kwargs overrides\n        2. settle the glyph settings by using child class defaults\n        3. set up dataframes to sync with\n        4. create widgets that child classes can override\n        5. create data sources the correspond to class-specific data subsets.\n        6. initialize a figure under the settings above\n    \"\"\"\n    self.figure_kwargs = {\n        \"tools\": STANDARD_PLOT_TOOLS,\n        \"tooltips\": self._build_tooltip(kwargs.pop(\"tooltips\", \"\")),\n        # bokeh recommends webgl for scalability\n        \"output_backend\": \"webgl\",\n    }\n    self.figure_kwargs.update(kwargs)\n    self.figure = figure(**self.figure_kwargs)\n    self.glyph_kwargs = {\n        _key: _dict[\"constant\"].copy()\n        for _key, _dict in self.__class__.SUBSET_GLYPH_KWARGS.items()\n    }\n    self._setup_dfs(df_dict)\n    self._setup_sources()\n    self._setup_widgets()\n    self._setup_status_flags()\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.activate_search","title":"<code>activate_search(self)</code>","text":"Assign search response callbacks to search results. Child methods should bind those callbacks to search widgets. <p>This is a parent method which takes care of common denominators of parent methods.</p> <p>Child methods may inherit the logic here and preprocess/postprocess as needed.</p> Source code in <code>hover/core/explorer/base.py</code> <pre><code>def activate_search(self):\n\"\"\"\n    ???+ note \"Assign search response callbacks to search results. Child methods should bind those callbacks to search widgets.\"\n\n        This is a parent method which takes care of common denominators of parent methods.\n\n        Child methods may inherit the logic here and preprocess/postprocess as needed.\n    \"\"\"\n    self._subroutine_search_create_callbacks()\n    self._subroutine_search_activate_callbacks()\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.auto_color_mapping","title":"<code>auto_color_mapping(self)</code>","text":"Find all labels and an appropriate color for each. Source code in <code>hover/core/explorer/base.py</code> <pre><code>def auto_color_mapping(self):\n\"\"\"\n    ???+ note \"Find all labels and an appropriate color for each.\"\n    \"\"\"\n    from hover.utils.bokeh_helper import auto_label_color\n\n    labels = set()\n    for _key in self.dfs.keys():\n        labels = labels.union(set(self.dfs[_key][\"label\"].values))\n\n    return auto_label_color(labels)\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.find_embedding_fields","title":"<code>find_embedding_fields(self)</code>","text":"Find embedding fields from dataframes. <p>Intended for scenarios where the embedding is higher than two-dimensional.</p> Source code in <code>hover/core/explorer/base.py</code> <pre><code>def find_embedding_fields(self):\n\"\"\"\n    ???+ note \"Find embedding fields from dataframes.\"\n\n        Intended for scenarios where the embedding is higher than two-dimensional.\n    \"\"\"\n    embedding_cols = None\n    for _key, _df in self.dfs.items():\n        # edge case: dataframe is empty\n        if _df.shape[0] == 0:\n            continue\n        # automatically find embedding columns\n        _emb_cols = sorted(filter(is_embedding_field, _df.columns))\n        if embedding_cols is None:\n            embedding_cols = _emb_cols\n        else:\n            # embedding columns must be the same across subsets\n            assert embedding_cols == _emb_cols, \"Inconsistent embedding columns\"\n    assert (\n        len(embedding_cols) &gt;= 2\n    ), f\"Expected at least two embedding columns, found {embedding_cols}\"\n    return embedding_cols\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.from_dataset","title":"<code>from_dataset(dataset, subset_mapping, *args, **kwargs)</code>  <code>classmethod</code>","text":"Alternative constructor from a <code>SupervisableDataset</code>. Param Type Description <code>dataset</code> <code>SupervisableDataset</code> dataset with <code>DataFrame</code>s <code>subset_mapping</code> <code>dict</code> <code>dataset</code> -&gt; <code>explorer</code> subset mapping <code>*args</code> forwarded to the constructor <code>**kwargs</code> forwarded to the constructor Source code in <code>hover/core/explorer/base.py</code> <pre><code>@classmethod\ndef from_dataset(cls, dataset, subset_mapping, *args, **kwargs):\n\"\"\"\n    ???+ note \"Alternative constructor from a `SupervisableDataset`.\"\n        | Param            | Type   | Description                  |\n        | :--------------- | :----- | :--------------------------- |\n        | `dataset`        | `SupervisableDataset` | dataset with `DataFrame`s |\n        | `subset_mapping` | `dict` | `dataset` -&gt; `explorer` subset mapping |\n        | `*args`          |        | forwarded to the constructor |\n        | `**kwargs`       |        | forwarded to the constructor |\n    \"\"\"\n    # local import to avoid import cycles\n    from hover.core.dataset import SupervisableDataset\n\n    assert isinstance(dataset, SupervisableDataset)\n    df_dict = {_v: dataset.dfs[_k] for _k, _v in subset_mapping.items()}\n    explorer = cls(df_dict, *args, **kwargs)\n    explorer.link_dataset(dataset)\n    return explorer\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.link_dataset","title":"<code>link_dataset(self, dataset)</code>","text":"Get tied to a dataset, which is common for explorers. Source code in <code>hover/core/explorer/base.py</code> <pre><code>def link_dataset(self, dataset):\n\"\"\"\n    ???+ note \"Get tied to a dataset, which is common for explorers.\"\n    \"\"\"\n    if not hasattr(self, \"linked_dataset\"):\n        self.linked_dataset = dataset\n    else:\n        assert self.linked_dataset is dataset, \"cannot link to two datasets\"\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.link_selection","title":"<code>link_selection(self, other, subset_mapping)</code>","text":"Synchronize the selection mechanism between sources. <p>This includes: -   the selected indices between subsets -   callbacks associated with selections -   selection option values in the widgets</p> Param Type Description <code>other</code> <code>BokehBaseExplorer</code> the other explorer <code>subset_mapping</code> <code>dict</code> mapping of subsets from <code>self</code> to <code>other</code> Source code in <code>hover/core/explorer/base.py</code> <pre><code>def link_selection(self, other, subset_mapping):\n\"\"\"\n    ???+ note \"Synchronize the selection mechanism between sources.\"\n\n        This includes:\n        -   the selected indices between subsets\n        -   callbacks associated with selections\n        -   selection option values in the widgets\n\n        | Param   | Type    | Description                    |\n        | :------ | :------ | :----------------------------- |\n        | `other` | `BokehBaseExplorer` | the other explorer |\n        | `subset_mapping` | `dict` | mapping of subsets from `self` to `other` |\n    \"\"\"\n    self._prelink_check(other)\n    self._subroutine_link_selection_callbacks(other)\n    self._subroutine_link_selection_indices(other, subset_mapping)\n    self._subroutine_link_selection_options(other)\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.link_xy_range","title":"<code>link_xy_range(self, other)</code>","text":"Synchronize plotting ranges on the xy-plane. Param Type Description <code>other</code> <code>BokehBaseExplorer</code> the other explorer Source code in <code>hover/core/explorer/base.py</code> <pre><code>def link_xy_range(self, other):\n\"\"\"\n    ???+ note \"Synchronize plotting ranges on the xy-plane.\"\n        | Param   | Type    | Description                    |\n        | :------ | :------ | :----------------------------- |\n        | `other` | `BokehBaseExplorer` | the other explorer |\n    \"\"\"\n    self._prelink_check(other)\n    # link coordinate ranges in a bidirectional manner\n    for _attr in [\"start\", \"end\"]:\n        self.figure.x_range.js_link(_attr, other.figure.x_range, _attr)\n        self.figure.y_range.js_link(_attr, other.figure.y_range, _attr)\n        other.figure.x_range.js_link(_attr, self.figure.x_range, _attr)\n        other.figure.y_range.js_link(_attr, self.figure.y_range, _attr)\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.plot","title":"<code>plot(self, *args, **kwargs)</code>","text":"Plot something onto the figure. <p>Implemented in child classes based on their functionalities. | Param      | Type  | Description           | | :--------- | :---- | :-------------------- | | <code>*args</code>    |       | left to child classes | | <code>**kwargs</code> |       | left to child classes |</p> Source code in <code>hover/core/explorer/base.py</code> <pre><code>@abstractmethod\ndef plot(self, *args, **kwargs):\n\"\"\"\n    ???+ note \"Plot something onto the figure.\"\n        Implemented in child classes based on their functionalities.\n        | Param      | Type  | Description           |\n        | :--------- | :---- | :-------------------- |\n        | `*args`    |       | left to child classes |\n        | `**kwargs` |       | left to child classes |\n    \"\"\"\n    pass\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.value_patch_by_slider","title":"<code>value_patch_by_slider(self, col_original, col_patch, **kwargs)</code>","text":"Allow source values to be dynamically patched through a slider. Param Type Description <code>col_original</code> <code>str</code> column of values before the patch <code>col_patch</code> <code>str</code> column of list of values to use as patches <code>**kwargs</code> forwarded to the slider <p>Reference</p> Source code in <code>hover/core/explorer/base.py</code> <pre><code>def value_patch_by_slider(self, col_original, col_patch, **kwargs):\n\"\"\"\n    ???+ note \"Allow source values to be dynamically patched through a slider.\"\n        | Param            | Type   | Description                  |\n        | :--------------- | :----- | :--------------------------- |\n        | `col_original`   | `str`  | column of values before the patch |\n        | `col_patch`      | `str`  | column of list of values to use as patches |\n        | `**kwargs`       |        | forwarded to the slider |\n\n        [Reference](https://github.com/bokeh/bokeh/blob/2.4.2/examples/howto/patch_app.py)\n    \"\"\"\n    # add a patch slider to widgets, if none exist\n    if \"patch_slider\" not in self._dynamic_widgets:\n        slider = Slider(start=0, end=1, value=0, step=1, **kwargs)\n        slider.disabled = True\n        self._dynamic_widgets[\"patch_slider\"] = slider\n    else:\n        slider = self._dynamic_widgets[\"patch_slider\"]\n\n    # create a slider-adjusting callback exposed to the outside\n    def adjust_slider():\n\"\"\"\n        Infer slider length from the number of patch values.\n        \"\"\"\n        num_patches = None\n        for _key, _df in self.dfs.items():\n            assert (\n                col_patch in _df.columns\n            ), f\"Subset {_key} expecting column {col_patch} among columns, got {_df.columns}\"\n            # find all array lengths; note that the data subset can be empty\n            _num_patches_seen = _df[col_patch].apply(len).values\n            assert (\n                len(set(_num_patches_seen)) &lt;= 1\n            ), f\"Expecting consistent number of patches, got {_num_patches_seen}\"\n            _num_patches = _num_patches_seen[0] if _df.shape[0] &gt; 0 else None\n\n            # if a previous subset has implied the number of patches, run a consistency check\n            if num_patches is None:\n                num_patches = _num_patches\n            else:\n                assert (\n                    num_patches == _num_patches\n                ), f\"Conflicting number of patches: {num_patches} vs {_num_patches}\"\n\n        assert num_patches &gt;= 2, f\"Expecting at least 2 patches, got {num_patches}\"\n        slider.end = num_patches - 1\n        slider.disabled = False\n\n    self._dynamic_callbacks[\"adjust_patch_slider\"] = adjust_slider\n\n    # create the callback for patching values\n    def update_patch(attr, old, new):\n        for _key, _df in self.dfs.items():\n            # calculate the patch corresponding to slider value\n            _value = [_arr[new] for _arr in _df[col_patch].values]\n            _slice = slice(_df.shape[0])\n            _patch = {col_original: [(_slice, _value)]}\n            self.sources[_key].patch(_patch)\n\n    slider.on_change(\"value\", update_patch)\n    self._good(f\"Patching {col_original} using {col_patch}\")\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.view","title":"<code>view(self)</code>","text":"Define the high-level visual layout of the whole explorer. Source code in <code>hover/core/explorer/base.py</code> <pre><code>def view(self):\n\"\"\"\n    ???+ note \"Define the high-level visual layout of the whole explorer.\"\n    \"\"\"\n    from bokeh.layouts import column\n\n    return column(self._layout_widgets(), self.figure)\n</code></pre>"},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.__init__","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.activate_search","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.auto_color_mapping","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.find_embedding_fields","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.from_dataset","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.link_dataset","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.link_selection","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.link_xy_range","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.plot","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.value_patch_by_slider","title":".base","text":""},{"location":"pages/reference/core-explorer-base/#hover.core.explorer.base.BokehBaseExplorer.view","title":".base","text":""},{"location":"pages/reference/core-explorer-feature/","title":".feature","text":"<ul> <li> Intermediate classes based on the main feature. </li> </ul>"},{"location":"pages/reference/core-explorer-feature/#hover.core.explorer.feature.BokehForAudio","title":"<code> BokehForAudio            (BokehForUrlToVector)         </code>","text":"<code>BokehForUrlToVector</code> with <code>audio</code> (path like <code>\"http://\"</code> or <code>\"file:///\"</code>) as the main feature. <p>Assumes on top of its parent class:</p> <ul> <li>in supplied dataframes</li> <li>(always) audio urls in an <code>audio</code> column</li> </ul> <p>Does not assume:</p> <ul> <li>what the explorer serves to do.</li> </ul> Source code in <code>hover/core/explorer/feature.py</code> <pre><code>class BokehForAudio(BokehForUrlToVector):\n\"\"\"\n    ???+ note \"`BokehForUrlToVector` with `audio` (path like `\"http://\"` or `\"file:///\"`) as the main feature.\"\n        Assumes on top of its parent class:\n\n        - in supplied dataframes\n          - (always) audio urls in an `audio` column\n\n        Does not assume:\n\n        - what the explorer serves to do.\n    \"\"\"\n\n    PRIMARY_FEATURE = \"audio\"\n    MANDATORY_COLUMNS = [PRIMARY_FEATURE, \"label\"]\n    TOOLTIP_KWARGS = {\n        \"label\": {\"label\": \"Label\"},\n        \"audio\": {\"audio\": \"\"},\n        \"coords\": True,\n        \"index\": True,\n    }\n</code></pre>"},{"location":"pages/reference/core-explorer-feature/#hover.core.explorer.feature.BokehForImage","title":"<code> BokehForImage            (BokehForUrlToVector)         </code>","text":"<code>BokehForUrlToVector</code> with <code>image</code> (path like <code>\"http://\"</code> or <code>\"file:///\"</code>) as the main feature. <p>Assumes on top of its parent class:</p> <ul> <li>in supplied dataframes</li> <li>(always) image urls in an <code>image</code> column</li> </ul> <p>Does not assume:</p> <ul> <li>what the explorer serves to do.</li> </ul> Source code in <code>hover/core/explorer/feature.py</code> <pre><code>class BokehForImage(BokehForUrlToVector):\n\"\"\"\n    ???+ note \"`BokehForUrlToVector` with `image` (path like `\"http://\"` or `\"file:///\"`) as the main feature.\"\n        Assumes on top of its parent class:\n\n        - in supplied dataframes\n          - (always) image urls in an `image` column\n\n        Does not assume:\n\n        - what the explorer serves to do.\n    \"\"\"\n\n    PRIMARY_FEATURE = \"image\"\n    MANDATORY_COLUMNS = [PRIMARY_FEATURE, \"label\"]\n    TOOLTIP_KWARGS = {\n        \"label\": {\"label\": \"Label\"},\n        \"image\": {\"image\": hover.config[\"visual\"][\"tooltip_img_style\"]},\n        \"coords\": True,\n        \"index\": True,\n    }\n</code></pre>"},{"location":"pages/reference/core-explorer-feature/#hover.core.explorer.feature.BokehForText","title":"<code> BokehForText            (BokehBaseExplorer)         </code>","text":"<code>BokehBaseExplorer</code> with <code>text</code> (<code>str</code>) as the main feature. <p>Assumes on top of its parent class:</p> <ul> <li>in supplied dataframes</li> <li>(always) text data in a <code>text</code> column</li> </ul> <p>Does not assume:</p> <ul> <li>what the explorer serves to do.</li> </ul> Source code in <code>hover/core/explorer/feature.py</code> <pre><code>class BokehForText(BokehBaseExplorer):\n\"\"\"\n    ???+ note \"`BokehBaseExplorer` with `text` (`str`) as the main feature.\"\n        Assumes on top of its parent class:\n\n        - in supplied dataframes\n          - (always) text data in a `text` column\n\n        Does not assume:\n\n        - what the explorer serves to do.\n    \"\"\"\n\n    PRIMARY_FEATURE = \"text\"\n    MANDATORY_COLUMNS = [PRIMARY_FEATURE, \"label\"]\n    TOOLTIP_KWARGS = {\n        \"label\": {\"label\": \"Label\"},\n        \"text\": {\"text\": \"Text\"},\n        \"coords\": True,\n        \"index\": True,\n    }\n\n    def _setup_search_widgets(self):\n\"\"\"\n        ???+ note \"Create positive/negative text search boxes.\"\n        \"\"\"\n        common_kwargs = dict(width_policy=\"fit\", height_policy=\"fit\")\n        pos_title, neg_title = \"Text contains (python regex):\", \"Text does not contain:\"\n        self.search_pos = TextInput(title=pos_title, **common_kwargs)\n        self.search_neg = TextInput(title=neg_title, **common_kwargs)\n\n    def _search_watch_widgets(self):\n        return [self.search_pos, self.search_neg]\n\n    def _validate_search_input(self):\n\"\"\"\n        ???+ note \"Text uses regex search, for which any string can be considered valid.\"\n        \"\"\"\n        return True\n\n    def _get_search_score_function(self):\n\"\"\"\n        ???+ note \"Dynamically create a single-argument scoring function.\"\n        \"\"\"\n        pos_regex, neg_regex = self.search_pos.value, self.search_neg.value\n\n        def regex_score(text):\n            score = 0\n            if len(pos_regex) &gt; 0:\n                score += 1 if re.search(pos_regex, text) else -2\n            if len(neg_regex) &gt; 0:\n                score += -2 if re.search(neg_regex, text) else 1\n            return score\n\n        return regex_score\n</code></pre>"},{"location":"pages/reference/core-explorer-feature/#hover.core.explorer.feature.BokehForUrlToVector","title":"<code> BokehForUrlToVector            (BokehBaseExplorer)         </code>","text":"A layer of abstraction for <code>BokehBaseExplorer</code> subclasses whose feature-type-specific mechanisms work the same way through vectors. Source code in <code>hover/core/explorer/feature.py</code> <pre><code>class BokehForUrlToVector(BokehBaseExplorer):\n\"\"\"\n    ???+ note \"A layer of abstraction for `BokehBaseExplorer` subclasses whose feature-type-specific mechanisms work the same way through vectors.\"\n    \"\"\"\n\n    def _setup_search_widgets(self):\n\"\"\"\n        ???+ note \"Create similarity search widgets.\"\n        \"\"\"\n        self.search_sim = TextInput(\n            title=f\"{self.__class__.PRIMARY_FEATURE} similarity search (enter URL)\".capitalize(),\n            width_policy=\"fit\",\n            height_policy=\"fit\",\n        )\n        self.search_threshold = Slider(\n            start=0.0,\n            end=1.0,\n            value=0.9,\n            # fewer steps allowed because refreshing search result can be expensive\n            step=0.1,\n            title=\"Similarity threshold\",\n        )\n\n    def _search_watch_widgets(self):\n        return [self.search_sim, self.search_threshold]\n\n    def _subroutine_search_create_callbacks(self):\n\"\"\"\n        ???+ note \"Create search callback functions based on feature attributes.\"\n        \"\"\"\n        # determine cache size for normalized vectorizer\n        num_points = sum([_df.shape[0] for _df in self.dfs.values()])\n        cache_size = min(num_points, int(1e5))\n\n        # find vectorizer\n        assert hasattr(self, \"linked_dataset\"), \"need linked_dataset for its vectorizer\"\n        found_vectorizers = self.linked_dataset.vectorizer_lookup.values()\n        assert len(found_vectorizers) &gt; 0, \"dataset has no known vectorizer\"\n\n        raw_vectorizer = list(found_vectorizers)[0]\n\n        # gain speed up by caching and normalization\n        @lru_cache(maxsize=cache_size)\n        def normalized_vectorizer(feature):\n            try:\n                vec = raw_vectorizer(feature)\n            except Exception as e:\n                self._warn(f\"vectorizer crashed: {e}; assigning None as vector.\")\n                return None\n            norm = np.linalg.norm(vec)\n            return vec / (norm + 1e-16)\n\n        self._dynamic_resources[\"normalized_vectorizer\"] = normalized_vectorizer\n\n        super()._subroutine_search_create_callbacks()\n\n    def _get_search_score_function(self):\n\"\"\"\n        ???+ note \"Dynamically create a single-argument scoring function.\"\n        \"\"\"\n        vectorizer = self._dynamic_resources[\"normalized_vectorizer\"]\n        url_query = self.search_sim.value\n        sim_thresh = self.search_threshold.value\n        vec_query = vectorizer(url_query)\n\n        def cosine_based_score(url_doc):\n            # edge case: query or doc is invalid for vectorization\n            vec_doc = vectorizer(url_doc)\n            if vec_query is None or vec_doc is None:\n                return 0\n\n            # common case: query and doc are both valid\n            query_doc_sim = (np.dot(vec_query, vec_doc) + 1.0) / 2.0\n            if query_doc_sim &gt;= sim_thresh:\n                return 1\n            else:\n                return -1\n\n        return cosine_based_score\n\n    def _validate_search_input(self):\n\"\"\"\n        ???+ note \"Must be some url pointing to a suffixed file.\"\n\n            For speed, avoid sending web requests in this validation step.\n        \"\"\"\n        from urllib.parse import urlparse\n        from pathlib import Path\n\n        url_query = self.search_sim.value\n        file_path = Path(urlparse(url_query).path)\n        return bool(file_path.suffix)\n</code></pre>"},{"location":"pages/reference/core-explorer-feature/#hover.core.explorer.feature","title":".feature","text":""},{"location":"pages/reference/core-explorer-feature/#hover.core.explorer.feature.BokehForAudio","title":".feature","text":""},{"location":"pages/reference/core-explorer-feature/#hover.core.explorer.feature.BokehForImage","title":".feature","text":""},{"location":"pages/reference/core-explorer-feature/#hover.core.explorer.feature.BokehForText","title":".feature","text":""},{"location":"pages/reference/core-explorer-feature/#hover.core.explorer.feature.BokehForUrlToVector","title":".feature","text":""},{"location":"pages/reference/core-explorer-functionality/","title":".functionality","text":"<ul> <li> Intermediate classes based on the functionality. </li> </ul>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehDataAnnotator","title":"<code> BokehDataAnnotator            (BokehBaseExplorer)         </code>","text":"Annoate data points via callbacks on the buttons. <p>Features:</p> <ul> <li>alter values in the 'label' column through the widgets.</li> </ul> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>class BokehDataAnnotator(BokehBaseExplorer):\n\"\"\"\n    ???+ note \"Annoate data points via callbacks on the buttons.\"\n\n        Features:\n\n        - alter values in the 'label' column through the widgets.\n    \"\"\"\n\n    SUBSET_GLYPH_KWARGS = {\n        _key: {\n            \"constant\": {\"line_alpha\": 0.3},\n            \"search\": {\n                \"size\": (\"size\", 10, 5, 7),\n                \"fill_alpha\": (\"fill_alpha\", 0.5, 0.1, 0.4),\n            },\n        }\n        for _key in [\"raw\", \"train\", \"dev\", \"test\"]\n    }\n\n    def _postprocess_sources(self):\n\"\"\"\n        ???+ note \"Infer glyph colors from the label dynamically.\"\n\n            This is during initialization or re-plotting, creating a new attribute column for each data source.\n        \"\"\"\n        color_dict = self.auto_color_mapping()\n\n        for _key, _df in self.dfs.items():\n            _color = (\n                _df[\"label\"]\n                .apply(lambda label: color_dict.get(label, \"gainsboro\"))\n                .tolist()\n            )\n            self.sources[_key].add(_color, SOURCE_COLOR_FIELD)\n\n    def _update_colors(self):\n\"\"\"\n        ???+ note \"Infer glyph colors from the label dynamically.\"\n\n            This is during annotation callbacks, patching an existing column for the `raw` subset only.\n        \"\"\"\n        # infer glyph colors dynamically\n        color_dict = self.auto_color_mapping()\n\n        color_list = (\n            self.dfs[\"raw\"][\"label\"]\n            .apply(lambda label: color_dict.get(label, \"gainsboro\"))\n            .tolist()\n        )\n        self.sources[\"raw\"].patch(\n            {SOURCE_COLOR_FIELD: [(slice(len(color_list)), color_list)]}\n        )\n        self._good(f\"Updated annotator plot at {current_time()}\")\n\n    def _setup_widgets(self):\n\"\"\"\n        ???+ note \"Create annotator widgets and assign Python callbacks.\"\n        \"\"\"\n        from bokeh.models import TextInput\n\n        super()._setup_widgets()\n\n        self.annotator_input = TextInput(title=\"Label:\")\n        self.annotator_apply = Button(\n            label=\"Apply\",\n            button_type=\"primary\",\n            height_policy=\"fit\",\n            width_policy=\"min\",\n        )\n\n        def callback_apply():\n\"\"\"\n            A callback on clicking the 'self.annotator_apply' button.\n\n            Update labels in the source.\n            \"\"\"\n            label = self.annotator_input.value\n            selected_idx = self.sources[\"raw\"].selected.indices\n            if not selected_idx:\n                self._warn(\n                    \"attempting annotation: did not select any data points. Eligible subset is 'raw'.\"\n                )\n                return\n            self._info(f\"applying {len(selected_idx)} annotations...\")\n\n            # update label in both the df and the data source\n            self.dfs[\"raw\"].loc[selected_idx, \"label\"] = label\n            patch_to_apply = [(_idx, label) for _idx in selected_idx]\n            self.sources[\"raw\"].patch({\"label\": patch_to_apply})\n            self._good(f\"applied {len(selected_idx)} annotations: {label}\")\n\n            self._update_colors()\n\n        # assign the callback and keep the reference\n        self._callback_apply = callback_apply\n        self.annotator_apply.on_click(self._callback_apply)\n        self.annotator_apply.on_click(self._callback_subset_display)\n\n    def plot(self):\n\"\"\"\n        ???+ note \"Re-plot all data points with the new labels.\"\n            Overrides the parent method.\n            Determines the label -&gt; color mapping dynamically.\n        \"\"\"\n        xy_axes = self.find_embedding_fields()[:2]\n        for _key, _source in self.sources.items():\n            self.figure.circle(\n                *xy_axes,\n                name=_key,\n                color=SOURCE_COLOR_FIELD,\n                source=_source,\n                **self.glyph_kwargs[_key],\n            )\n            self._good(f\"Plotted subset {_key} with {self.dfs[_key].shape[0]} points\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehDataAnnotator.plot","title":"<code>plot(self)</code>","text":"Re-plot all data points with the new labels. <p>Overrides the parent method. Determines the label -&gt; color mapping dynamically.</p> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def plot(self):\n\"\"\"\n    ???+ note \"Re-plot all data points with the new labels.\"\n        Overrides the parent method.\n        Determines the label -&gt; color mapping dynamically.\n    \"\"\"\n    xy_axes = self.find_embedding_fields()[:2]\n    for _key, _source in self.sources.items():\n        self.figure.circle(\n            *xy_axes,\n            name=_key,\n            color=SOURCE_COLOR_FIELD,\n            source=_source,\n            **self.glyph_kwargs[_key],\n        )\n        self._good(f\"Plotted subset {_key} with {self.dfs[_key].shape[0]} points\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehDataFinder","title":"<code> BokehDataFinder            (BokehBaseExplorer)         </code>","text":"Plot data points in grey ('gainsboro') and highlight search positives in coral. <p>Features:</p> <ul> <li>the search widgets will highlight the results through a change of color.</li> <li>the search results can be used as a filter condition.</li> </ul> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>class BokehDataFinder(BokehBaseExplorer):\n\"\"\"\n    ???+ note \"Plot data points in grey ('gainsboro') and highlight search positives in coral.\"\n\n        Features:\n\n        -   the search widgets will highlight the results through a change of color.\n        -   the search results can be used as a filter condition.\n    \"\"\"\n\n    SUBSET_GLYPH_KWARGS = {\n        _key: {\n            \"constant\": {\"line_alpha\": 0.4},\n            \"search\": {\n                \"size\": (\"size\", 10, 5, 7),\n                \"fill_alpha\": (\"fill_alpha\", 0.4, 0.1, 0.2),\n                \"color\": (\"color\", \"coral\", \"linen\", \"gainsboro\"),\n            },\n        }\n        for _key in [\"raw\", \"train\", \"dev\", \"test\"]\n    }\n\n    def _setup_widgets(self):\n\"\"\"\n        ???+ note \"Create score range slider that filters selections.\"\n        \"\"\"\n        from bokeh.models import CheckboxGroup\n\n        super()._setup_widgets()\n\n        self.search_filter_box = CheckboxGroup(\n            labels=[\"use as selection filter\"], active=[]\n        )\n\n    def _subroutine_search_activate_callbacks(self):\n\"\"\"\n        ???+ note \"Activate search callback functions by binding them to widgets.\"\n        \"\"\"\n        super()._subroutine_search_activate_callbacks()\n\n        def filter_flag():\n            return bool(0 in self.search_filter_box.active)\n\n        def filter_by_search(indices, subset):\n\"\"\"\n            Filter selection with search results on a subset.\n            \"\"\"\n            if not filter_flag():\n                return indices\n\n            search_scores = self.sources[subset].data[SEARCH_SCORE_FIELD]\n            matched = set(np.where(np.array(search_scores) &gt; 0)[0])\n            return indices.intersection(matched)\n\n        for _key in self.sources.keys():\n            self._selection_filters[_key].data.add(filter_by_search)\n\n        # when toggled as active, search changes trigger selection filter\n        for _widget in self._search_watch_widgets():\n            _widget.on_change(\n                \"value\",\n                lambda attr, old, new: self._selection_stages_callback(\n                    \"load\", \"write\", \"read\"\n                )\n                if filter_flag()\n                else None,\n            )\n\n        # change of toggles always trigger selection filter\n        self.search_filter_box.on_change(\n            \"active\",\n            lambda attr, old, new: self._selection_stages_callback(\n                \"load\", \"write\", \"read\"\n            ),\n        )\n\n    def plot(self):\n\"\"\"\n        ???+ note \"Plot all data points.\"\n        \"\"\"\n        xy_axes = self.find_embedding_fields()[:2]\n        for _key, _source in self.sources.items():\n            self.figure.circle(\n                *xy_axes, name=_key, source=_source, **self.glyph_kwargs[_key]\n            )\n            self._good(f\"Plotted subset {_key} with {self.dfs[_key].shape[0]} points\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehDataFinder.plot","title":"<code>plot(self)</code>","text":"Plot all data points. Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def plot(self):\n\"\"\"\n    ???+ note \"Plot all data points.\"\n    \"\"\"\n    xy_axes = self.find_embedding_fields()[:2]\n    for _key, _source in self.sources.items():\n        self.figure.circle(\n            *xy_axes, name=_key, source=_source, **self.glyph_kwargs[_key]\n        )\n        self._good(f\"Plotted subset {_key} with {self.dfs[_key].shape[0]} points\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehMarginExplorer","title":"<code> BokehMarginExplorer            (BokehBaseExplorer)         </code>","text":"Plot data points along with two versions of labels. <p>Could be useful for A/B tests.</p> <p>Features:</p> <ul> <li>can choose to only plot the margins about specific labels.</li> <li>currently not considering multi-label scenarios.</li> </ul> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>class BokehMarginExplorer(BokehBaseExplorer):\n\"\"\"\n    ???+ note \"Plot data points along with two versions of labels.\"\n        Could be useful for A/B tests.\n\n        Features:\n\n        - can choose to only plot the margins about specific labels.\n        - currently not considering multi-label scenarios.\n    \"\"\"\n\n    SUBSET_GLYPH_KWARGS = {\n        _key: {\n            \"constant\": {\"color\": \"gainsboro\", \"line_alpha\": 0.5, \"fill_alpha\": 0.0},\n            \"search\": {\"size\": (\"size\", 10, 5, 7)},\n        }\n        for _key in [\"raw\", \"train\", \"dev\"]\n    }\n    DEFAULT_SUBSET_MAPPING = {_k: _k for _k in [\"raw\", \"train\", \"dev\"]}\n\n    def __init__(self, df_dict, label_col_a, label_col_b, **kwargs):\n\"\"\"\n        ???+ note \"Additional construtor\"\n            On top of the requirements of the parent class,\n            the input dataframe should contain:\n\n            - label_col_a and label_col_b for \"label margins\".\n\n            | Param         | Type   | Description                  |\n            | :------------ | :----- | :--------------------------- |\n            | `df_dict`     | `dict` | `str` -&gt; `DataFrame` mapping |\n            | `label_col_a` | `str`  | column for label set A       |\n            | `label_col_b` | `str`  | column for label set B       |\n            | `**kwargs`    |        | forwarded to `bokeh.plotting.figure` |\n        \"\"\"\n        self.label_col_a = label_col_a\n        self.label_col_b = label_col_b\n        super().__init__(df_dict, **kwargs)\n\n    def _mandatory_column_defaults(self):\n\"\"\"\n        ???+ note \"Mandatory columns and default values.\"\n\n            If default value is None, will raise exception if the column is not found.\n        \"\"\"\n        column_to_value = super()._mandatory_column_defaults()\n        column_to_value.update(\n            {\n                self.label_col_a: None,\n                self.label_col_b: None,\n            }\n        )\n        return column_to_value\n\n    def plot(self, label, **kwargs):\n\"\"\"\n        ???+ note \"Plot the margins about a single label.\"\n            | Param      | Type   | Description                  |\n            | :--------- | :----- | :--------------------------- |\n            | `label`    |        | the label to plot about      |\n            | `**kwargs` |        | forwarded to plotting markers |\n        \"\"\"\n\n        xy_axes = self.find_embedding_fields()[:2]\n        for _key, _source in self.sources.items():\n            # prepare plot settings\n            eff_kwargs = self.glyph_kwargs[_key].copy()\n            eff_kwargs.update(kwargs)\n            eff_kwargs[\"legend_label\"] = f\"{label}\"\n\n            # create agreement/increment/decrement subsets\n            col_a_pos = np.where(self.dfs[_key][self.label_col_a] == label)[0].tolist()\n            col_a_neg = np.where(self.dfs[_key][self.label_col_a] != label)[0].tolist()\n            col_b_pos = np.where(self.dfs[_key][self.label_col_b] == label)[0].tolist()\n            col_b_neg = np.where(self.dfs[_key][self.label_col_b] != label)[0].tolist()\n            agreement_view = CDSView(\n                source=_source, filters=[IndexFilter(col_a_pos), IndexFilter(col_b_pos)]\n            )\n            increment_view = CDSView(\n                source=_source, filters=[IndexFilter(col_a_neg), IndexFilter(col_b_pos)]\n            )\n            decrement_view = CDSView(\n                source=_source, filters=[IndexFilter(col_a_pos), IndexFilter(col_b_neg)]\n            )\n\n            to_plot = [\n                {\"view\": agreement_view, \"marker\": self.figure.square},\n                {\"view\": increment_view, \"marker\": self.figure.x},\n                {\"view\": decrement_view, \"marker\": self.figure.cross},\n            ]\n\n            # plot created subsets\n            for _dict in to_plot:\n                _view = _dict[\"view\"]\n                _marker = _dict[\"marker\"]\n                _marker(*xy_axes, name=_key, source=_source, view=_view, **eff_kwargs)\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehMarginExplorer.__init__","title":"<code>__init__(self, df_dict, label_col_a, label_col_b, **kwargs)</code>  <code>special</code>","text":"Additional construtor <p>On top of the requirements of the parent class, the input dataframe should contain:</p> <ul> <li>label_col_a and label_col_b for \"label margins\".</li> </ul> Param Type Description <code>df_dict</code> <code>dict</code> <code>str</code> -&gt; <code>DataFrame</code> mapping <code>label_col_a</code> <code>str</code> column for label set A <code>label_col_b</code> <code>str</code> column for label set B <code>**kwargs</code> forwarded to <code>bokeh.plotting.figure</code> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def __init__(self, df_dict, label_col_a, label_col_b, **kwargs):\n\"\"\"\n    ???+ note \"Additional construtor\"\n        On top of the requirements of the parent class,\n        the input dataframe should contain:\n\n        - label_col_a and label_col_b for \"label margins\".\n\n        | Param         | Type   | Description                  |\n        | :------------ | :----- | :--------------------------- |\n        | `df_dict`     | `dict` | `str` -&gt; `DataFrame` mapping |\n        | `label_col_a` | `str`  | column for label set A       |\n        | `label_col_b` | `str`  | column for label set B       |\n        | `**kwargs`    |        | forwarded to `bokeh.plotting.figure` |\n    \"\"\"\n    self.label_col_a = label_col_a\n    self.label_col_b = label_col_b\n    super().__init__(df_dict, **kwargs)\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehMarginExplorer.plot","title":"<code>plot(self, label, **kwargs)</code>","text":"Plot the margins about a single label. Param Type Description <code>label</code> the label to plot about <code>**kwargs</code> forwarded to plotting markers Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def plot(self, label, **kwargs):\n\"\"\"\n    ???+ note \"Plot the margins about a single label.\"\n        | Param      | Type   | Description                  |\n        | :--------- | :----- | :--------------------------- |\n        | `label`    |        | the label to plot about      |\n        | `**kwargs` |        | forwarded to plotting markers |\n    \"\"\"\n\n    xy_axes = self.find_embedding_fields()[:2]\n    for _key, _source in self.sources.items():\n        # prepare plot settings\n        eff_kwargs = self.glyph_kwargs[_key].copy()\n        eff_kwargs.update(kwargs)\n        eff_kwargs[\"legend_label\"] = f\"{label}\"\n\n        # create agreement/increment/decrement subsets\n        col_a_pos = np.where(self.dfs[_key][self.label_col_a] == label)[0].tolist()\n        col_a_neg = np.where(self.dfs[_key][self.label_col_a] != label)[0].tolist()\n        col_b_pos = np.where(self.dfs[_key][self.label_col_b] == label)[0].tolist()\n        col_b_neg = np.where(self.dfs[_key][self.label_col_b] != label)[0].tolist()\n        agreement_view = CDSView(\n            source=_source, filters=[IndexFilter(col_a_pos), IndexFilter(col_b_pos)]\n        )\n        increment_view = CDSView(\n            source=_source, filters=[IndexFilter(col_a_neg), IndexFilter(col_b_pos)]\n        )\n        decrement_view = CDSView(\n            source=_source, filters=[IndexFilter(col_a_pos), IndexFilter(col_b_neg)]\n        )\n\n        to_plot = [\n            {\"view\": agreement_view, \"marker\": self.figure.square},\n            {\"view\": increment_view, \"marker\": self.figure.x},\n            {\"view\": decrement_view, \"marker\": self.figure.cross},\n        ]\n\n        # plot created subsets\n        for _dict in to_plot:\n            _view = _dict[\"view\"]\n            _marker = _dict[\"marker\"]\n            _marker(*xy_axes, name=_key, source=_source, view=_view, **eff_kwargs)\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer","title":"<code> BokehSnorkelExplorer            (BokehBaseExplorer)         </code>","text":"Plot data points along with labeling function (LF) outputs. <p>Features:</p> <ul> <li>each labeling function corresponds to its own line_color.</li> <li>uses a different marker for each type of predictions: square for 'correct', x for 'incorrect', cross for 'missed', circle for 'hit'.</li> <li>'correct': the LF made a correct prediction on a point in the 'labeled' set.</li> <li>'incorrect': the LF made an incorrect prediction on a point in the 'labeled' set.</li> <li>'missed': the LF is capable of predicting the target class, but did not make such prediction on the particular point.</li> <li>'hit': the LF made a prediction on a point in the 'raw' set.</li> </ul> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>class BokehSnorkelExplorer(BokehBaseExplorer):\n\"\"\"\n    ???+ note \"Plot data points along with labeling function (LF) outputs.\"\n\n        Features:\n\n        -   each labeling function corresponds to its own line_color.\n        -   uses a different marker for each type of predictions: square for 'correct', x for 'incorrect', cross for 'missed', circle for 'hit'.\n          -   'correct': the LF made a correct prediction on a point in the 'labeled' set.\n          -   'incorrect': the LF made an incorrect prediction on a point in the 'labeled' set.\n          -   'missed': the LF is capable of predicting the target class, but did not make such prediction on the particular point.\n          -   'hit': the LF made a prediction on a point in the 'raw' set.\n    \"\"\"\n\n    SUBSET_GLYPH_KWARGS = {\n        \"raw\": {\n            \"constant\": {\"line_alpha\": 1.0, \"color\": \"gainsboro\"},\n            \"search\": {\n                \"size\": (\"size\", 10, 5, 7),\n                \"fill_alpha\": (\"fill_alpha\", 0.4, 0.05, 0.2),\n            },\n        },\n        \"labeled\": {\n            \"constant\": {\"line_alpha\": 1.0, \"fill_alpha\": 0.0},\n            \"search\": {\"size\": (\"size\", 10, 5, 7)},\n        },\n    }\n    DEFAULT_SUBSET_MAPPING = {\"raw\": \"raw\", \"dev\": \"labeled\"}\n\n    def __init__(self, df_dict, **kwargs):\n\"\"\"\n        ???+ note \"Additional construtor\"\n            Set up\n\n            -   a list to keep track of plotted labeling functions.\n            -   a palette for plotting labeling function predictions.\n\n            | Param       | Type   | Description                  |\n            | :---------- | :----- | :--------------------------- |\n            | `df_dict`   | `dict` | `str` -&gt; `DataFrame` mapping |\n            | `**kwargs`  |        | forwarded to `bokeh.plotting.figure` |\n        \"\"\"\n        super().__init__(df_dict, **kwargs)\n        self.palette = list(Category20[20])\n        self._subscribed_lf_list = None\n\n    def _setup_sources(self):\n\"\"\"\n        ???+ note \"Create data structures that source interactions will need.\"\n        \"\"\"\n        # keep track of plotted LFs and glyphs, which will interact with sources\n        self.lf_data = OrderedDict()\n        super()._setup_sources()\n\n    @property\n    def subscribed_lf_list(self):\n\"\"\"\n        ???+ note \"A list of LFs to which the explorer can be lazily synchronized.\"\n\n            Intended for recipes where the user can modify LFs without having access to the explorer.\n        \"\"\"\n        return self._subscribed_lf_list\n\n    @subscribed_lf_list.setter\n    def subscribed_lf_list(self, lf_list):\n\"\"\"\n        ???+ note \"Subscribe to a list of LFs.\"\n        \"\"\"\n        assert isinstance(lf_list, list), f\"Expected a list of LFs, got {lf_list}\"\n        if self.subscribed_lf_list is None:\n            self._good(\"Subscribed to a labeling function list BY REFERENCE.\")\n        else:\n            self._warn(\"Changing labeling function list subscription.\")\n        self._subscribed_lf_list = lf_list\n        self._callback_refresh_lf_menu()\n\n    def _setup_widgets(self):\n\"\"\"\n        ???+ note \"Create labeling function support widgets and assign Python callbacks.\"\n        \"\"\"\n        super()._setup_widgets()\n        self._subroutine_setup_lf_list_refresher()\n        self._subroutine_setup_lf_apply_trigger()\n        self._subroutine_setup_lf_filter_trigger()\n\n    def _subroutine_setup_lf_list_refresher(self):\n\"\"\"\n        ???+ note \"Create widget for refreshing LF list and replotting.\"\n        \"\"\"\n        self.lf_list_refresher = Button(\n            label=\"Refresh Functions\",\n            height_policy=\"fit\",\n            width_policy=\"min\",\n        )\n\n        def callback_refresh_lf_plot():\n\"\"\"\n            Re-plot according to subscribed_lf_list.\n            \"\"\"\n            if self.subscribed_lf_list is None:\n                self._warn(\"cannot refresh LF plot without subscribed LF list.\")\n                return\n            lf_names_to_keep = set([_lf.name for _lf in self.subscribed_lf_list])\n            lf_names_to_drop = set(self.lf_data.keys()).difference(lf_names_to_keep)\n            for _lf_name in lf_names_to_drop:\n                self.unplot_lf(_lf_name)\n            for _lf in self.subscribed_lf_list:\n                self.plot_lf(_lf)\n\n        def callback_refresh_lf_menu():\n\"\"\"\n            The menu was assigned by value and needs to stay consistent with LF updates.\n            To be triggered in self.plot_new_lf() and self.unplot_lf().\n            \"\"\"\n            self.lf_apply_trigger.menu = list(self.lf_data.keys())\n            self.lf_filter_trigger.menu = list(self.lf_data.keys())\n\n        self._callback_refresh_lf_menu = callback_refresh_lf_menu\n        self.lf_list_refresher.on_click(callback_refresh_lf_plot)\n        # self.lf_list_refresher.on_click(callback_refresh_lf_menu)\n\n    def _subroutine_setup_lf_apply_trigger(self):\n\"\"\"\n        ???+ note \"Create widget for applying LFs on data.\"\n        \"\"\"\n        self.lf_apply_trigger = Dropdown(\n            label=\"Apply Labels\",\n            button_type=\"warning\",\n            menu=list(self.lf_data.keys()),\n            height_policy=\"fit\",\n            width_policy=\"min\",\n        )\n\n        def callback_apply(event):\n\"\"\"\n            A callback on clicking the 'self.lf_apply_trigger' button.\n\n            Update labels in the source similarly to the annotator.\n            However, in this explorer, because LFs already use color, the produced labels will not.\n            \"\"\"\n            lf = self.lf_data[event.item][\"lf\"]\n            assert callable(lf), f\"Expected a function, got {lf}\"\n\n            selected_idx = self.sources[\"raw\"].selected.indices\n            if not selected_idx:\n                self._warn(\n                    \"attempting labeling by function: did not select any data points. Eligible subset is 'raw'.\"\n                )\n                return\n\n            labels = self.dfs[\"raw\"].iloc[selected_idx].apply(lf, axis=1).values\n            num_nontrivial = len(\n                list(filter(lambda l: l != module_config.ABSTAIN_DECODED, labels))\n            )\n\n            # update label in both the df and the data source\n            self.dfs[\"raw\"].loc[selected_idx, \"label\"] = labels\n            for _idx, _label in zip(selected_idx, labels):\n                _idx = int(_idx)\n                self.sources[\"raw\"].patch({\"label\": [(_idx, _label)]})\n            self._info(\n                f\"applied {num_nontrivial}/{len(labels)} annotations by func {lf.name}\"\n            )\n\n        self.lf_apply_trigger.on_click(callback_apply)\n\n    def _subroutine_setup_lf_filter_trigger(self):\n\"\"\"\n        ???+ note \"Create widget for using LFs to filter data.\"\n        \"\"\"\n        self.lf_filter_trigger = Dropdown(\n            label=\"Use as Selection Filter\",\n            button_type=\"primary\",\n            menu=list(self.lf_data.keys()),\n            height_policy=\"fit\",\n            width_policy=\"min\",\n        )\n\n        def callback_filter(event):\n\"\"\"\n            A callback on clicking the 'self.lf_filter_trigger' button.\n\n            Update selected indices in a one-time manner.\n            \"\"\"\n            lf = self.lf_data[event.item][\"lf\"]\n            assert callable(lf), f\"Expected a function, got {lf}\"\n\n            for _key, _source in self.sources.items():\n                _selected = _source.selected.indices\n                _labels = self.dfs[_key].iloc[_selected].apply(lf, axis=1).values\n                _kept = [\n                    _idx\n                    for _idx, _label in zip(_selected, _labels)\n                    if _label != module_config.ABSTAIN_DECODED\n                ]\n                self.sources[_key].selected.indices = _kept\n\n            # selection reduced, need to trigger readall callbacks\n            self._selection_stages_callback(\"read\")\n\n        self.lf_filter_trigger.on_click(callback_filter)\n\n    def _postprocess_sources(self):\n\"\"\"\n        ???+ note \"Refresh all LF glyphs because data source has changed.\"\n        \"\"\"\n        for _lf_name in self.lf_data.keys():\n            self.refresh_glyphs(_lf_name)\n\n    def plot(self, *args, **kwargs):\n\"\"\"\n        ???+ note \"Plot the raw subset in the background.\"\n        \"\"\"\n        xy_axes = self.find_embedding_fields()[:2]\n        self.figure.circle(\n            *xy_axes, name=\"raw\", source=self.sources[\"raw\"], **self.glyph_kwargs[\"raw\"]\n        )\n        self._good(f\"Plotted subset raw with {self.dfs['raw'].shape[0]} points\")\n\n    def plot_lf(self, lf, **kwargs):\n\"\"\"\n        ???+ note \"Add or refresh a single labeling function on the plot.\"\n            | Param       | Type             | Description                  |\n            | :---------- | :--------------- | :--------------------------- |\n            | `lf`        | `callable`       | labeling function decorated by `@labeling_function()` from `hover.utils.snorkel_helper` |\n            | `**kwargs`  |             | forwarded to `self.plot_new_lf()` |\n        \"\"\"\n        # keep track of added LF\n        if lf.name in self.lf_data:\n            # skip if the functions are identical\n            if self.lf_data[lf.name][\"lf\"] is lf:\n                return\n            # overwrite the function and refresh glyphs\n            self.lf_data[lf.name][\"lf\"] = lf\n            self.refresh_glyphs(lf.name)\n            return\n\n        self.plot_new_lf(lf, **kwargs)\n\n    def unplot_lf(self, lf_name):\n\"\"\"\n        ???+ note \"Remove a single labeling function from the plot.\"\n            | Param     | Type   | Description               |\n            | :-------- | :----- | :------------------------ |\n            | `lf_name` | `str`  | name of labeling function |\n        \"\"\"\n        assert lf_name in self.lf_data, f\"trying to remove non-existing LF: {lf_name}\"\n\n        data_dict = self.lf_data.pop(lf_name)\n        lf, glyph_dict = data_dict[\"lf\"], data_dict[\"glyphs\"]\n        assert lf.name == lf_name, f\"LF name mismatch: {lf.name} vs {lf_name}\"\n\n        # remove from legend, checking that there is exactly one entry\n        legend_idx_to_pop = None\n        for i, _item in enumerate(self.figure.legend.items):\n            _label = _item.label.value\n            if _label == lf_name:\n                assert legend_idx_to_pop is None, f\"Legend collision: {lf_name}\"\n                legend_idx_to_pop = i\n        assert isinstance(legend_idx_to_pop, int), f\"Missing from legend: {lf_name}\"\n        self.figure.legend.items.pop(legend_idx_to_pop)\n\n        # remove from renderers\n        # get indices to pop in ascending order\n        renderer_indices_to_pop = []\n        for i, _renderer in enumerate(self.figure.renderers):\n            if lf_name in _renderer.glyph.tags:\n                renderer_indices_to_pop.append(i)\n        # check that the number of glyphs founded matches expected value\n        num_fnd, num_exp = len(renderer_indices_to_pop), len(glyph_dict)\n        assert num_fnd == num_exp, f\"Glyph mismatch: {num_fnd} vs. {num_exp}\"\n        # process indices in descending order to avoid shifts\n        for i in renderer_indices_to_pop[::-1]:\n            self.figure.renderers.pop(i)\n\n        # return color to palette so that another LF can use it\n        self.palette.append(data_dict[\"color\"])\n\n        self._callback_refresh_lf_menu()\n        self._good(f\"Unplotted LF {lf_name}\")\n\n    def refresh_glyphs(self, lf_name):\n\"\"\"\n        ???+ note \"Refresh the glyph(s) of a single LF based on its name.\"\n            | Param     | Type   | Description               |\n            | :-------- | :----- | :------------------------ |\n            | `lf_name` | `str`  | name of labeling function |\n\n            Assumes that specified C/I/M/H glyphs are stored.\n            1. re-compute L_raw/L_labeled and CDSViews\n            2. update the view for each glyph\n        \"\"\"\n        assert lf_name in self.lf_data, f\"trying to refresh non-existing LF: {lf_name}\"\n\n        lf = self.lf_data[lf_name][\"lf\"]\n        L_raw = self.dfs[\"raw\"].apply(lf, axis=1).values\n        L_labeled = self.dfs[\"labeled\"].apply(lf, axis=1).values\n\n        glyph_codes = self.lf_data[lf_name][\"glyphs\"].keys()\n        if \"C\" in glyph_codes:\n            c_view = self._view_correct(L_labeled)\n            self.lf_data[lf_name][\"glyphs\"][\"C\"].view = c_view\n        if \"I\" in glyph_codes:\n            i_view = self._view_incorrect(L_labeled)\n            self.lf_data[lf_name][\"glyphs\"][\"I\"].view = i_view\n        if \"M\" in glyph_codes:\n            m_view = self._view_missed(L_labeled, lf.targets)\n            self.lf_data[lf_name][\"glyphs\"][\"M\"].view = m_view\n        if \"H\" in glyph_codes:\n            h_view = self._view_hit(L_raw)\n            self.lf_data[lf_name][\"glyphs\"][\"H\"].view = h_view\n\n        self._good(f\"Refreshed the glyphs of LF {lf_name}\")\n\n    def plot_new_lf(\n        self, lf, L_raw=None, L_labeled=None, include=(\"C\", \"I\", \"M\"), **kwargs\n    ):\n\"\"\"\n        ???+ note \"Plot a single labeling function and keep its settings for update.\"\n            | Param       | Type             | Description                  |\n            | :---------- | :--------------- | :--------------------------- |\n            | `lf`        | `callable`       | labeling function decorated by `@labeling_function()` from `hover.utils.snorkel_helper` |\n            | `L_raw`     | `np.ndarray`     | predictions, in decoded `str`, on the `\"raw\"` set |\n            | `L_labeled` | `np.ndarray`     | predictions, in decoded `str`, on the `\"labeled\"` set |\n            | `include`   | `tuple` of `str` | \"C\" for correct, \"I\" for incorrect, \"M\" for missed\", \"H\" for hit: types of predictions to make visible in the plot |\n            | `**kwargs`  |                  | forwarded to plotting markers |\n\n\n            - lf: labeling function decorated by `@labeling_function()` from `hover.utils.snorkel_helper`\n            - L_raw: numpy.ndarray\n            - L_labeled: numpy.ndarray\n            - include: subsets to show, which can be correct(C)/incorrect(I)/missed(M)/hit(H).\n        \"\"\"\n        # existing LF should not trigger this method\n        assert lf.name not in self.lf_data, f\"LF collision: {lf.name}\"\n\n        # calculate predicted labels if not provided\n        if L_raw is None:\n            L_raw = self.dfs[\"raw\"].apply(lf, axis=1).values\n        if L_labeled is None:\n            L_labeled = self.dfs[\"labeled\"].apply(lf, axis=1).values\n\n        # prepare plot settings\n        assert self.palette, f\"Palette depleted, # LFs: {len(self.lf_data)}\"\n        legend_label = lf.name\n        color = self.palette.pop(0)\n        xy_axes = self.find_embedding_fields()[:2]\n\n        raw_glyph_kwargs = self.glyph_kwargs[\"raw\"].copy()\n        raw_glyph_kwargs[\"legend_label\"] = legend_label\n        raw_glyph_kwargs[\"color\"] = color\n        raw_glyph_kwargs.update(kwargs)\n\n        labeled_glyph_kwargs = self.glyph_kwargs[\"labeled\"].copy()\n        labeled_glyph_kwargs[\"legend_label\"] = legend_label\n        labeled_glyph_kwargs[\"color\"] = color\n        labeled_glyph_kwargs.update(kwargs)\n\n        # create dictionary to prepare for dynamic lf &amp; glyph updates\n        data_dict = {\"lf\": lf, \"color\": color, \"glyphs\": {}}\n\n        # add correct/incorrect/missed/hit glyphs\n        if \"C\" in include:\n            view = self._view_correct(L_labeled)\n            data_dict[\"glyphs\"][\"C\"] = self.figure.square(\n                *xy_axes,\n                source=self.sources[\"labeled\"],\n                view=view,\n                name=\"labeled\",\n                tags=[lf.name],\n                **labeled_glyph_kwargs,\n            )\n        if \"I\" in include:\n            view = self._view_incorrect(L_labeled)\n            data_dict[\"glyphs\"][\"I\"] = self.figure.x(\n                *xy_axes,\n                source=self.sources[\"labeled\"],\n                view=view,\n                name=\"labeled\",\n                tags=[lf.name],\n                **labeled_glyph_kwargs,\n            )\n        if \"M\" in include:\n            view = self._view_missed(L_labeled, lf.targets)\n            data_dict[\"glyphs\"][\"M\"] = self.figure.cross(\n                *xy_axes,\n                source=self.sources[\"labeled\"],\n                view=view,\n                name=\"labeled\",\n                tags=[lf.name],\n                **labeled_glyph_kwargs,\n            )\n        if \"H\" in include:\n            view = self._view_hit(L_raw)\n            data_dict[\"glyphs\"][\"H\"] = self.figure.circle(\n                *xy_axes,\n                source=self.sources[\"raw\"],\n                view=view,\n                name=\"raw\",\n                tags=[lf.name],\n                **raw_glyph_kwargs,\n            )\n\n        # assign the completed dictionary\n        self.lf_data[lf.name] = data_dict\n        # reflect LF update in widgets\n        self._callback_refresh_lf_menu()\n\n        self._good(f\"Plotted new LF {lf.name}\")\n\n    def _view_correct(self, L_labeled):\n\"\"\"\n        ???+ note \"Determine the portion correctly labeled by a labeling function.\"\n            | Param       | Type         | Description                  |\n            | :---------- | :----------- | :--------------------------- |\n            | `L_labeled` | `np.ndarray` | predictions on the labeled subset |\n        \"\"\"\n        if L_labeled.shape[0] == 0:\n            indices = []\n        else:\n            agreed = self.dfs[\"labeled\"][\"label\"].values == L_labeled\n            attempted = L_labeled != module_config.ABSTAIN_DECODED\n            indices = np.where(np.multiply(agreed, attempted))[0].tolist()\n        view = CDSView(source=self.sources[\"labeled\"], filters=[IndexFilter(indices)])\n        return view\n\n    def _view_incorrect(self, L_labeled):\n\"\"\"\n        ???+ note \"Determine the portion incorrectly labeled by a labeling function.\"\n            | Param       | Type         | Description                  |\n            | :---------- | :----------- | :--------------------------- |\n            | `L_labeled` | `np.ndarray` | predictions on the labeled subset |\n        \"\"\"\n        if L_labeled.shape[0] == 0:\n            indices = []\n        else:\n            disagreed = self.dfs[\"labeled\"][\"label\"].values != L_labeled\n            attempted = L_labeled != module_config.ABSTAIN_DECODED\n            indices = np.where(np.multiply(disagreed, attempted))[0].tolist()\n        view = CDSView(source=self.sources[\"labeled\"], filters=[IndexFilter(indices)])\n        return view\n\n    def _view_missed(self, L_labeled, targets):\n\"\"\"\n        ???+ note \"Determine the portion missed by a labeling function.\"\n            | Param       | Type          | Description                  |\n            | :---------- | :------------ | :--------------------------- |\n            | `L_labeled` | `np.ndarray`  | predictions on the labeled subset |\n            | `targets` | `list` of `str` | labels that the function aims for |\n        \"\"\"\n        if L_labeled.shape[0] == 0:\n            indices = []\n        else:\n            targetable = np.isin(self.dfs[\"labeled\"][\"label\"], targets)\n            abstained = L_labeled == module_config.ABSTAIN_DECODED\n            indices = np.where(np.multiply(targetable, abstained))[0].tolist()\n        view = CDSView(source=self.sources[\"labeled\"], filters=[IndexFilter(indices)])\n        return view\n\n    def _view_hit(self, L_raw):\n\"\"\"\n        ???+ note \"Determine the portion hit by a labeling function.\"\n            | Param       | Type         | Description                  |\n            | :---------- | :----------- | :--------------------------- |\n            | `L_raw`     | `np.ndarray` | predictions on the raw subset |\n        \"\"\"\n        if L_raw.shape[0] == 0:\n            indices = []\n        else:\n            indices = np.where(L_raw != module_config.ABSTAIN_DECODED)[0].tolist()\n        view = CDSView(source=self.sources[\"raw\"], filters=[IndexFilter(indices)])\n        return view\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.subscribed_lf_list","title":"<code>subscribed_lf_list</code>  <code>property</code> <code>writable</code>","text":"A list of LFs to which the explorer can be lazily synchronized. <p>Intended for recipes where the user can modify LFs without having access to the explorer.</p>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.__init__","title":"<code>__init__(self, df_dict, **kwargs)</code>  <code>special</code>","text":"Additional construtor <p>Set up</p> <ul> <li>a list to keep track of plotted labeling functions.</li> <li>a palette for plotting labeling function predictions.</li> </ul> Param Type Description <code>df_dict</code> <code>dict</code> <code>str</code> -&gt; <code>DataFrame</code> mapping <code>**kwargs</code> forwarded to <code>bokeh.plotting.figure</code> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def __init__(self, df_dict, **kwargs):\n\"\"\"\n    ???+ note \"Additional construtor\"\n        Set up\n\n        -   a list to keep track of plotted labeling functions.\n        -   a palette for plotting labeling function predictions.\n\n        | Param       | Type   | Description                  |\n        | :---------- | :----- | :--------------------------- |\n        | `df_dict`   | `dict` | `str` -&gt; `DataFrame` mapping |\n        | `**kwargs`  |        | forwarded to `bokeh.plotting.figure` |\n    \"\"\"\n    super().__init__(df_dict, **kwargs)\n    self.palette = list(Category20[20])\n    self._subscribed_lf_list = None\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.plot","title":"<code>plot(self, *args, **kwargs)</code>","text":"Plot the raw subset in the background. Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def plot(self, *args, **kwargs):\n\"\"\"\n    ???+ note \"Plot the raw subset in the background.\"\n    \"\"\"\n    xy_axes = self.find_embedding_fields()[:2]\n    self.figure.circle(\n        *xy_axes, name=\"raw\", source=self.sources[\"raw\"], **self.glyph_kwargs[\"raw\"]\n    )\n    self._good(f\"Plotted subset raw with {self.dfs['raw'].shape[0]} points\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.plot_lf","title":"<code>plot_lf(self, lf, **kwargs)</code>","text":"Add or refresh a single labeling function on the plot. Param Type Description <code>lf</code> <code>callable</code> labeling function decorated by <code>@labeling_function()</code> from <code>hover.utils.snorkel_helper</code> <code>**kwargs</code> forwarded to <code>self.plot_new_lf()</code> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def plot_lf(self, lf, **kwargs):\n\"\"\"\n    ???+ note \"Add or refresh a single labeling function on the plot.\"\n        | Param       | Type             | Description                  |\n        | :---------- | :--------------- | :--------------------------- |\n        | `lf`        | `callable`       | labeling function decorated by `@labeling_function()` from `hover.utils.snorkel_helper` |\n        | `**kwargs`  |             | forwarded to `self.plot_new_lf()` |\n    \"\"\"\n    # keep track of added LF\n    if lf.name in self.lf_data:\n        # skip if the functions are identical\n        if self.lf_data[lf.name][\"lf\"] is lf:\n            return\n        # overwrite the function and refresh glyphs\n        self.lf_data[lf.name][\"lf\"] = lf\n        self.refresh_glyphs(lf.name)\n        return\n\n    self.plot_new_lf(lf, **kwargs)\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.plot_new_lf","title":"<code>plot_new_lf(self, lf, L_raw=None, L_labeled=None, include=('C', 'I', 'M'), **kwargs)</code>","text":"Plot a single labeling function and keep its settings for update. Param Type Description <code>lf</code> <code>callable</code> labeling function decorated by <code>@labeling_function()</code> from <code>hover.utils.snorkel_helper</code> <code>L_raw</code> <code>np.ndarray</code> predictions, in decoded <code>str</code>, on the <code>\"raw\"</code> set <code>L_labeled</code> <code>np.ndarray</code> predictions, in decoded <code>str</code>, on the <code>\"labeled\"</code> set <code>include</code> <code>tuple</code> of <code>str</code> \"C\" for correct, \"I\" for incorrect, \"M\" for missed\", \"H\" for hit: types of predictions to make visible in the plot <code>**kwargs</code> forwarded to plotting markers <ul> <li>lf: labeling function decorated by <code>@labeling_function()</code> from <code>hover.utils.snorkel_helper</code></li> <li>L_raw: numpy.ndarray</li> <li>L_labeled: numpy.ndarray</li> <li>include: subsets to show, which can be correct(C)/incorrect(I)/missed(M)/hit(H).</li> </ul> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def plot_new_lf(\n    self, lf, L_raw=None, L_labeled=None, include=(\"C\", \"I\", \"M\"), **kwargs\n):\n\"\"\"\n    ???+ note \"Plot a single labeling function and keep its settings for update.\"\n        | Param       | Type             | Description                  |\n        | :---------- | :--------------- | :--------------------------- |\n        | `lf`        | `callable`       | labeling function decorated by `@labeling_function()` from `hover.utils.snorkel_helper` |\n        | `L_raw`     | `np.ndarray`     | predictions, in decoded `str`, on the `\"raw\"` set |\n        | `L_labeled` | `np.ndarray`     | predictions, in decoded `str`, on the `\"labeled\"` set |\n        | `include`   | `tuple` of `str` | \"C\" for correct, \"I\" for incorrect, \"M\" for missed\", \"H\" for hit: types of predictions to make visible in the plot |\n        | `**kwargs`  |                  | forwarded to plotting markers |\n\n\n        - lf: labeling function decorated by `@labeling_function()` from `hover.utils.snorkel_helper`\n        - L_raw: numpy.ndarray\n        - L_labeled: numpy.ndarray\n        - include: subsets to show, which can be correct(C)/incorrect(I)/missed(M)/hit(H).\n    \"\"\"\n    # existing LF should not trigger this method\n    assert lf.name not in self.lf_data, f\"LF collision: {lf.name}\"\n\n    # calculate predicted labels if not provided\n    if L_raw is None:\n        L_raw = self.dfs[\"raw\"].apply(lf, axis=1).values\n    if L_labeled is None:\n        L_labeled = self.dfs[\"labeled\"].apply(lf, axis=1).values\n\n    # prepare plot settings\n    assert self.palette, f\"Palette depleted, # LFs: {len(self.lf_data)}\"\n    legend_label = lf.name\n    color = self.palette.pop(0)\n    xy_axes = self.find_embedding_fields()[:2]\n\n    raw_glyph_kwargs = self.glyph_kwargs[\"raw\"].copy()\n    raw_glyph_kwargs[\"legend_label\"] = legend_label\n    raw_glyph_kwargs[\"color\"] = color\n    raw_glyph_kwargs.update(kwargs)\n\n    labeled_glyph_kwargs = self.glyph_kwargs[\"labeled\"].copy()\n    labeled_glyph_kwargs[\"legend_label\"] = legend_label\n    labeled_glyph_kwargs[\"color\"] = color\n    labeled_glyph_kwargs.update(kwargs)\n\n    # create dictionary to prepare for dynamic lf &amp; glyph updates\n    data_dict = {\"lf\": lf, \"color\": color, \"glyphs\": {}}\n\n    # add correct/incorrect/missed/hit glyphs\n    if \"C\" in include:\n        view = self._view_correct(L_labeled)\n        data_dict[\"glyphs\"][\"C\"] = self.figure.square(\n            *xy_axes,\n            source=self.sources[\"labeled\"],\n            view=view,\n            name=\"labeled\",\n            tags=[lf.name],\n            **labeled_glyph_kwargs,\n        )\n    if \"I\" in include:\n        view = self._view_incorrect(L_labeled)\n        data_dict[\"glyphs\"][\"I\"] = self.figure.x(\n            *xy_axes,\n            source=self.sources[\"labeled\"],\n            view=view,\n            name=\"labeled\",\n            tags=[lf.name],\n            **labeled_glyph_kwargs,\n        )\n    if \"M\" in include:\n        view = self._view_missed(L_labeled, lf.targets)\n        data_dict[\"glyphs\"][\"M\"] = self.figure.cross(\n            *xy_axes,\n            source=self.sources[\"labeled\"],\n            view=view,\n            name=\"labeled\",\n            tags=[lf.name],\n            **labeled_glyph_kwargs,\n        )\n    if \"H\" in include:\n        view = self._view_hit(L_raw)\n        data_dict[\"glyphs\"][\"H\"] = self.figure.circle(\n            *xy_axes,\n            source=self.sources[\"raw\"],\n            view=view,\n            name=\"raw\",\n            tags=[lf.name],\n            **raw_glyph_kwargs,\n        )\n\n    # assign the completed dictionary\n    self.lf_data[lf.name] = data_dict\n    # reflect LF update in widgets\n    self._callback_refresh_lf_menu()\n\n    self._good(f\"Plotted new LF {lf.name}\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.refresh_glyphs","title":"<code>refresh_glyphs(self, lf_name)</code>","text":"Refresh the glyph(s) of a single LF based on its name. Param Type Description <code>lf_name</code> <code>str</code> name of labeling function <p>Assumes that specified C/I/M/H glyphs are stored. 1. re-compute L_raw/L_labeled and CDSViews 2. update the view for each glyph</p> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def refresh_glyphs(self, lf_name):\n\"\"\"\n    ???+ note \"Refresh the glyph(s) of a single LF based on its name.\"\n        | Param     | Type   | Description               |\n        | :-------- | :----- | :------------------------ |\n        | `lf_name` | `str`  | name of labeling function |\n\n        Assumes that specified C/I/M/H glyphs are stored.\n        1. re-compute L_raw/L_labeled and CDSViews\n        2. update the view for each glyph\n    \"\"\"\n    assert lf_name in self.lf_data, f\"trying to refresh non-existing LF: {lf_name}\"\n\n    lf = self.lf_data[lf_name][\"lf\"]\n    L_raw = self.dfs[\"raw\"].apply(lf, axis=1).values\n    L_labeled = self.dfs[\"labeled\"].apply(lf, axis=1).values\n\n    glyph_codes = self.lf_data[lf_name][\"glyphs\"].keys()\n    if \"C\" in glyph_codes:\n        c_view = self._view_correct(L_labeled)\n        self.lf_data[lf_name][\"glyphs\"][\"C\"].view = c_view\n    if \"I\" in glyph_codes:\n        i_view = self._view_incorrect(L_labeled)\n        self.lf_data[lf_name][\"glyphs\"][\"I\"].view = i_view\n    if \"M\" in glyph_codes:\n        m_view = self._view_missed(L_labeled, lf.targets)\n        self.lf_data[lf_name][\"glyphs\"][\"M\"].view = m_view\n    if \"H\" in glyph_codes:\n        h_view = self._view_hit(L_raw)\n        self.lf_data[lf_name][\"glyphs\"][\"H\"].view = h_view\n\n    self._good(f\"Refreshed the glyphs of LF {lf_name}\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.unplot_lf","title":"<code>unplot_lf(self, lf_name)</code>","text":"Remove a single labeling function from the plot. Param Type Description <code>lf_name</code> <code>str</code> name of labeling function Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def unplot_lf(self, lf_name):\n\"\"\"\n    ???+ note \"Remove a single labeling function from the plot.\"\n        | Param     | Type   | Description               |\n        | :-------- | :----- | :------------------------ |\n        | `lf_name` | `str`  | name of labeling function |\n    \"\"\"\n    assert lf_name in self.lf_data, f\"trying to remove non-existing LF: {lf_name}\"\n\n    data_dict = self.lf_data.pop(lf_name)\n    lf, glyph_dict = data_dict[\"lf\"], data_dict[\"glyphs\"]\n    assert lf.name == lf_name, f\"LF name mismatch: {lf.name} vs {lf_name}\"\n\n    # remove from legend, checking that there is exactly one entry\n    legend_idx_to_pop = None\n    for i, _item in enumerate(self.figure.legend.items):\n        _label = _item.label.value\n        if _label == lf_name:\n            assert legend_idx_to_pop is None, f\"Legend collision: {lf_name}\"\n            legend_idx_to_pop = i\n    assert isinstance(legend_idx_to_pop, int), f\"Missing from legend: {lf_name}\"\n    self.figure.legend.items.pop(legend_idx_to_pop)\n\n    # remove from renderers\n    # get indices to pop in ascending order\n    renderer_indices_to_pop = []\n    for i, _renderer in enumerate(self.figure.renderers):\n        if lf_name in _renderer.glyph.tags:\n            renderer_indices_to_pop.append(i)\n    # check that the number of glyphs founded matches expected value\n    num_fnd, num_exp = len(renderer_indices_to_pop), len(glyph_dict)\n    assert num_fnd == num_exp, f\"Glyph mismatch: {num_fnd} vs. {num_exp}\"\n    # process indices in descending order to avoid shifts\n    for i in renderer_indices_to_pop[::-1]:\n        self.figure.renderers.pop(i)\n\n    # return color to palette so that another LF can use it\n    self.palette.append(data_dict[\"color\"])\n\n    self._callback_refresh_lf_menu()\n    self._good(f\"Unplotted LF {lf_name}\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSoftLabelExplorer","title":"<code> BokehSoftLabelExplorer            (BokehBaseExplorer)         </code>","text":"Plot data points according to their labels and confidence scores. <p>Features:</p> <ul> <li>the predicted label will correspond to fill_color.</li> <li>the confidence score, assumed to be a float between 0.0 and 1.0, will be reflected through fill_alpha.</li> <li>currently not considering multi-label scenarios.</li> </ul> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>class BokehSoftLabelExplorer(BokehBaseExplorer):\n\"\"\"\n    ???+ note \"Plot data points according to their labels and confidence scores.\"\n\n        Features:\n\n        - the predicted label will correspond to fill_color.\n        - the confidence score, assumed to be a float between 0.0 and 1.0, will be reflected through fill_alpha.\n        - currently not considering multi-label scenarios.\n    \"\"\"\n\n    SUBSET_GLYPH_KWARGS = {\n        _key: {\"constant\": {\"line_alpha\": 0.5}, \"search\": {\"size\": (\"size\", 10, 5, 7)}}\n        for _key in [\"raw\", \"train\", \"dev\"]\n    }\n    DEFAULT_SUBSET_MAPPING = {_k: _k for _k in [\"raw\", \"train\", \"dev\"]}\n\n    def __init__(self, df_dict, label_col, score_col, **kwargs):\n\"\"\"\n        ???+ note \"Additional construtor\"\n            On top of the requirements of the parent class,\n            the input dataframe should contain:\n\n            - label_col and score_col for \"soft predictions\".\n\n            | Param       | Type   | Description                  |\n            | :---------- | :----- | :--------------------------- |\n            | `df_dict`   | `dict` | `str` -&gt; `DataFrame` mapping |\n            | `label_col` | `str`  | column for the soft label    |\n            | `score_col` | `str`  | column for the soft score    |\n            | `**kwargs`  |        | forwarded to `bokeh.plotting.figure` |\n        \"\"\"\n        assert label_col != \"label\", \"'label' field is reserved\"\n        self.label_col = label_col\n        self.score_col = score_col\n        super().__init__(df_dict, **kwargs)\n\n    def _build_tooltip(self, specified):\n\"\"\"\n        ???+ note \"On top of the parent method, add the soft label fields to the tooltip.\"\n            | Param            | Type   | Description                  |\n            | :--------------- | :----- | :--------------------------- |\n            | `specified`      | `str`  | user-specified HTML          |\n\n            Note that this is a method rather than a class attribute because\n            child classes may involve instance attributes in the tooltip.\n        \"\"\"\n        if not specified:\n            return bokeh_hover_tooltip(\n                **self.__class__.TOOLTIP_KWARGS,\n                custom={self.label_col: \"Soft Label\", self.score_col: \"Soft Score\"},\n            )\n        return specified\n\n    def _mandatory_column_defaults(self):\n\"\"\"\n        ???+ note \"Mandatory columns and default values.\"\n\n            If default value is None, will raise exception if the column is not found.\n        \"\"\"\n        column_to_value = super()._mandatory_column_defaults()\n        column_to_value.update(\n            {\n                self.label_col: module_config.ABSTAIN_DECODED,\n                self.score_col: 0.5,\n            }\n        )\n        return column_to_value\n\n    def _postprocess_sources(self):\n\"\"\"\n        ???+ note \"Infer glyph colors from the label dynamically.\"\n        \"\"\"\n        # infer glyph color from labels\n        color_dict = self.auto_color_mapping()\n\n        def get_color(label):\n            return color_dict.get(label, \"gainsboro\")\n\n        # infer glyph alpha from pseudo-percentile of soft label scores\n        scores = np.concatenate(\n            [_df[self.score_col].tolist() for _df in self.dfs.values()]\n        )\n        scores_mean = scores.mean()\n        scores_std = scores.std() + 1e-4\n\n        def pseudo_percentile(confidence, lower=0.1, upper=0.9):\n            # pretend that 2*std on each side covers everything\n            unit_shift = upper - lower / 4\n            # shift = unit_shift * z_score\n            shift = unit_shift * (confidence - scores_mean) / scores_std\n            percentile = 0.5 + shift\n            return min(upper, max(lower, percentile))\n\n        # infer alpha from score percentiles\n        for _key, _df in self.dfs.items():\n            _color = _df[self.label_col].apply(get_color).tolist()\n            _alpha = _df[self.score_col].apply(pseudo_percentile).tolist()\n            self.sources[_key].add(_color, SOURCE_COLOR_FIELD)\n            self.sources[_key].add(_alpha, SOURCE_ALPHA_FIELD)\n\n    def _setup_widgets(self):\n\"\"\"\n        ???+ note \"Create score range slider that filters selections.\"\n        \"\"\"\n        from bokeh.models import RangeSlider, CheckboxGroup\n\n        super()._setup_widgets()\n\n        self.score_range = RangeSlider(\n            start=0.0,\n            end=1.0,\n            value=(0.0, 1.0),\n            step=0.01,\n            title=\"Score range\",\n        )\n        self.score_filter_box = CheckboxGroup(\n            labels=[\"use as selection filter\"], active=[]\n        )\n        self.score_filter = row(self.score_range, self.score_filter_box)\n\n        def filter_flag():\n            return bool(0 in self.score_filter_box.active)\n\n        def subroutine(df, lower, upper):\n\"\"\"\n            Calculate indices with score between lower/upper bounds.\n            \"\"\"\n            keep_l = set(np.where(df[self.score_col] &gt;= lower)[0])\n            keep_u = set(np.where(df[self.score_col] &lt;= upper)[0])\n            kept = keep_l.intersection(keep_u)\n            return kept\n\n        def filter_by_score(indices, subset):\n\"\"\"\n            Filter selection with slider range on a subset.\n            \"\"\"\n            if not filter_flag():\n                return indices\n\n            in_range = subroutine(self.dfs[subset], *self.score_range.value)\n            return indices.intersection(in_range)\n\n        # selection change triggers score filter on the changed subset IFF filter box is toggled\n        for _key in self.sources.keys():\n            self._selection_filters[_key].data.add(filter_by_score)\n\n        # when toggled as active, score range change triggers selection filter\n        self.score_range.on_change(\n            \"value\",\n            lambda attr, old, new: self._selection_stages_callback(\n                \"load\", \"write\", \"read\"\n            )\n            if filter_flag()\n            else None,\n        )\n\n        # changing toggles always re-evaluate selection filter\n        self.score_filter_box.on_change(\n            \"active\",\n            lambda attr, old, new: self._selection_stages_callback(\n                \"load\", \"write\", \"read\"\n            ),\n        )\n\n    def plot(self, **kwargs):\n\"\"\"\n        ???+ note \"Plot all data points, setting color alpha based on the soft score.\"\n            | Param      | Type   | Description                  |\n            | :--------- | :----- | :--------------------------- |\n            | `**kwargs` |        | forwarded to plotting markers |\n        \"\"\"\n        xy_axes = self.find_embedding_fields()[:2]\n        for _key, _source in self.sources.items():\n            # prepare plot settings\n            preset_kwargs = {\n                \"color\": SOURCE_COLOR_FIELD,\n                \"fill_alpha\": SOURCE_ALPHA_FIELD,\n            }\n            eff_kwargs = self.glyph_kwargs[_key].copy()\n            eff_kwargs.update(preset_kwargs)\n            eff_kwargs.update(kwargs)\n\n            self.figure.circle(*xy_axes, name=_key, source=_source, **eff_kwargs)\n            self._good(f\"Plotted subset {_key} with {self.dfs[_key].shape[0]} points\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSoftLabelExplorer.__init__","title":"<code>__init__(self, df_dict, label_col, score_col, **kwargs)</code>  <code>special</code>","text":"Additional construtor <p>On top of the requirements of the parent class, the input dataframe should contain:</p> <ul> <li>label_col and score_col for \"soft predictions\".</li> </ul> Param Type Description <code>df_dict</code> <code>dict</code> <code>str</code> -&gt; <code>DataFrame</code> mapping <code>label_col</code> <code>str</code> column for the soft label <code>score_col</code> <code>str</code> column for the soft score <code>**kwargs</code> forwarded to <code>bokeh.plotting.figure</code> Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def __init__(self, df_dict, label_col, score_col, **kwargs):\n\"\"\"\n    ???+ note \"Additional construtor\"\n        On top of the requirements of the parent class,\n        the input dataframe should contain:\n\n        - label_col and score_col for \"soft predictions\".\n\n        | Param       | Type   | Description                  |\n        | :---------- | :----- | :--------------------------- |\n        | `df_dict`   | `dict` | `str` -&gt; `DataFrame` mapping |\n        | `label_col` | `str`  | column for the soft label    |\n        | `score_col` | `str`  | column for the soft score    |\n        | `**kwargs`  |        | forwarded to `bokeh.plotting.figure` |\n    \"\"\"\n    assert label_col != \"label\", \"'label' field is reserved\"\n    self.label_col = label_col\n    self.score_col = score_col\n    super().__init__(df_dict, **kwargs)\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSoftLabelExplorer.plot","title":"<code>plot(self, **kwargs)</code>","text":"Plot all data points, setting color alpha based on the soft score. Param Type Description <code>**kwargs</code> forwarded to plotting markers Source code in <code>hover/core/explorer/functionality.py</code> <pre><code>def plot(self, **kwargs):\n\"\"\"\n    ???+ note \"Plot all data points, setting color alpha based on the soft score.\"\n        | Param      | Type   | Description                  |\n        | :--------- | :----- | :--------------------------- |\n        | `**kwargs` |        | forwarded to plotting markers |\n    \"\"\"\n    xy_axes = self.find_embedding_fields()[:2]\n    for _key, _source in self.sources.items():\n        # prepare plot settings\n        preset_kwargs = {\n            \"color\": SOURCE_COLOR_FIELD,\n            \"fill_alpha\": SOURCE_ALPHA_FIELD,\n        }\n        eff_kwargs = self.glyph_kwargs[_key].copy()\n        eff_kwargs.update(preset_kwargs)\n        eff_kwargs.update(kwargs)\n\n        self.figure.circle(*xy_axes, name=_key, source=_source, **eff_kwargs)\n        self._good(f\"Plotted subset {_key} with {self.dfs[_key].shape[0]} points\")\n</code></pre>"},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehDataAnnotator","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehDataAnnotator.plot","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehDataFinder","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehDataFinder.plot","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehMarginExplorer","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehMarginExplorer.__init__","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehMarginExplorer.plot","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.subscribed_lf_list","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.__init__","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.plot","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.plot_lf","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.plot_new_lf","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.refresh_glyphs","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSnorkelExplorer.unplot_lf","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSoftLabelExplorer","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSoftLabelExplorer.__init__","title":".functionality","text":""},{"location":"pages/reference/core-explorer-functionality/#hover.core.explorer.functionality.BokehSoftLabelExplorer.plot","title":".functionality","text":""},{"location":"pages/reference/core-explorer-specialization/","title":".specialization","text":"<ul> <li> Child classes which are <code>functionality</code>-by-<code>feature</code> products. <p>This could resemble template specialization in C++.</p> </li> </ul>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioAnnotator","title":"<code> BokehAudioAnnotator            (BokehDataAnnotator, BokehForAudio)         </code>","text":"The audio flavor of <code>BokehDataAnnotator</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehAudioAnnotator(BokehDataAnnotator, BokehForAudio):\n\"\"\"\n    ???+ note \"The audio flavor of `BokehDataAnnotator`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForAudio.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForAudio.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehDataAnnotator.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_sim, self.search_threshold),\n            row(self.annotator_input, self.annotator_apply),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioFinder","title":"<code> BokehAudioFinder            (BokehDataFinder, BokehForAudio)         </code>","text":"The audio flavor of <code>BokehDataFinder</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehAudioFinder(BokehDataFinder, BokehForAudio):\n\"\"\"\n    ???+ note \"The audio flavor of `BokehDataFinder`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForAudio.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForAudio.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehDataFinder.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(\n                column(self.search_sim, self.search_threshold),\n                column(self.search_filter_box),\n            ),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioMargin","title":"<code> BokehAudioMargin            (BokehMarginExplorer, BokehForAudio)         </code>","text":"The audio flavor of <code>BokehMarginExplorer</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehAudioMargin(BokehMarginExplorer, BokehForAudio):\n\"\"\"\n    ???+ note \"The audio flavor of `BokehMarginExplorer`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForAudio.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForAudio.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehMarginExplorer.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_sim, self.search_threshold),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioSnorkel","title":"<code> BokehAudioSnorkel            (BokehSnorkelExplorer, BokehForAudio)         </code>","text":"The audio flavor of <code>BokehSnorkelExplorer</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehAudioSnorkel(BokehSnorkelExplorer, BokehForAudio):\n\"\"\"\n    ???+ note \"The audio flavor of `BokehSnorkelExplorer`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForAudio.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForAudio.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehSnorkelExplorer.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_sim, self.search_threshold),\n            row(self.lf_apply_trigger, self.lf_filter_trigger, self.lf_list_refresher),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioSoftLabel","title":"<code> BokehAudioSoftLabel            (BokehSoftLabelExplorer, BokehForAudio)         </code>","text":"The audio flavor of <code>BokehSoftLabelExplorer</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehAudioSoftLabel(BokehSoftLabelExplorer, BokehForAudio):\n\"\"\"\n    ???+ note \"The audio flavor of `BokehSoftLabelExplorer`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForAudio.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForAudio.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehSoftLabelExplorer.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_sim, self.search_threshold),\n            row(self.score_filter),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageAnnotator","title":"<code> BokehImageAnnotator            (BokehDataAnnotator, BokehForImage)         </code>","text":"The image flavor of <code>BokehDataAnnotator</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehImageAnnotator(BokehDataAnnotator, BokehForImage):\n\"\"\"\n    ???+ note \"The image flavor of `BokehDataAnnotator`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForImage.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForImage.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehDataAnnotator.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_sim, self.search_threshold),\n            row(self.annotator_input, self.annotator_apply),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageFinder","title":"<code> BokehImageFinder            (BokehDataFinder, BokehForImage)         </code>","text":"The image flavor of <code>BokehDataFinder</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehImageFinder(BokehDataFinder, BokehForImage):\n\"\"\"\n    ???+ note \"The image flavor of `BokehDataFinder`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForImage.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForImage.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehDataFinder.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(\n                column(self.search_sim, self.search_threshold),\n                column(self.search_filter_box),\n            ),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageMargin","title":"<code> BokehImageMargin            (BokehMarginExplorer, BokehForImage)         </code>","text":"The image flavor of <code>BokehMarginExplorer</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehImageMargin(BokehMarginExplorer, BokehForImage):\n\"\"\"\n    ???+ note \"The image flavor of `BokehMarginExplorer`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForImage.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForImage.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehMarginExplorer.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_sim, self.search_threshold),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageSnorkel","title":"<code> BokehImageSnorkel            (BokehSnorkelExplorer, BokehForImage)         </code>","text":"The image flavor of <code>BokehSnorkelExplorer</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehImageSnorkel(BokehSnorkelExplorer, BokehForImage):\n\"\"\"\n    ???+ note \"The image flavor of `BokehSnorkelExplorer`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForImage.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForImage.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehSnorkelExplorer.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_sim, self.search_threshold),\n            row(self.lf_apply_trigger, self.lf_filter_trigger, self.lf_list_refresher),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageSoftLabel","title":"<code> BokehImageSoftLabel            (BokehSoftLabelExplorer, BokehForImage)         </code>","text":"The image flavor of <code>BokehSoftLabelExplorer</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehImageSoftLabel(BokehSoftLabelExplorer, BokehForImage):\n\"\"\"\n    ???+ note \"The image flavor of `BokehSoftLabelExplorer`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForImage.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForImage.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehSoftLabelExplorer.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_sim, self.search_threshold),\n            row(self.score_filter),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextAnnotator","title":"<code> BokehTextAnnotator            (BokehDataAnnotator, BokehForText)         </code>","text":"The text flavor of <code>BokehDataAnnotator</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehTextAnnotator(BokehDataAnnotator, BokehForText):\n\"\"\"\n    ???+ note \"The text flavor of `BokehDataAnnotator`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForText.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForText.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehDataAnnotator.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_pos, self.search_neg),\n            row(self.annotator_input, self.annotator_apply),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextFinder","title":"<code> BokehTextFinder            (BokehDataFinder, BokehForText)         </code>","text":"The text flavor of <code>BokehDataFinder</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehTextFinder(BokehDataFinder, BokehForText):\n\"\"\"\n    ???+ note \"The text flavor of `BokehDataFinder`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForText.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForText.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehDataFinder.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(\n                column(self.search_pos, self.search_neg),\n                column(self.search_filter_box),\n            ),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextMargin","title":"<code> BokehTextMargin            (BokehMarginExplorer, BokehForText)         </code>","text":"The text flavor of <code>BokehMarginExplorer</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehTextMargin(BokehMarginExplorer, BokehForText):\n\"\"\"\n    ???+ note \"The text flavor of `BokehMarginExplorer`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForText.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForText.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehMarginExplorer.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_pos, self.search_neg),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextSnorkel","title":"<code> BokehTextSnorkel            (BokehSnorkelExplorer, BokehForText)         </code>","text":"The text flavor of <code>BokehSnorkelExplorer</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehTextSnorkel(BokehSnorkelExplorer, BokehForText):\n\"\"\"\n    ???+ note \"The text flavor of `BokehSnorkelExplorer`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForText.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForText.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehSnorkelExplorer.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_pos, self.search_neg),\n            row(self.lf_apply_trigger, self.lf_filter_trigger, self.lf_list_refresher),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextSoftLabel","title":"<code> BokehTextSoftLabel            (BokehSoftLabelExplorer, BokehForText)         </code>","text":"The text flavor of <code>BokehSoftLabelExplorer</code>.\" Source code in <code>hover/core/explorer/specialization.py</code> <pre><code>class BokehTextSoftLabel(BokehSoftLabelExplorer, BokehForText):\n\"\"\"\n    ???+ note \"The text flavor of `BokehSoftLabelExplorer`.\"\"\n    \"\"\"\n\n    TOOLTIP_KWARGS = BokehForText.TOOLTIP_KWARGS\n    MANDATORY_COLUMNS = BokehForText.MANDATORY_COLUMNS\n    SUBSET_GLYPH_KWARGS = BokehSoftLabelExplorer.SUBSET_GLYPH_KWARGS\n\n    def _layout_widgets(self):\n\"\"\"Define the layout of widgets.\"\"\"\n        layout_rows = (\n            row(self.subset_toggle_widget_column, self.selection_option_box),\n            row(self.search_pos, self.search_neg),\n            row(self.score_filter),\n            row(self.dropdown_x_axis, self.dropdown_y_axis),\n            row(*self._dynamic_widgets.values()),\n        )\n        return column(*layout_rows)\n</code></pre>"},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioAnnotator","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioFinder","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioMargin","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioSnorkel","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehAudioSoftLabel","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageAnnotator","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageFinder","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageMargin","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageSnorkel","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehImageSoftLabel","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextAnnotator","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextFinder","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextMargin","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextSnorkel","title":".specialization","text":""},{"location":"pages/reference/core-explorer-specialization/#hover.core.explorer.specialization.BokehTextSoftLabel","title":".specialization","text":""},{"location":"pages/reference/core-neural/","title":"hover.core.neural","text":"<ul> <li> Neural network components. <p><code>torch</code>-based template classes for implementing neural nets that work the most smoothly with <code>hover</code>.</p> </li> </ul>"},{"location":"pages/reference/core-neural/#hover.core.neural.BaseVectorNet","title":"<code> BaseVectorNet            (Loggable)         </code>","text":"Abstract transfer learning model defining common signatures. <p>Intended to define crucial interactions with built-in recipes like <code>hover.recipes.active_learning()</code>.</p> Source code in <code>hover/core/neural.py</code> <pre><code>class BaseVectorNet(Loggable):\n\n\"\"\"\n    ???+ note \"Abstract transfer learning model defining common signatures.\"\n\n        Intended to define crucial interactions with built-in recipes like `hover.recipes.active_learning()`.\n    \"\"\"\n\n    @abstractmethod\n    def predict_proba(self, inps):\n        pass\n\n    @abstractmethod\n    def manifold_trajectory(\n        self, inps, method=None, reducer_kwargs=None, spline_kwargs=None\n    ):\n        pass\n\n    @abstractmethod\n    def prepare_loader(self, dataset, key, **kwargs):\n        pass\n\n    @abstractmethod\n    def train(self, train_loader, dev_loader=None, epochs=None, **kwargs):\n        pass\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet","title":"<code> VectorNet            (BaseVectorNet)         </code>","text":"Simple transfer learning model: a user-supplied vectorizer followed by a neural net. <p>This is a parent class whose children may use different training schemes.</p> <p>Coupled with:</p> <ul> <li><code>hover.utils.torch_helper.VectorDataset</code></li> </ul> Source code in <code>hover/core/neural.py</code> <pre><code>class VectorNet(BaseVectorNet):\n\n\"\"\"\n    ???+ note \"Simple transfer learning model: a user-supplied vectorizer followed by a neural net.\"\n        This is a parent class whose children may use different training schemes.\n\n        Coupled with:\n\n        -   `hover.utils.torch_helper.VectorDataset`\n    \"\"\"\n\n    DEFAULT_OPTIM_CLS = torch.optim.Adam\n    DEFAULT_OPTIM_LOGLR = 2.0\n    DEFAULT_OPTIM_KWARGS = {\"lr\": 0.1**DEFAULT_OPTIM_LOGLR, \"betas\": (0.9, 0.999)}\n\n    def __init__(\n        self,\n        vectorizer,\n        architecture,\n        state_dict_path,\n        labels,\n        backup_state_dict=True,\n        optimizer_cls=None,\n        optimizer_kwargs=None,\n        verbose=0,\n        example_input=\"\",\n    ):\n\"\"\"\n        ???+ note \"Create the `VectorNet`, loading parameters if available.\"\n\n            | Param             | Type       | Description                          |\n            | :---------------- | :--------- | :----------------------------------- |\n            | `vectorizer`      | `callable` | the feature -&gt; vector function       |\n            | `architecture`    | `class`    | a `torch.nn.Module` child class      |\n            | `state_dict_path` | `str`      | path to a (could-be-empty) `torch` state dict |\n            | `labels`          | `list`     | list of `str` classification labels  |\n            | `backup_state_dict` | `bool`   | whether to backup the loaded state dict |\n            | `optimizer_cls`   | `subclass of torch.optim.Optimizer` | pytorch optimizer class |\n            | `optimizer_kwargs`  | `dict`   | pytorch optimizer kwargs             |\n            | `verbose`         | `int`      | logging verbosity level              |\n            | `example_input`   | any        | example input to the vectorizer      |\n        \"\"\"\n\n        assert isinstance(\n            verbose, int\n        ), f\"Expected verbose as int, got {type(verbose)} {verbose}\"\n        self.verbose = verbose\n        self.vectorizer = vectorizer\n        self.example_input = example_input\n        self.architecture = architecture\n        self.setup_label_conversion(labels)\n        self._dynamic_params = {}\n\n        # set a path to store updated parameters\n        self.nn_update_path = state_dict_path\n\n        if backup_state_dict and os.path.isfile(state_dict_path):\n            state_dict_backup_path = f\"{state_dict_path}.{current_time('%Y%m%d%H%M%S')}\"\n            copyfile(state_dict_path, state_dict_backup_path)\n\n        # initialize an optimizer object and a dict to hold dynamic parameters\n        optimizer_cls = optimizer_cls or self.__class__.DEFAULT_OPTIM_CLS\n        optimizer_kwargs = (\n            optimizer_kwargs or self.__class__.DEFAULT_OPTIM_KWARGS.copy()\n        )\n\n        def callback_reset_nn_optimizer():\n\"\"\"\n            Callback function which has access to optimizer init settings.\n            \"\"\"\n            self.nn_optimizer = optimizer_cls(self.nn.parameters())\n            assert isinstance(\n                self.nn_optimizer, torch.optim.Optimizer\n            ), f\"Expected an optimizer, got {type(self.nn_optimizer)}\"\n            self._dynamic_params[\"optimizer\"] = optimizer_kwargs\n\n        self._callback_reset_nn_optimizer = callback_reset_nn_optimizer\n        self.setup_nn(use_existing_state_dict=True)\n        self._setup_widgets()\n\n    def auto_adjust_setup(self, labels, auto_skip=True):\n\"\"\"\n        ???+ note \"Auto-(re)create label encoder/decoder and neural net.\"\n\n            Intended to be called in and out of the constructor.\n\n            | Param             | Type       | Description                          |\n            | :---------------- | :--------- | :----------------------------------- |\n            | `labels`          | `list`     | list of `str` classification labels  |\n            | `auto_skip`       | `bool`     | skip when labels did not change      |\n        \"\"\"\n        # sanity check and skip\n        assert isinstance(labels, list), f\"Expected a list of labels, got {labels}\"\n        # if the sequence of labels matches label encoder exactly, skip\n        label_match_flag = labels == sorted(\n            self.label_encoder.keys(), key=lambda k: self.label_encoder[k]\n        )\n        if auto_skip and label_match_flag:\n            return\n\n        self.setup_label_conversion(labels)\n        self.setup_nn(use_existing_state_dict=False)\n\n        self._good(f\"adjusted to new list of labels: {labels}\")\n\n    def setup_label_conversion(self, labels):\n\"\"\"\n        ???+ note \"Set up label encoder/decoder and number of classes.\"\n\n            | Param             | Type       | Description                          |\n            | :---------------- | :--------- | :----------------------------------- |\n            | `labels`          | `list`     | list of `str` classification labels  |\n        \"\"\"\n        self.label_encoder = {_label: i for i, _label in enumerate(labels)}\n        self.label_decoder = {i: _label for i, _label in enumerate(labels)}\n        self.num_classes = len(self.label_encoder)\n\n    def setup_nn(self, use_existing_state_dict=True):\n\"\"\"\n        ???+ note \"Set up neural network and optimizers.\"\n\n            Intended to be called in and out of the constructor.\n\n            -   will try to load parameters from state dict by default\n            -   option to override and discard previous state dict\n                -   often used when the classification targets have changed\n\n            | Param                     | Type       | Description                          |\n            | :------------------------ | :--------- | :----------------------------------- |\n            | `labels`                  | `list`     | list of `str` classification labels  |\n            | `use_existing_state_dict` | `bool`     | whether to use existing state dict   |\n        \"\"\"\n        # set up vectorizer and the neural network with appropriate dimensions\n        vec_dim = self.vectorizer(self.example_input).shape[0]\n        self.nn = self.architecture(vec_dim, self.num_classes)\n        self._callback_reset_nn_optimizer()\n\n        state_dict_exists = os.path.isfile(self.nn_update_path)\n        # if state dict exists, load it (when consistent) or overwrite\n        if state_dict_exists:\n            if use_existing_state_dict:\n                self.load(self.nn_update_path)\n            else:\n                self.save(self.nn_update_path)\n\n        self._good(f\"reset neural net: in {vec_dim} out {self.num_classes}.\")\n\n    def load(self, load_path=None):\n\"\"\"\n        ???+ note \"Load neural net parameters if possible.\"\n\n            Can be directed to a custom state dict.\n\n            | Param       | Type       | Description                  |\n            | :---------- | :--------- | :--------------------------- |\n            | `load_path` | `str`      | path to a `torch` state dict |\n        \"\"\"\n        load_path = load_path or self.nn_update_path\n        # if the architecture cannot match the state dict, skip the load and warn\n        try:\n            self.nn.load_state_dict(torch.load(load_path))\n            self._info(f\"loaded state dict {load_path}.\")\n        except Exception as e:\n            self._warn(f\"load VectorNet state path failed with {type(e)}: {e}\")\n\n    @classmethod\n    def from_module(cls, model_module, labels, **kwargs):\n\"\"\"\n        ???+ note \"Create a VectorNet model from a loadable module.\"\n\n            | Param          | Type       | Description                          |\n            | :------------- | :--------- | :----------------------------------- |\n            | `model_module` | `module` or `str` | (path to) a local Python workspace module which contains a get_vectorizer() callable, get_architecture() callable, and a get_state_dict_path() callable |\n            | `labels`       | `list`     | list of `str` classification labels  |\n            | `**kwargs`     |      | forwarded to `self.__init__()` constructor |\n        \"\"\"\n        if isinstance(model_module, str):\n            from importlib import import_module\n\n            model_module = import_module(model_module)\n\n        # Load the model by retrieving the inp-to-vec function, architecture, and state dict\n        model = cls(\n            model_module.get_vectorizer(),\n            model_module.get_architecture(),\n            model_module.get_state_dict_path(),\n            labels,\n            **kwargs,\n        )\n\n        return model\n\n    def save(self, save_path=None):\n\"\"\"\n        ???+ note \"Save the current state dict with authorization to overwrite.\"\n            | Param       | Type  | Description                           |\n            | :---------- | :---- | :------------------------------------ |\n            | `save_path` | `str` | option alternative path to state dict |\n        \"\"\"\n        save_path = save_path or self.nn_update_path\n        torch.save(self.nn.state_dict(), save_path)\n        verb = \"overwrote\" if os.path.isfile(save_path) else \"saved\"\n        self._info(f\"{verb} state dict {save_path}.\")\n\n    def _setup_widgets(self):\n\"\"\"\n        ???+ note \"Bokeh widgets for changing hyperparameters through user interaction.\"\n        \"\"\"\n        self.epochs_slider = Slider(start=1, end=50, value=1, step=1, title=\"# epochs\")\n        self.loglr_slider = Slider(\n            title=\"learning rate\",\n            start=1.0,\n            end=7.0,\n            value=self.__class__.DEFAULT_OPTIM_LOGLR,\n            step=0.1,\n            format=CustomJSTickFormatter(code=\"return Math.pow(0.1, tick).toFixed(8)\"),\n        )\n\n        def update_lr(attr, old, new):\n            self._dynamic_params[\"optimizer\"][\"lr\"] = 0.1**self.loglr_slider.value\n\n        self.loglr_slider.on_change(\"value\", update_lr)\n\n    def _layout_widgets(self):\n\"\"\"\n        ???+ note \"Layout of widgets when plotted.\"\n        \"\"\"\n        from bokeh.layouts import row\n\n        return row(self.epochs_slider, self.loglr_slider)\n\n    def view(self):\n\"\"\"\n        ???+ note \"Overall layout when plotted.\"\n        \"\"\"\n        return self._layout_widgets()\n\n    def adjust_optimizer_params(self):\n\"\"\"\n        ???+ note \"Dynamically change parameters of the neural net optimizer.\"\n\n            - Intended to be polymorphic in child classes and to be called per epoch.\n        \"\"\"\n        for _group in self.nn_optimizer.param_groups:\n            _group.update(self._dynamic_params[\"optimizer\"])\n\n    def predict_proba(self, inps):\n\"\"\"\n        ???+ note \"End-to-end single/multi-piece prediction from inp to class probabilities.\"\n            | Param  | Type    | Description                          |\n            | :----- | :------ | :----------------------------------- |\n            | `inps` | dynamic | (a list of) input features to vectorize |\n        \"\"\"\n        # if the input is a single piece of inp, cast it to a list\n        FLAG_SINGLE = not isinstance(inps, list)\n        if FLAG_SINGLE:\n            inps = [inps]\n\n        # the actual prediction\n        self.nn.eval()\n        vectors = torch.Tensor(np.array([self.vectorizer(_inp) for _inp in inps]))\n        logits = self.nn(vectors)\n        probs = F.softmax(logits, dim=-1).detach().numpy()\n\n        # inverse-cast if applicable\n        if FLAG_SINGLE:\n            probs = probs[0]\n\n        return probs\n\n    def manifold_trajectory(\n        self, inps, method=None, reducer_kwargs=None, spline_kwargs=None\n    ):\n\"\"\"\n        ???+ note \"Compute a propagation trajectory of the dataset manifold through the neural net.\"\n\n            1. vectorize inps\n            2. forward propagate, keeping intermediates\n            3. fit intermediates to N-D manifolds\n            4. fit manifolds using Procrustes shape analysis\n            5. fit shapes to trajectory splines\n\n            | Param    | Type    | Description                          |\n            | :------- | :------ | :----------------------------------- |\n            | `inps`   | dynamic | (a list of) input features to vectorize |\n            | `method` | `str`   | reduction method: `\"umap\"` or `\"ivis\"`  |\n            | `reducer_kwargs` | | kwargs to forward to dimensionality reduction |\n            | `spline_kwargs` | | kwargs to forward to spline calculation |\n        \"\"\"\n        from hover.core.representation.manifold import LayerwiseManifold\n        from hover.core.representation.trajectory import manifold_spline\n\n        if method is None:\n            method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n\n        reducer_kwargs = reducer_kwargs or {}\n        spline_kwargs = spline_kwargs or {}\n\n        # step 1 &amp; 2\n        vectors = torch.Tensor(np.array([self.vectorizer(_inp) for _inp in inps]))\n        self.nn.eval()\n        intermediates = self.nn.eval_per_layer(vectors)\n        intermediates = [_tensor.detach().numpy() for _tensor in intermediates]\n\n        # step 3 &amp; 4\n        LM = LayerwiseManifold(intermediates)\n        LM.unfold(method=method, **reducer_kwargs)\n        seq_arr, disparities = LM.procrustes()\n        seq_arr = np.array(seq_arr)\n\n        # step 5\n        traj_arr = manifold_spline(np.array(seq_arr), **spline_kwargs)\n\n        return traj_arr, seq_arr, disparities\n\n    def prepare_loader(self, dataset, key, **kwargs):\n\"\"\"\n        ???+ note \"Create dataloader from `SupervisableDataset` with implied vectorizer(s).\"\n\n            | Param      | Type  | Description                |\n            | :--------- | :---- | :------------------------- |\n            | `dataset`  | `hover.core.dataset.SupervisableDataset` | the dataset to load |\n            | `key`      | `str` | \"train\", \"dev\", or \"test\"  |\n            | `**kwargs` | | forwarded to `dataset.loader()`  |\n        \"\"\"\n        return dataset.loader(key, self.vectorizer, **kwargs)\n\n    def train(self, train_loader, dev_loader=None, epochs=None):\n\"\"\"\n        ???+ note \"Train the neural network part of the VecNet.\"\n\n            - intended to be coupled with self.train_batch().\n\n            | Param          | Type         | Description                |\n            | :------------- | :----------- | :------------------------- |\n            | `train_loader` | `torch.utils.data.DataLoader` | train set |\n            | `dev_loader`   | `torch.utils.data.DataLoader` | dev set   |\n            | `epochs`       | `int`        | number of epochs to train  |\n        \"\"\"\n        epochs = epochs or self.epochs_slider.value\n\n        train_info = []\n        for epoch_idx in range(epochs):\n            self._dynamic_params[\"epoch\"] = epoch_idx + 1\n            self.train_epoch(train_loader)\n            if dev_loader is not None:\n                dev_loader = train_loader\n            acc, conf_mat = self.evaluate(dev_loader)\n            train_info.append({\"accuracy\": acc, \"confusion_matrix\": conf_mat})\n        return train_info\n\n    def train_epoch(self, train_loader, *args, **kwargs):\n\"\"\"\n        ???+ note \"Train the neural network for one epoch.\"\n\n            - Supports flexible args and kwargs for child classes that may implement self.train() and self.train_batch() differently.\n\n            | Param          | Type         | Description                |\n            | :------------- | :----------- | :------------------------- |\n            | `train_loader` | `torch.utils.data.DataLoader` | train set |\n            | `*args`        | | arguments to forward to `train_batch`   |\n            | `**kwargs`     | | kwargs to forward to `train_batch`      |\n        \"\"\"\n        self.adjust_optimizer_params()\n        for batch_idx, (loaded_input, loaded_output, _) in enumerate(train_loader):\n            self._dynamic_params[\"batch\"] = batch_idx + 1\n            self.train_batch(loaded_input, loaded_output, *args, **kwargs)\n\n    def train_batch(self, loaded_input, loaded_output):\n\"\"\"\n        ???+ note \"Train the neural network for one batch.\"\n\n            | Param           | Type           | Description           |\n            | :-------------- | :------------- | :-------------------- |\n            | `loaded_input`  | `torch.Tensor` | input tensor          |\n            | `loaded_output` | `torch.Tensor` | output tensor         |\n        \"\"\"\n        self.nn.train()\n        input_tensor = loaded_input.float()\n        output_tensor = loaded_output.float()\n\n        # compute logits\n        logits = self.nn(input_tensor)\n        loss = F.cross_entropy(logits, output_tensor)\n\n        self.nn_optimizer.zero_grad()\n        loss.backward()\n        self.nn_optimizer.step()\n\n        if self.verbose &gt; 0:\n            log_info = dict(self._dynamic_params)\n            log_info[\"performance\"] = \"Loss {0:.3f}\".format(loss)\n            self._print(\n                \"{0: &lt;80}\".format(\n                    \"Train: Epoch {epoch} Batch {batch} {performance}\".format(\n                        **log_info\n                    )\n                ),\n                end=\"\\r\",\n            )\n\n    def evaluate(self, dev_loader):\n\"\"\"\n        ???+ note \"Evaluate the VecNet against a dev set.\"\n\n            | Param        | Type         | Description                |\n            | :----------- | :----------- | :------------------------- |\n            | `dev_loader` | `torch.utils.data.DataLoader` | dev set   |\n        \"\"\"\n        self.nn.eval()\n        true = []\n        pred = []\n        for loaded_input, loaded_output, _idx in dev_loader:\n            _input_tensor = loaded_input.float()\n            _output_tensor = loaded_output.float()\n\n            _logits = self.nn(_input_tensor)\n            _true_batch = _output_tensor.argmax(dim=1).detach().numpy()\n            _pred_batch = F.softmax(_logits, dim=1).argmax(dim=1).detach().numpy()\n            true.append(_true_batch)\n            pred.append(_pred_batch)\n        true = np.concatenate(true)\n        pred = np.concatenate(pred)\n        accuracy = classification_accuracy(true, pred)\n        conf_mat = confusion_matrix(true, pred)\n\n        if self.verbose &gt;= 0:\n            log_info = dict(self._dynamic_params)\n            log_info[\"performance\"] = \"Acc {0:.3f}\".format(accuracy)\n            self._info(\n                \"{0: &lt;80}\".format(\n                    \"Eval: Epoch {epoch} {performance}\".format(**log_info)\n                )\n            )\n\n        return accuracy, conf_mat\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.DEFAULT_OPTIM_CLS","title":"<code> DEFAULT_OPTIM_CLS            (Optimizer)         </code>","text":"<p>Implements Adam algorithm.</p> <p>.. math::    \\begin{aligned}         &amp;\\rule{110mm}{0.4pt}                                                                 \\         &amp;\\textbf{input}      : \\gamma \\text{ (lr)}, \\beta_1, \\beta_2             \\text{ (betas)},\\theta_0 \\text{ (params)},f(\\theta) \\text{ (objective)}          \\         &amp;\\hspace{13mm}      \\lambda \\text{ (weight decay)},  : amsgrad                      \\         &amp;\\textbf{initialize} :  m_0 \\leftarrow 0 \\text{ ( first moment)},             v_0\\leftarrow 0 \\text{ (second moment)},: \\widehat{v_0}^{max}\\leftarrow 0\\[-1.ex]         &amp;\\rule{110mm}{0.4pt}                                                                 \\         &amp;\\textbf{for} : t=1 : \\textbf{to} : \\ldots : \\textbf{do}                         \\         &amp;\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\         &amp;\\hspace{5mm}\\textbf{if} : \\lambda \\neq 0                                           \\         &amp;\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\         &amp;\\hspace{5mm}m_t           \\leftarrow   \\beta_1 m_{t-1} + (1 - \\beta_1) g_t          \\         &amp;\\hspace{5mm}v_t           \\leftarrow   \\beta_2 v_{t-1} + (1-\\beta_2) g^2_t          \\         &amp;\\hspace{5mm}\\widehat{m_t} \\leftarrow   m_t/\\big(1-\\beta_1^t \\big)                   \\         &amp;\\hspace{5mm}\\widehat{v_t} \\leftarrow   v_t/\\big(1-\\beta_2^t \\big)                   \\         &amp;\\hspace{5mm}\\textbf{if} : amsgrad                                                  \\         &amp;\\hspace{10mm}\\widehat{v_t}^{max} \\leftarrow \\mathrm{max}(\\widehat{v_t}^{max},             \\widehat{v_t})                                                                   \\         &amp;\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/             \\big(\\sqrt{\\widehat{v_t}^{max}} + \\epsilon \\big)                                 \\         &amp;\\hspace{5mm}\\textbf{else}                                                           \\         &amp;\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/             \\big(\\sqrt{\\widehat{v_t}} + \\epsilon \\big)                                       \\         &amp;\\rule{110mm}{0.4pt}                                                          \\[-1.ex]         &amp;\\bf{return} :  \\theta_t                                                     \\[-1.ex]         &amp;\\rule{110mm}{0.4pt}                                                          \\[-1.ex]    \\end{aligned}</p> <p>For further details regarding the algorithm we refer to <code>Adam: A Method for Stochastic Optimization</code>_.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>iterable</code> <p>iterable of parameters to optimize or dicts defining parameter groups</p> required <code>lr</code> <code>float</code> <p>learning rate (default: 1e-3)</p> <code>0.001</code> <code>betas</code> <code>Tuple[float, float]</code> <p>coefficients used for computing running averages of gradient and its square (default: (0.9, 0.999))</p> <code>(0.9, 0.999)</code> <code>eps</code> <code>float</code> <p>term added to the denominator to improve numerical stability (default: 1e-8)</p> <code>1e-08</code> <code>weight_decay</code> <code>float</code> <p>weight decay (L2 penalty) (default: 0)</p> <code>0</code> <code>amsgrad</code> <code>boolean</code> <p>whether to use the AMSGrad variant of this algorithm from the paper <code>On the Convergence of Adam and Beyond</code>_ (default: False)</p> <code>False</code> <p>.. _Adam: A Method for Stochastic Optimization:     https://arxiv.org/abs/1412.6980 .. _On the Convergence of Adam and Beyond:     https://openreview.net/forum?id=ryQu7f-RZ</p> Source code in <code>hover/core/neural.py</code> <pre><code>class Adam(Optimizer):\nr\"\"\"Implements Adam algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &amp;\\rule{110mm}{0.4pt}                                                                 \\\\\n            &amp;\\textbf{input}      : \\gamma \\text{ (lr)}, \\beta_1, \\beta_2\n                \\text{ (betas)},\\theta_0 \\text{ (params)},f(\\theta) \\text{ (objective)}          \\\\\n            &amp;\\hspace{13mm}      \\lambda \\text{ (weight decay)},  \\: amsgrad                      \\\\\n            &amp;\\textbf{initialize} :  m_0 \\leftarrow 0 \\text{ ( first moment)},\n                v_0\\leftarrow 0 \\text{ (second moment)},\\: \\widehat{v_0}^{max}\\leftarrow 0\\\\[-1.ex]\n            &amp;\\rule{110mm}{0.4pt}                                                                 \\\\\n            &amp;\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &amp;\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &amp;\\hspace{5mm}\\textbf{if} \\: \\lambda \\neq 0                                           \\\\\n            &amp;\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &amp;\\hspace{5mm}m_t           \\leftarrow   \\beta_1 m_{t-1} + (1 - \\beta_1) g_t          \\\\\n            &amp;\\hspace{5mm}v_t           \\leftarrow   \\beta_2 v_{t-1} + (1-\\beta_2) g^2_t          \\\\\n            &amp;\\hspace{5mm}\\widehat{m_t} \\leftarrow   m_t/\\big(1-\\beta_1^t \\big)                   \\\\\n            &amp;\\hspace{5mm}\\widehat{v_t} \\leftarrow   v_t/\\big(1-\\beta_2^t \\big)                   \\\\\n            &amp;\\hspace{5mm}\\textbf{if} \\: amsgrad                                                  \\\\\n            &amp;\\hspace{10mm}\\widehat{v_t}^{max} \\leftarrow \\mathrm{max}(\\widehat{v_t}^{max},\n                \\widehat{v_t})                                                                   \\\\\n            &amp;\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/\n                \\big(\\sqrt{\\widehat{v_t}^{max}} + \\epsilon \\big)                                 \\\\\n            &amp;\\hspace{5mm}\\textbf{else}                                                           \\\\\n            &amp;\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/\n                \\big(\\sqrt{\\widehat{v_t}} + \\epsilon \\big)                                       \\\\\n            &amp;\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &amp;\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &amp;\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to `Adam: A Method for Stochastic Optimization`_.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float, optional): learning rate (default: 1e-3)\n        betas (Tuple[float, float], optional): coefficients used for computing\n            running averages of gradient and its square (default: (0.9, 0.999))\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-8)\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n        amsgrad (boolean, optional): whether to use the AMSGrad variant of this\n            algorithm from the paper `On the Convergence of Adam and Beyond`_\n            (default: False)\n\n    .. _Adam\\: A Method for Stochastic Optimization:\n        https://arxiv.org/abs/1412.6980\n    .. _On the Convergence of Adam and Beyond:\n        https://openreview.net/forum?id=ryQu7f-RZ\n    \"\"\"\n\n    def __init__(self, params, lr=1e-3, betas=(0.9, 0.999), eps=1e-8,\n                 weight_decay=0, amsgrad=False):\n        if not 0.0 &lt;= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 &lt;= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 &lt;= betas[0] &lt; 1.0:\n            raise ValueError(\"Invalid beta parameter at index 0: {}\".format(betas[0]))\n        if not 0.0 &lt;= betas[1] &lt; 1.0:\n            raise ValueError(\"Invalid beta parameter at index 1: {}\".format(betas[1]))\n        if not 0.0 &lt;= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        defaults = dict(lr=lr, betas=betas, eps=eps,\n                        weight_decay=weight_decay, amsgrad=amsgrad)\n        super(Adam, self).__init__(params, defaults)\n\n    def __setstate__(self, state):\n        super(Adam, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('amsgrad', False)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n\"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            exp_avgs = []\n            exp_avg_sqs = []\n            max_exp_avg_sqs = []\n            state_steps = []\n            beta1, beta2 = group['betas']\n\n            for p in group['params']:\n                if p.grad is not None:\n                    params_with_grad.append(p)\n                    if p.grad.is_sparse:\n                        raise RuntimeError('Adam does not support sparse gradients, please consider SparseAdam instead')\n                    grads.append(p.grad)\n\n                    state = self.state[p]\n                    # Lazy state initialization\n                    if len(state) == 0:\n                        state['step'] = 0\n                        # Exponential moving average of gradient values\n                        state['exp_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                        # Exponential moving average of squared gradient values\n                        state['exp_avg_sq'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                        if group['amsgrad']:\n                            # Maintains max of all exp. moving avg. of sq. grad. values\n                            state['max_exp_avg_sq'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                    exp_avgs.append(state['exp_avg'])\n                    exp_avg_sqs.append(state['exp_avg_sq'])\n\n                    if group['amsgrad']:\n                        max_exp_avg_sqs.append(state['max_exp_avg_sq'])\n\n                    # update the steps for each param group update\n                    state['step'] += 1\n                    # record the step after step update\n                    state_steps.append(state['step'])\n\n            F.adam(params_with_grad,\n                   grads,\n                   exp_avgs,\n                   exp_avg_sqs,\n                   max_exp_avg_sqs,\n                   state_steps,\n                   amsgrad=group['amsgrad'],\n                   beta1=beta1,\n                   beta2=beta2,\n                   lr=group['lr'],\n                   weight_decay=group['weight_decay'],\n                   eps=group['eps'])\n        return loss\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.DEFAULT_OPTIM_CLS.step","title":"<code>step(self, closure=None)</code>","text":"<p>Performs a single optimization step.</p> <p>Parameters:</p> Name Type Description Default <code>closure</code> <code>callable</code> <p>A closure that reevaluates the model and returns the loss.</p> <code>None</code> Source code in <code>hover/core/neural.py</code> <pre><code>@torch.no_grad()\ndef step(self, closure=None):\n\"\"\"Performs a single optimization step.\n\n    Args:\n        closure (callable, optional): A closure that reevaluates the model\n            and returns the loss.\n    \"\"\"\n    loss = None\n    if closure is not None:\n        with torch.enable_grad():\n            loss = closure()\n\n    for group in self.param_groups:\n        params_with_grad = []\n        grads = []\n        exp_avgs = []\n        exp_avg_sqs = []\n        max_exp_avg_sqs = []\n        state_steps = []\n        beta1, beta2 = group['betas']\n\n        for p in group['params']:\n            if p.grad is not None:\n                params_with_grad.append(p)\n                if p.grad.is_sparse:\n                    raise RuntimeError('Adam does not support sparse gradients, please consider SparseAdam instead')\n                grads.append(p.grad)\n\n                state = self.state[p]\n                # Lazy state initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    # Exponential moving average of gradient values\n                    state['exp_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    # Exponential moving average of squared gradient values\n                    state['exp_avg_sq'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['amsgrad']:\n                        # Maintains max of all exp. moving avg. of sq. grad. values\n                        state['max_exp_avg_sq'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                exp_avgs.append(state['exp_avg'])\n                exp_avg_sqs.append(state['exp_avg_sq'])\n\n                if group['amsgrad']:\n                    max_exp_avg_sqs.append(state['max_exp_avg_sq'])\n\n                # update the steps for each param group update\n                state['step'] += 1\n                # record the step after step update\n                state_steps.append(state['step'])\n\n        F.adam(params_with_grad,\n               grads,\n               exp_avgs,\n               exp_avg_sqs,\n               max_exp_avg_sqs,\n               state_steps,\n               amsgrad=group['amsgrad'],\n               beta1=beta1,\n               beta2=beta2,\n               lr=group['lr'],\n               weight_decay=group['weight_decay'],\n               eps=group['eps'])\n    return loss\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.__init__","title":"<code>__init__(self, vectorizer, architecture, state_dict_path, labels, backup_state_dict=True, optimizer_cls=None, optimizer_kwargs=None, verbose=0, example_input='')</code>  <code>special</code>","text":"Create the <code>VectorNet</code>, loading parameters if available. Param Type Description <code>vectorizer</code> <code>callable</code> the feature -&gt; vector function <code>architecture</code> <code>class</code> a <code>torch.nn.Module</code> child class <code>state_dict_path</code> <code>str</code> path to a (could-be-empty) <code>torch</code> state dict <code>labels</code> <code>list</code> list of <code>str</code> classification labels <code>backup_state_dict</code> <code>bool</code> whether to backup the loaded state dict <code>optimizer_cls</code> <code>subclass of torch.optim.Optimizer</code> pytorch optimizer class <code>optimizer_kwargs</code> <code>dict</code> pytorch optimizer kwargs <code>verbose</code> <code>int</code> logging verbosity level <code>example_input</code> any example input to the vectorizer Source code in <code>hover/core/neural.py</code> <pre><code>def __init__(\n    self,\n    vectorizer,\n    architecture,\n    state_dict_path,\n    labels,\n    backup_state_dict=True,\n    optimizer_cls=None,\n    optimizer_kwargs=None,\n    verbose=0,\n    example_input=\"\",\n):\n\"\"\"\n    ???+ note \"Create the `VectorNet`, loading parameters if available.\"\n\n        | Param             | Type       | Description                          |\n        | :---------------- | :--------- | :----------------------------------- |\n        | `vectorizer`      | `callable` | the feature -&gt; vector function       |\n        | `architecture`    | `class`    | a `torch.nn.Module` child class      |\n        | `state_dict_path` | `str`      | path to a (could-be-empty) `torch` state dict |\n        | `labels`          | `list`     | list of `str` classification labels  |\n        | `backup_state_dict` | `bool`   | whether to backup the loaded state dict |\n        | `optimizer_cls`   | `subclass of torch.optim.Optimizer` | pytorch optimizer class |\n        | `optimizer_kwargs`  | `dict`   | pytorch optimizer kwargs             |\n        | `verbose`         | `int`      | logging verbosity level              |\n        | `example_input`   | any        | example input to the vectorizer      |\n    \"\"\"\n\n    assert isinstance(\n        verbose, int\n    ), f\"Expected verbose as int, got {type(verbose)} {verbose}\"\n    self.verbose = verbose\n    self.vectorizer = vectorizer\n    self.example_input = example_input\n    self.architecture = architecture\n    self.setup_label_conversion(labels)\n    self._dynamic_params = {}\n\n    # set a path to store updated parameters\n    self.nn_update_path = state_dict_path\n\n    if backup_state_dict and os.path.isfile(state_dict_path):\n        state_dict_backup_path = f\"{state_dict_path}.{current_time('%Y%m%d%H%M%S')}\"\n        copyfile(state_dict_path, state_dict_backup_path)\n\n    # initialize an optimizer object and a dict to hold dynamic parameters\n    optimizer_cls = optimizer_cls or self.__class__.DEFAULT_OPTIM_CLS\n    optimizer_kwargs = (\n        optimizer_kwargs or self.__class__.DEFAULT_OPTIM_KWARGS.copy()\n    )\n\n    def callback_reset_nn_optimizer():\n\"\"\"\n        Callback function which has access to optimizer init settings.\n        \"\"\"\n        self.nn_optimizer = optimizer_cls(self.nn.parameters())\n        assert isinstance(\n            self.nn_optimizer, torch.optim.Optimizer\n        ), f\"Expected an optimizer, got {type(self.nn_optimizer)}\"\n        self._dynamic_params[\"optimizer\"] = optimizer_kwargs\n\n    self._callback_reset_nn_optimizer = callback_reset_nn_optimizer\n    self.setup_nn(use_existing_state_dict=True)\n    self._setup_widgets()\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.adjust_optimizer_params","title":"<code>adjust_optimizer_params(self)</code>","text":"Dynamically change parameters of the neural net optimizer. <ul> <li>Intended to be polymorphic in child classes and to be called per epoch.</li> </ul> Source code in <code>hover/core/neural.py</code> <pre><code>def adjust_optimizer_params(self):\n\"\"\"\n    ???+ note \"Dynamically change parameters of the neural net optimizer.\"\n\n        - Intended to be polymorphic in child classes and to be called per epoch.\n    \"\"\"\n    for _group in self.nn_optimizer.param_groups:\n        _group.update(self._dynamic_params[\"optimizer\"])\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.auto_adjust_setup","title":"<code>auto_adjust_setup(self, labels, auto_skip=True)</code>","text":"Auto-(re)create label encoder/decoder and neural net. <p>Intended to be called in and out of the constructor.</p> Param Type Description <code>labels</code> <code>list</code> list of <code>str</code> classification labels <code>auto_skip</code> <code>bool</code> skip when labels did not change Source code in <code>hover/core/neural.py</code> <pre><code>def auto_adjust_setup(self, labels, auto_skip=True):\n\"\"\"\n    ???+ note \"Auto-(re)create label encoder/decoder and neural net.\"\n\n        Intended to be called in and out of the constructor.\n\n        | Param             | Type       | Description                          |\n        | :---------------- | :--------- | :----------------------------------- |\n        | `labels`          | `list`     | list of `str` classification labels  |\n        | `auto_skip`       | `bool`     | skip when labels did not change      |\n    \"\"\"\n    # sanity check and skip\n    assert isinstance(labels, list), f\"Expected a list of labels, got {labels}\"\n    # if the sequence of labels matches label encoder exactly, skip\n    label_match_flag = labels == sorted(\n        self.label_encoder.keys(), key=lambda k: self.label_encoder[k]\n    )\n    if auto_skip and label_match_flag:\n        return\n\n    self.setup_label_conversion(labels)\n    self.setup_nn(use_existing_state_dict=False)\n\n    self._good(f\"adjusted to new list of labels: {labels}\")\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.evaluate","title":"<code>evaluate(self, dev_loader)</code>","text":"Evaluate the VecNet against a dev set. Param Type Description <code>dev_loader</code> <code>torch.utils.data.DataLoader</code> dev set Source code in <code>hover/core/neural.py</code> <pre><code>def evaluate(self, dev_loader):\n\"\"\"\n    ???+ note \"Evaluate the VecNet against a dev set.\"\n\n        | Param        | Type         | Description                |\n        | :----------- | :----------- | :------------------------- |\n        | `dev_loader` | `torch.utils.data.DataLoader` | dev set   |\n    \"\"\"\n    self.nn.eval()\n    true = []\n    pred = []\n    for loaded_input, loaded_output, _idx in dev_loader:\n        _input_tensor = loaded_input.float()\n        _output_tensor = loaded_output.float()\n\n        _logits = self.nn(_input_tensor)\n        _true_batch = _output_tensor.argmax(dim=1).detach().numpy()\n        _pred_batch = F.softmax(_logits, dim=1).argmax(dim=1).detach().numpy()\n        true.append(_true_batch)\n        pred.append(_pred_batch)\n    true = np.concatenate(true)\n    pred = np.concatenate(pred)\n    accuracy = classification_accuracy(true, pred)\n    conf_mat = confusion_matrix(true, pred)\n\n    if self.verbose &gt;= 0:\n        log_info = dict(self._dynamic_params)\n        log_info[\"performance\"] = \"Acc {0:.3f}\".format(accuracy)\n        self._info(\n            \"{0: &lt;80}\".format(\n                \"Eval: Epoch {epoch} {performance}\".format(**log_info)\n            )\n        )\n\n    return accuracy, conf_mat\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.from_module","title":"<code>from_module(model_module, labels, **kwargs)</code>  <code>classmethod</code>","text":"Create a VectorNet model from a loadable module. Param Type Description <code>model_module</code> <code>module</code> or <code>str</code> (path to) a local Python workspace module which contains a get_vectorizer() callable, get_architecture() callable, and a get_state_dict_path() callable <code>labels</code> <code>list</code> list of <code>str</code> classification labels <code>**kwargs</code> forwarded to <code>self.__init__()</code> constructor Source code in <code>hover/core/neural.py</code> <pre><code>@classmethod\ndef from_module(cls, model_module, labels, **kwargs):\n\"\"\"\n    ???+ note \"Create a VectorNet model from a loadable module.\"\n\n        | Param          | Type       | Description                          |\n        | :------------- | :--------- | :----------------------------------- |\n        | `model_module` | `module` or `str` | (path to) a local Python workspace module which contains a get_vectorizer() callable, get_architecture() callable, and a get_state_dict_path() callable |\n        | `labels`       | `list`     | list of `str` classification labels  |\n        | `**kwargs`     |      | forwarded to `self.__init__()` constructor |\n    \"\"\"\n    if isinstance(model_module, str):\n        from importlib import import_module\n\n        model_module = import_module(model_module)\n\n    # Load the model by retrieving the inp-to-vec function, architecture, and state dict\n    model = cls(\n        model_module.get_vectorizer(),\n        model_module.get_architecture(),\n        model_module.get_state_dict_path(),\n        labels,\n        **kwargs,\n    )\n\n    return model\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.load","title":"<code>load(self, load_path=None)</code>","text":"Load neural net parameters if possible. <p>Can be directed to a custom state dict.</p> Param Type Description <code>load_path</code> <code>str</code> path to a <code>torch</code> state dict Source code in <code>hover/core/neural.py</code> <pre><code>def load(self, load_path=None):\n\"\"\"\n    ???+ note \"Load neural net parameters if possible.\"\n\n        Can be directed to a custom state dict.\n\n        | Param       | Type       | Description                  |\n        | :---------- | :--------- | :--------------------------- |\n        | `load_path` | `str`      | path to a `torch` state dict |\n    \"\"\"\n    load_path = load_path or self.nn_update_path\n    # if the architecture cannot match the state dict, skip the load and warn\n    try:\n        self.nn.load_state_dict(torch.load(load_path))\n        self._info(f\"loaded state dict {load_path}.\")\n    except Exception as e:\n        self._warn(f\"load VectorNet state path failed with {type(e)}: {e}\")\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.manifold_trajectory","title":"<code>manifold_trajectory(self, inps, method=None, reducer_kwargs=None, spline_kwargs=None)</code>","text":"Compute a propagation trajectory of the dataset manifold through the neural net. <ol> <li>vectorize inps</li> <li>forward propagate, keeping intermediates</li> <li>fit intermediates to N-D manifolds</li> <li>fit manifolds using Procrustes shape analysis</li> <li>fit shapes to trajectory splines</li> </ol> Param Type Description <code>inps</code> dynamic (a list of) input features to vectorize <code>method</code> <code>str</code> reduction method: <code>\"umap\"</code> or <code>\"ivis\"</code> <code>reducer_kwargs</code> kwargs to forward to dimensionality reduction <code>spline_kwargs</code> kwargs to forward to spline calculation Source code in <code>hover/core/neural.py</code> <pre><code>def manifold_trajectory(\n    self, inps, method=None, reducer_kwargs=None, spline_kwargs=None\n):\n\"\"\"\n    ???+ note \"Compute a propagation trajectory of the dataset manifold through the neural net.\"\n\n        1. vectorize inps\n        2. forward propagate, keeping intermediates\n        3. fit intermediates to N-D manifolds\n        4. fit manifolds using Procrustes shape analysis\n        5. fit shapes to trajectory splines\n\n        | Param    | Type    | Description                          |\n        | :------- | :------ | :----------------------------------- |\n        | `inps`   | dynamic | (a list of) input features to vectorize |\n        | `method` | `str`   | reduction method: `\"umap\"` or `\"ivis\"`  |\n        | `reducer_kwargs` | | kwargs to forward to dimensionality reduction |\n        | `spline_kwargs` | | kwargs to forward to spline calculation |\n    \"\"\"\n    from hover.core.representation.manifold import LayerwiseManifold\n    from hover.core.representation.trajectory import manifold_spline\n\n    if method is None:\n        method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n\n    reducer_kwargs = reducer_kwargs or {}\n    spline_kwargs = spline_kwargs or {}\n\n    # step 1 &amp; 2\n    vectors = torch.Tensor(np.array([self.vectorizer(_inp) for _inp in inps]))\n    self.nn.eval()\n    intermediates = self.nn.eval_per_layer(vectors)\n    intermediates = [_tensor.detach().numpy() for _tensor in intermediates]\n\n    # step 3 &amp; 4\n    LM = LayerwiseManifold(intermediates)\n    LM.unfold(method=method, **reducer_kwargs)\n    seq_arr, disparities = LM.procrustes()\n    seq_arr = np.array(seq_arr)\n\n    # step 5\n    traj_arr = manifold_spline(np.array(seq_arr), **spline_kwargs)\n\n    return traj_arr, seq_arr, disparities\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.predict_proba","title":"<code>predict_proba(self, inps)</code>","text":"End-to-end single/multi-piece prediction from inp to class probabilities. Param Type Description <code>inps</code> dynamic (a list of) input features to vectorize Source code in <code>hover/core/neural.py</code> <pre><code>def predict_proba(self, inps):\n\"\"\"\n    ???+ note \"End-to-end single/multi-piece prediction from inp to class probabilities.\"\n        | Param  | Type    | Description                          |\n        | :----- | :------ | :----------------------------------- |\n        | `inps` | dynamic | (a list of) input features to vectorize |\n    \"\"\"\n    # if the input is a single piece of inp, cast it to a list\n    FLAG_SINGLE = not isinstance(inps, list)\n    if FLAG_SINGLE:\n        inps = [inps]\n\n    # the actual prediction\n    self.nn.eval()\n    vectors = torch.Tensor(np.array([self.vectorizer(_inp) for _inp in inps]))\n    logits = self.nn(vectors)\n    probs = F.softmax(logits, dim=-1).detach().numpy()\n\n    # inverse-cast if applicable\n    if FLAG_SINGLE:\n        probs = probs[0]\n\n    return probs\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.prepare_loader","title":"<code>prepare_loader(self, dataset, key, **kwargs)</code>","text":"Create dataloader from <code>SupervisableDataset</code> with implied vectorizer(s). Param Type Description <code>dataset</code> <code>hover.core.dataset.SupervisableDataset</code> the dataset to load <code>key</code> <code>str</code> \"train\", \"dev\", or \"test\" <code>**kwargs</code> forwarded to <code>dataset.loader()</code> Source code in <code>hover/core/neural.py</code> <pre><code>def prepare_loader(self, dataset, key, **kwargs):\n\"\"\"\n    ???+ note \"Create dataloader from `SupervisableDataset` with implied vectorizer(s).\"\n\n        | Param      | Type  | Description                |\n        | :--------- | :---- | :------------------------- |\n        | `dataset`  | `hover.core.dataset.SupervisableDataset` | the dataset to load |\n        | `key`      | `str` | \"train\", \"dev\", or \"test\"  |\n        | `**kwargs` | | forwarded to `dataset.loader()`  |\n    \"\"\"\n    return dataset.loader(key, self.vectorizer, **kwargs)\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.save","title":"<code>save(self, save_path=None)</code>","text":"Save the current state dict with authorization to overwrite. Param Type Description <code>save_path</code> <code>str</code> option alternative path to state dict Source code in <code>hover/core/neural.py</code> <pre><code>def save(self, save_path=None):\n\"\"\"\n    ???+ note \"Save the current state dict with authorization to overwrite.\"\n        | Param       | Type  | Description                           |\n        | :---------- | :---- | :------------------------------------ |\n        | `save_path` | `str` | option alternative path to state dict |\n    \"\"\"\n    save_path = save_path or self.nn_update_path\n    torch.save(self.nn.state_dict(), save_path)\n    verb = \"overwrote\" if os.path.isfile(save_path) else \"saved\"\n    self._info(f\"{verb} state dict {save_path}.\")\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.setup_label_conversion","title":"<code>setup_label_conversion(self, labels)</code>","text":"Set up label encoder/decoder and number of classes. Param Type Description <code>labels</code> <code>list</code> list of <code>str</code> classification labels Source code in <code>hover/core/neural.py</code> <pre><code>def setup_label_conversion(self, labels):\n\"\"\"\n    ???+ note \"Set up label encoder/decoder and number of classes.\"\n\n        | Param             | Type       | Description                          |\n        | :---------------- | :--------- | :----------------------------------- |\n        | `labels`          | `list`     | list of `str` classification labels  |\n    \"\"\"\n    self.label_encoder = {_label: i for i, _label in enumerate(labels)}\n    self.label_decoder = {i: _label for i, _label in enumerate(labels)}\n    self.num_classes = len(self.label_encoder)\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.setup_nn","title":"<code>setup_nn(self, use_existing_state_dict=True)</code>","text":"Set up neural network and optimizers. <p>Intended to be called in and out of the constructor.</p> <ul> <li>will try to load parameters from state dict by default</li> <li>option to override and discard previous state dict<ul> <li>often used when the classification targets have changed</li> </ul> </li> </ul> Param Type Description <code>labels</code> <code>list</code> list of <code>str</code> classification labels <code>use_existing_state_dict</code> <code>bool</code> whether to use existing state dict Source code in <code>hover/core/neural.py</code> <pre><code>def setup_nn(self, use_existing_state_dict=True):\n\"\"\"\n    ???+ note \"Set up neural network and optimizers.\"\n\n        Intended to be called in and out of the constructor.\n\n        -   will try to load parameters from state dict by default\n        -   option to override and discard previous state dict\n            -   often used when the classification targets have changed\n\n        | Param                     | Type       | Description                          |\n        | :------------------------ | :--------- | :----------------------------------- |\n        | `labels`                  | `list`     | list of `str` classification labels  |\n        | `use_existing_state_dict` | `bool`     | whether to use existing state dict   |\n    \"\"\"\n    # set up vectorizer and the neural network with appropriate dimensions\n    vec_dim = self.vectorizer(self.example_input).shape[0]\n    self.nn = self.architecture(vec_dim, self.num_classes)\n    self._callback_reset_nn_optimizer()\n\n    state_dict_exists = os.path.isfile(self.nn_update_path)\n    # if state dict exists, load it (when consistent) or overwrite\n    if state_dict_exists:\n        if use_existing_state_dict:\n            self.load(self.nn_update_path)\n        else:\n            self.save(self.nn_update_path)\n\n    self._good(f\"reset neural net: in {vec_dim} out {self.num_classes}.\")\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.train","title":"<code>train(self, train_loader, dev_loader=None, epochs=None)</code>","text":"Train the neural network part of the VecNet. <ul> <li>intended to be coupled with self.train_batch().</li> </ul> Param Type Description <code>train_loader</code> <code>torch.utils.data.DataLoader</code> train set <code>dev_loader</code> <code>torch.utils.data.DataLoader</code> dev set <code>epochs</code> <code>int</code> number of epochs to train Source code in <code>hover/core/neural.py</code> <pre><code>def train(self, train_loader, dev_loader=None, epochs=None):\n\"\"\"\n    ???+ note \"Train the neural network part of the VecNet.\"\n\n        - intended to be coupled with self.train_batch().\n\n        | Param          | Type         | Description                |\n        | :------------- | :----------- | :------------------------- |\n        | `train_loader` | `torch.utils.data.DataLoader` | train set |\n        | `dev_loader`   | `torch.utils.data.DataLoader` | dev set   |\n        | `epochs`       | `int`        | number of epochs to train  |\n    \"\"\"\n    epochs = epochs or self.epochs_slider.value\n\n    train_info = []\n    for epoch_idx in range(epochs):\n        self._dynamic_params[\"epoch\"] = epoch_idx + 1\n        self.train_epoch(train_loader)\n        if dev_loader is not None:\n            dev_loader = train_loader\n        acc, conf_mat = self.evaluate(dev_loader)\n        train_info.append({\"accuracy\": acc, \"confusion_matrix\": conf_mat})\n    return train_info\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.train_batch","title":"<code>train_batch(self, loaded_input, loaded_output)</code>","text":"Train the neural network for one batch. Param Type Description <code>loaded_input</code> <code>torch.Tensor</code> input tensor <code>loaded_output</code> <code>torch.Tensor</code> output tensor Source code in <code>hover/core/neural.py</code> <pre><code>def train_batch(self, loaded_input, loaded_output):\n\"\"\"\n    ???+ note \"Train the neural network for one batch.\"\n\n        | Param           | Type           | Description           |\n        | :-------------- | :------------- | :-------------------- |\n        | `loaded_input`  | `torch.Tensor` | input tensor          |\n        | `loaded_output` | `torch.Tensor` | output tensor         |\n    \"\"\"\n    self.nn.train()\n    input_tensor = loaded_input.float()\n    output_tensor = loaded_output.float()\n\n    # compute logits\n    logits = self.nn(input_tensor)\n    loss = F.cross_entropy(logits, output_tensor)\n\n    self.nn_optimizer.zero_grad()\n    loss.backward()\n    self.nn_optimizer.step()\n\n    if self.verbose &gt; 0:\n        log_info = dict(self._dynamic_params)\n        log_info[\"performance\"] = \"Loss {0:.3f}\".format(loss)\n        self._print(\n            \"{0: &lt;80}\".format(\n                \"Train: Epoch {epoch} Batch {batch} {performance}\".format(\n                    **log_info\n                )\n            ),\n            end=\"\\r\",\n        )\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.train_epoch","title":"<code>train_epoch(self, train_loader, *args, **kwargs)</code>","text":"Train the neural network for one epoch. <ul> <li>Supports flexible args and kwargs for child classes that may implement self.train() and self.train_batch() differently.</li> </ul> Param Type Description <code>train_loader</code> <code>torch.utils.data.DataLoader</code> train set <code>*args</code> arguments to forward to <code>train_batch</code> <code>**kwargs</code> kwargs to forward to <code>train_batch</code> Source code in <code>hover/core/neural.py</code> <pre><code>def train_epoch(self, train_loader, *args, **kwargs):\n\"\"\"\n    ???+ note \"Train the neural network for one epoch.\"\n\n        - Supports flexible args and kwargs for child classes that may implement self.train() and self.train_batch() differently.\n\n        | Param          | Type         | Description                |\n        | :------------- | :----------- | :------------------------- |\n        | `train_loader` | `torch.utils.data.DataLoader` | train set |\n        | `*args`        | | arguments to forward to `train_batch`   |\n        | `**kwargs`     | | kwargs to forward to `train_batch`      |\n    \"\"\"\n    self.adjust_optimizer_params()\n    for batch_idx, (loaded_input, loaded_output, _) in enumerate(train_loader):\n        self._dynamic_params[\"batch\"] = batch_idx + 1\n        self.train_batch(loaded_input, loaded_output, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.view","title":"<code>view(self)</code>","text":"Overall layout when plotted. Source code in <code>hover/core/neural.py</code> <pre><code>def view(self):\n\"\"\"\n    ???+ note \"Overall layout when plotted.\"\n    \"\"\"\n    return self._layout_widgets()\n</code></pre>"},{"location":"pages/reference/core-neural/#hover.core.neural","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.BaseVectorNet","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.DEFAULT_OPTIM_CLS","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.DEFAULT_OPTIM_CLS.step","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.__init__","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.adjust_optimizer_params","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.auto_adjust_setup","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.evaluate","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.from_module","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.load","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.manifold_trajectory","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.predict_proba","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.prepare_loader","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.save","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.setup_label_conversion","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.setup_nn","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.train","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.train_batch","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.train_epoch","title":"hover.core.neural","text":""},{"location":"pages/reference/core-neural/#hover.core.neural.VectorNet.view","title":"hover.core.neural","text":""},{"location":"pages/reference/core-representation/","title":"hover.core.representation","text":""},{"location":"pages/reference/core-representation/#hover.core.representation.reduction","title":"<code>hover.core.representation.reduction</code>","text":"Linker data structures which tie (potentially multiple) dimensionality reducers to arrays. <p>The point is to make it clear which reduction is in reference to which array.</p> <p>Icing on the cake: unify the syntax across different kinds of reducers.</p>"},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer","title":"<code> DimensionalityReducer            (Loggable)         </code>","text":"Source code in <code>hover/core/representation/reduction.py</code> <pre><code>class DimensionalityReducer(Loggable):\n    def __init__(self, array):\n\"\"\"\n        ???+ note \"Link self to the shared input array for reduction methods.\"\n            | Param   | Type         | Description                   |\n            | :------ | :----------- | :---------------------------- |\n            | `array` | `np.ndarray` | the input array to fit on     |\n        \"\"\"\n        self.reference_array = array\n\n    @staticmethod\n    def create_reducer(method=None, *args, **kwargs):\n\"\"\"\n        ???+ note \"Handle kwarg translation and dynamic imports.\"\n\n            | Param      | Type   | Description              |\n            | :--------- | :----- | :----------------------- |\n            | `method`   | `str`  | `\"umap\"` or `\"ivis\"`     |\n            | `*args`    |        | forwarded to the reducer |\n            | `**kwargs` |        | translated and forwarded |\n        \"\"\"\n        if method is None:\n            method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n\n        if method == \"umap\":\n            import umap\n\n            reducer_cls = umap.UMAP\n        elif method == \"ivis\":\n            import ivis\n\n            reducer_cls = ivis.Ivis\n        else:\n            raise ValueError(\"Expected 'umap' or 'ivis' as reduction method\")\n\n        translated_kwargs = kwargs.copy()\n        for _key, _value in kwargs.items():\n            _trans_dict = KWARG_TRANSLATOR.get(_key, {})\n            if method in _trans_dict:\n                _trans_key = _trans_dict[method]\n                translated_kwargs.pop(_key)\n                translated_kwargs[_trans_key] = _value\n\n        reducer = reducer_cls(*args, **translated_kwargs)\n        return reducer\n\n    def fit_transform(self, method=None, *args, **kwargs):\n\"\"\"\n        ???+ note \"Fit and transform an array and store the reducer.\"\n            | Param      | Type   | Description              |\n            | :--------- | :----- | :----------------------- |\n            | `method`   | `str`  | `\"umap\"` or `\"ivis\"`     |\n            | `*args`    |        | forwarded to the reducer |\n            | `**kwargs` |        | forwarded to the reducer |\n        \"\"\"\n        if method is None:\n            method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n\n        reducer = DimensionalityReducer.create_reducer(method=method, *args, **kwargs)\n        embedding = reducer.fit_transform(self.reference_array)\n        setattr(self, method, reducer)\n        return embedding\n\n    def transform(self, array, method=None):\n\"\"\"\n        ???+ note \"Transform an array with a already-fitted reducer.\"\n            | Param      | Type         | Description              |\n            | :--------- | :----------- | :----------------------- |\n            | `array`    | `np.ndarray` | the array to transform   |\n            | `method`   | `str`        | `\"umap\"` or `\"ivis\"`     |\n        \"\"\"\n        if method is None:\n            method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n\n        assert isinstance(array, np.ndarray), f\"Expected np.ndarray, got {type(array)}\"\n        # edge case: array is too small\n        if array.shape[0] &lt; 1:\n            return np.array([])\n\n        reducer = getattr(self, method)\n        return reducer.transform(array)\n</code></pre>"},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer.__init__","title":"<code>__init__(self, array)</code>  <code>special</code>","text":"Link self to the shared input array for reduction methods. Param Type Description <code>array</code> <code>np.ndarray</code> the input array to fit on Source code in <code>hover/core/representation/reduction.py</code> <pre><code>def __init__(self, array):\n\"\"\"\n    ???+ note \"Link self to the shared input array for reduction methods.\"\n        | Param   | Type         | Description                   |\n        | :------ | :----------- | :---------------------------- |\n        | `array` | `np.ndarray` | the input array to fit on     |\n    \"\"\"\n    self.reference_array = array\n</code></pre>"},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer.create_reducer","title":"<code>create_reducer(method=None, *args, **kwargs)</code>  <code>staticmethod</code>","text":"Handle kwarg translation and dynamic imports. Param Type Description <code>method</code> <code>str</code> <code>\"umap\"</code> or <code>\"ivis\"</code> <code>*args</code> forwarded to the reducer <code>**kwargs</code> translated and forwarded Source code in <code>hover/core/representation/reduction.py</code> <pre><code>@staticmethod\ndef create_reducer(method=None, *args, **kwargs):\n\"\"\"\n    ???+ note \"Handle kwarg translation and dynamic imports.\"\n\n        | Param      | Type   | Description              |\n        | :--------- | :----- | :----------------------- |\n        | `method`   | `str`  | `\"umap\"` or `\"ivis\"`     |\n        | `*args`    |        | forwarded to the reducer |\n        | `**kwargs` |        | translated and forwarded |\n    \"\"\"\n    if method is None:\n        method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n\n    if method == \"umap\":\n        import umap\n\n        reducer_cls = umap.UMAP\n    elif method == \"ivis\":\n        import ivis\n\n        reducer_cls = ivis.Ivis\n    else:\n        raise ValueError(\"Expected 'umap' or 'ivis' as reduction method\")\n\n    translated_kwargs = kwargs.copy()\n    for _key, _value in kwargs.items():\n        _trans_dict = KWARG_TRANSLATOR.get(_key, {})\n        if method in _trans_dict:\n            _trans_key = _trans_dict[method]\n            translated_kwargs.pop(_key)\n            translated_kwargs[_trans_key] = _value\n\n    reducer = reducer_cls(*args, **translated_kwargs)\n    return reducer\n</code></pre>"},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer.fit_transform","title":"<code>fit_transform(self, method=None, *args, **kwargs)</code>","text":"Fit and transform an array and store the reducer. Param Type Description <code>method</code> <code>str</code> <code>\"umap\"</code> or <code>\"ivis\"</code> <code>*args</code> forwarded to the reducer <code>**kwargs</code> forwarded to the reducer Source code in <code>hover/core/representation/reduction.py</code> <pre><code>def fit_transform(self, method=None, *args, **kwargs):\n\"\"\"\n    ???+ note \"Fit and transform an array and store the reducer.\"\n        | Param      | Type   | Description              |\n        | :--------- | :----- | :----------------------- |\n        | `method`   | `str`  | `\"umap\"` or `\"ivis\"`     |\n        | `*args`    |        | forwarded to the reducer |\n        | `**kwargs` |        | forwarded to the reducer |\n    \"\"\"\n    if method is None:\n        method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n\n    reducer = DimensionalityReducer.create_reducer(method=method, *args, **kwargs)\n    embedding = reducer.fit_transform(self.reference_array)\n    setattr(self, method, reducer)\n    return embedding\n</code></pre>"},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer.transform","title":"<code>transform(self, array, method=None)</code>","text":"Transform an array with a already-fitted reducer. Param Type Description <code>array</code> <code>np.ndarray</code> the array to transform <code>method</code> <code>str</code> <code>\"umap\"</code> or <code>\"ivis\"</code> Source code in <code>hover/core/representation/reduction.py</code> <pre><code>def transform(self, array, method=None):\n\"\"\"\n    ???+ note \"Transform an array with a already-fitted reducer.\"\n        | Param      | Type         | Description              |\n        | :--------- | :----------- | :----------------------- |\n        | `array`    | `np.ndarray` | the array to transform   |\n        | `method`   | `str`        | `\"umap\"` or `\"ivis\"`     |\n    \"\"\"\n    if method is None:\n        method = hover.config[\"data.embedding\"][\"default_reduction_method\"]\n\n    assert isinstance(array, np.ndarray), f\"Expected np.ndarray, got {type(array)}\"\n    # edge case: array is too small\n    if array.shape[0] &lt; 1:\n        return np.array([])\n\n    reducer = getattr(self, method)\n    return reducer.transform(array)\n</code></pre>"},{"location":"pages/reference/core-representation/#hover.core.representation.reduction","title":"hover.core.representation","text":""},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer","title":"hover.core.representation","text":""},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer.__init__","title":"hover.core.representation","text":""},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer.create_reducer","title":"hover.core.representation","text":""},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer.fit_transform","title":"hover.core.representation","text":""},{"location":"pages/reference/core-representation/#hover.core.representation.reduction.DimensionalityReducer.transform","title":"hover.core.representation","text":""},{"location":"pages/reference/recipes/","title":"<code>hover.recipes</code>","text":""},{"location":"pages/reference/recipes/#hover.recipes.stable","title":"<code>hover.recipes.stable</code>","text":"High-level functions to produce an interactive annotation interface. <p>Stable recipes whose function signatures should almost never change in the future.</p>"},{"location":"pages/reference/recipes/#hover.recipes.stable.linked_annotator","title":"<code>linked_annotator(dataset, **kwargs)</code>","text":"Display the dataset on a 2D map in two views, one for search and one for annotation. Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>**kwargs</code> kwargs to forward to each Bokeh figure <p>Expected visual layout:</p> SupervisableDataset BokehDataFinder BokehDataAnnotator manage data subsets search -&gt; highlight make annotations Source code in <code>hover/recipes/stable.py</code> <pre><code>@servable(title=\"Linked Annotator\")\ndef linked_annotator(dataset, **kwargs):\n\"\"\"\n    ???+ note \"Display the dataset on a 2D map in two views, one for search and one for annotation.\"\n\n        | Param     | Type     | Description                          |\n        | :-------- | :------- | :----------------------------------- |\n        | `dataset` | `SupervisableDataset` | the dataset to link to  |\n        | `**kwargs` |       | kwargs to forward to each Bokeh figure |\n\n        Expected visual layout:\n\n        | SupervisableDataset | BokehDataFinder     | BokehDataAnnotator |\n        | :------------------ | :------------------ | :----------------- |\n        | manage data subsets | search -&gt; highlight | make annotations   |\n    \"\"\"\n    layout, _ = _linked_annotator(dataset, **kwargs)\n    return layout\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.stable.simple_annotator","title":"<code>simple_annotator(dataset, **kwargs)</code>","text":"Display the dataset with on a 2D map for annotation. Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>**kwargs</code> kwargs to forward to each Bokeh figure <p>Expected visual layout:</p> SupervisableDataset BokehDataAnnotator manage data subsets make annotations Source code in <code>hover/recipes/stable.py</code> <pre><code>@servable(title=\"Simple Annotator\")\ndef simple_annotator(dataset, **kwargs):\n\"\"\"\n    ???+ note \"Display the dataset with on a 2D map for annotation.\"\n\n        | Param     | Type     | Description                          |\n        | :-------- | :------- | :----------------------------------- |\n        | `dataset` | `SupervisableDataset` | the dataset to link to  |\n        | `**kwargs` |       | kwargs to forward to each Bokeh figure |\n\n        Expected visual layout:\n\n        | SupervisableDataset | BokehDataAnnotator |\n        | :------------------ | :----------------- |\n        | manage data subsets | make annotations   |\n    \"\"\"\n    layout, _ = _simple_annotator(dataset, **kwargs)\n    return layout\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.stable","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.stable.linked_annotator","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.stable.simple_annotator","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.experimental","title":"<code>hover.recipes.experimental</code>","text":"High-level functions to produce an interactive annotation interface. <p>Experimental recipes whose function signatures might change significantly in the future. Use with caution.</p>"},{"location":"pages/reference/recipes/#hover.recipes.experimental.active_learning","title":"<code>active_learning(dataset, vecnet, **kwargs)</code>","text":"Display the dataset for annotation, putting a classification model in the loop. <p>Currently works most smoothly with <code>VectorNet</code>.</p> Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>vecnet</code> <code>VectorNet</code> model to use in the loop <code>**kwargs</code> forwarded to each Bokeh figure <p>Expected visual layout:</p> SupervisableDataset BokehSoftLabelExplorer BokehDataAnnotator BokehDataFinder manage data subsets inspect model predictions make annotations search and filter Source code in <code>hover/recipes/experimental.py</code> <pre><code>@servable(title=\"Active Learning\")\ndef active_learning(dataset, vecnet, **kwargs):\n\"\"\"\n    ???+ note \"Display the dataset for annotation, putting a classification model in the loop.\"\n        Currently works most smoothly with `VectorNet`.\n\n        | Param     | Type     | Description                          |\n        | :-------- | :------- | :----------------------------------- |\n        | `dataset` | `SupervisableDataset` | the dataset to link to  |\n        | `vecnet`  | `VectorNet` | model to use in the loop          |\n        | `**kwargs` |         | forwarded to each Bokeh figure       |\n\n        Expected visual layout:\n\n        | SupervisableDataset | BokehSoftLabelExplorer    | BokehDataAnnotator | BokehDataFinder     |\n        | :------------------ | :------------------------ | :----------------- | :------------------ |\n        | manage data subsets | inspect model predictions | make annotations   | search and filter   |\n    \"\"\"\n    layout, _ = _active_learning(dataset, vecnet, **kwargs)\n    return layout\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.experimental.snorkel_crosscheck","title":"<code>snorkel_crosscheck(dataset, lf_list, **kwargs)</code>","text":"Display the dataset for annotation, cross-checking with labeling functions. Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>lf_list</code> <code>list</code> a list of callables decorated by <code>@hover.utils.snorkel_helper.labeling_function</code> <code>**kwargs</code> kwargs to forward to each Bokeh figure <p>Expected visual layout:</p> SupervisableDataset BokehSnorkelExplorer BokehDataAnnotator BokehDataFinder manage data subsets inspect labeling functions make annotations search and filter Source code in <code>hover/recipes/experimental.py</code> <pre><code>@servable(title=\"Snorkel Crosscheck\")\ndef snorkel_crosscheck(dataset, lf_list, **kwargs):\n\"\"\"\n    ???+ note \"Display the dataset for annotation, cross-checking with labeling functions.\"\n\n        | Param     | Type     | Description                          |\n        | :-------- | :------- | :----------------------------------- |\n        | `dataset` | `SupervisableDataset` | the dataset to link to  |\n        | `lf_list` | `list`   | a list of callables decorated by `@hover.utils.snorkel_helper.labeling_function` |\n        | `**kwargs` |       | kwargs to forward to each Bokeh figure |\n\n        Expected visual layout:\n\n        | SupervisableDataset | BokehSnorkelExplorer       | BokehDataAnnotator | BokehDataFinder     |\n        | :------------------ | :------------------------- | :----------------- | :------------------ |\n        | manage data subsets | inspect labeling functions | make annotations   | search and filter   |\n    \"\"\"\n    layout, _ = _snorkel_crosscheck(dataset, lf_list, **kwargs)\n    return layout\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.experimental","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.experimental.active_learning","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.experimental.snorkel_crosscheck","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.subroutine","title":"<code>hover.recipes.subroutine</code>","text":"Building blocks of high-level recipes. <p>Includes the following:</p> <ul> <li>functions for creating individual standard explorers appropriate for a dataset.</li> </ul>"},{"location":"pages/reference/recipes/#hover.recipes.subroutine.active_learning_components","title":"<code>active_learning_components(dataset, vecnet, **kwargs)</code>","text":"Active-learning specific components of a recipe. Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>vecnet</code> <code>VectorNet</code> vecnet to use in the loop <code>**kwargs</code> kwargs to forward to the <code>BokehSoftLabelExplorer</code> Source code in <code>hover/recipes/subroutine.py</code> <pre><code>def active_learning_components(dataset, vecnet, **kwargs):\n\"\"\"\n    ???+ note \"Active-learning specific components of a recipe.\"\n\n        | Param      | Type     | Description                          |\n        | :--------- | :------- | :----------------------------------- |\n        | `dataset`  | `SupervisableDataset` | the dataset to link to  |\n        | `vecnet`   | `VectorNet` | vecnet to use in the loop          |\n        | `**kwargs` | | kwargs to forward to the `BokehSoftLabelExplorer` |\n    \"\"\"\n    console = Console()\n    softlabel = standard_softlabel(dataset, **kwargs)\n    feature_key = dataset.__class__.FEATURE_KEY\n\n    # patch coordinates for representational similarity analysis\n    # some datasets may have multiple embeddings; use the one with lowest dimension\n    embedding_cols = sorted(softlabel.find_embedding_fields())\n    manifold_dim, _ = re.findall(r\"\\d+\", embedding_cols[0])\n    manifold_dim = int(manifold_dim)\n    manifold_traj_cols = embedding_cols[:manifold_dim]\n    for _col in manifold_traj_cols:\n        _total_dim, _ = re.findall(r\"\\d+\", _col)\n        _total_dim = int(_total_dim)\n        assert (\n            _total_dim == manifold_dim\n        ), f\"Dim mismatch: {_total_dim} vs. {manifold_dim}\"\n        softlabel.value_patch_by_slider(\n            _col, f\"{_col}_traj\", title=\"Manifold trajectory step\"\n        )\n\n    # recipe-specific widget\n    model_trainer = Button(label=\"Train model\", button_type=\"primary\")\n\n    def retrain_vecnet():\n\"\"\"\n        Callback subfunction 1 of 2.\n        \"\"\"\n        model_trainer.disabled = True\n        console.print(\"Start training... button will be disabled temporarily.\")\n        dataset.setup_label_coding()\n        vecnet.auto_adjust_setup(dataset.classes)\n\n        train_loader = vecnet.prepare_loader(dataset, \"train\", smoothing_coeff=0.2)\n        if dataset.dfs[\"dev\"].shape[0] &gt; 0:\n            dev_loader = vecnet.prepare_loader(dataset, \"dev\")\n        else:\n            dataset._warn(\"dev set is empty, borrowing train set for validation.\")\n            dev_loader = train_loader\n\n        _ = vecnet.train(train_loader, dev_loader)\n        vecnet.save()\n        console.print(\"-- 1/2: retrained vecnet\")\n\n    def update_softlabel_plot():\n\"\"\"\n        Callback subfunction 2 of 2.\n        \"\"\"\n        # combine inputs and compute outputs of all non-test subsets\n        use_subsets = (\"raw\", \"train\", \"dev\")\n        inps = []\n        for _key in use_subsets:\n            inps.extend(dataset.dfs[_key][feature_key].tolist())\n\n        probs = vecnet.predict_proba(inps)\n        labels = [dataset.label_decoder[_val] for _val in probs.argmax(axis=-1)]\n        scores = probs.max(axis=-1).tolist()\n        traj_arr, _, _ = vecnet.manifold_trajectory(\n            inps,\n            method=hover.config[\"data.embedding\"][\"default_reduction_method\"],\n            reducer_kwargs=dict(dimension=manifold_dim),\n            spline_kwargs=dict(points_per_step=5),\n        )\n\n        offset = 0\n        for _key in use_subsets:\n            _length = dataset.dfs[_key].shape[0]\n            # skip subset if empty\n            if _length == 0:\n                continue\n            _slice = slice(offset, offset + _length)\n            dataset.dfs[_key][\"pred_label\"] = labels[_slice]\n            dataset.dfs[_key][\"pred_score\"] = scores[_slice]\n            for i, _col in enumerate(manifold_traj_cols):\n                # all steps, selected slice\n                _traj = traj_arr[:, _slice, i]\n                # selected slice, all steps\n                _traj = list(np.swapaxes(_traj, 0, 1))\n                dataset.dfs[_key][f\"{_col}_traj\"] = _traj\n\n            offset += _length\n\n        softlabel._dynamic_callbacks[\"adjust_patch_slider\"]()\n        softlabel._update_sources()\n        model_trainer.disabled = False\n        console.print(\"-- 2/2: updated predictions. Training button is re-enabled.\")\n\n    def callback_sequence():\n\"\"\"\n        Overall callback function.\n        \"\"\"\n        retrain_vecnet()\n        update_softlabel_plot()\n\n    model_trainer.on_click(callback_sequence)\n\n    return softlabel, model_trainer\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.subroutine.get_explorer_class","title":"<code>get_explorer_class(task, feature)</code>","text":"Get the right <code>hover.core.explorer</code> class given a task and a feature. <p>Can be useful for dynamically creating explorers without knowing the feature in advance.</p> Param Type Description <code>task</code> <code>str</code> name of the task, which can be <code>\"finder\"</code>, <code>\"annotator\"</code>, <code>\"margin\"</code>, <code>\"softlabel\"</code>, or <code>\"snorkel\"</code> <code>feature</code> <code>str</code> name of the main feature, which can be <code>\"text\"</code>, <code>\"audio\"</code> or <code>\"image\"</code> <p>Usage: <pre><code># this creates an instance of BokehTextFinder\nexplorer = get_explorer_class(\"finder\", \"text\")(*args, **kwargs)\n</code></pre></p> Source code in <code>hover/recipes/subroutine.py</code> <pre><code>def get_explorer_class(task, feature):\n\"\"\"\n    ???+ note \"Get the right `hover.core.explorer` class given a task and a feature.\"\n\n        Can be useful for dynamically creating explorers without knowing the feature in advance.\n\n        | Param     | Type  | Description                          |\n        | :-------- | :---- | :----------------------------------- |\n        | `task`    | `str` | name of the task, which can be `\"finder\"`, `\"annotator\"`, `\"margin\"`, `\"softlabel\"`, or `\"snorkel\"` |\n        | `feature` | `str` | name of the main feature, which can be `\"text\"`, `\"audio\"` or `\"image\"` |\n\n        Usage:\n        ```python\n        # this creates an instance of BokehTextFinder\n        explorer = get_explorer_class(\"finder\", \"text\")(*args, **kwargs)\n        ```\n    \"\"\"\n    assert task in EXPLORER_CATALOG, f\"Invalid task: {task}\"\n    assert feature in EXPLORER_CATALOG[task], f\"Invalid feature: {feature}\"\n    return EXPLORER_CATALOG[task][feature]\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.subroutine.recipe_layout","title":"<code>recipe_layout(*components, *, style='horizontal')</code>","text":"Create a recipe-level layout of bokeh objects. Param Type Description <code>*components</code> <code>bokeh</code> objects objects to be plotted <code>style</code> <code>str</code> \"horizontal\" or \"vertical\" Source code in <code>hover/recipes/subroutine.py</code> <pre><code>def recipe_layout(*components, style=\"horizontal\"):\n\"\"\"\n    ???+ note \"Create a recipe-level layout of bokeh objects.\"\n\n        | Param      | Type     | Description                          |\n        | :--------- | :------- | :----------------------------------- |\n        | `*components` | `bokeh` objects | objects to be plotted      |\n        | `style`    | `str`    | \"horizontal\" or \"vertical\"           |\n    \"\"\"\n    if style == \"horizontal\":\n        return row(*components)\n    elif style == \"vertical\":\n        return column(*components)\n    else:\n        raise ValueError(f\"Unexpected layout style {style}\")\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.subroutine.standard_annotator","title":"<code>standard_annotator(dataset, **kwargs)</code>","text":"Set up a <code>BokehDataAnnotator</code> for a <code>SupervisableDataset</code>. <p>The annotator has a few standard interactions with the dataset:</p> <ul> <li>read all subsets of the dataset</li> <li>subscribe to all updates in the dataset</li> <li>can commit annotations through selections in the \"raw\" subset</li> </ul> Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>**kwargs</code> kwargs to forward to the <code>BokehDataAnnotator</code> Source code in <code>hover/recipes/subroutine.py</code> <pre><code>def standard_annotator(dataset, **kwargs):\n\"\"\"\n    ???+ note \"Set up a `BokehDataAnnotator` for a `SupervisableDataset`.\"\n\n        The annotator has a few standard interactions with the dataset:\n\n        -   read all subsets of the dataset\n        -   subscribe to all updates in the dataset\n        -   can commit annotations through selections in the \"raw\" subset\n\n        | Param      | Type     | Description                          |\n        | :--------- | :------- | :----------------------------------- |\n        | `dataset`  | `SupervisableDataset` | the dataset to link to  |\n        | `**kwargs` | | kwargs to forward to the `BokehDataAnnotator` |\n    \"\"\"\n    # auto-detect the (main) feature to use\n    feature = dataset.__class__.FEATURE_KEY\n    explorer_cls = get_explorer_class(\"annotator\", feature)\n\n    # first \"static\" version of the plot\n    subsets = explorer_cls.SUBSET_GLYPH_KWARGS.keys()\n    annotator = explorer_cls.from_dataset(\n        dataset,\n        {_k: _k for _k in subsets},\n        title=\"Annotator: apply labels to selected RAW points\",\n        **kwargs,\n    )\n    annotator.activate_search()\n    annotator.plot()\n\n    # subscribe for df updates\n    dataset.subscribe_update_push(annotator, {_k: _k for _k in subsets})\n\n    # annotators can commit to a dataset\n    dataset.subscribe_data_commit(annotator, {\"raw\": \"raw\"})\n\n    # annotators by default link the selection for preview\n    dataset.subscribe_selection_view(annotator, [\"raw\", \"train\", \"dev\", \"test\"])\n    return annotator\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.subroutine.standard_finder","title":"<code>standard_finder(dataset, **kwargs)</code>","text":"Set up a <code>BokehDataFinder</code> for a <code>SupervisableDataset</code>. <p>The finder has a few standard interactions with the dataset:</p> <ul> <li>read all subsets of the dataset</li> <li>subscribe to all updates in the dataset</li> </ul> Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>**kwargs</code> kwargs to forward to the <code>BokehDataFinder</code> Source code in <code>hover/recipes/subroutine.py</code> <pre><code>def standard_finder(dataset, **kwargs):\n\"\"\"\n    ???+ note \"Set up a `BokehDataFinder` for a `SupervisableDataset`.\"\n\n        The finder has a few standard interactions with the dataset:\n\n        -   read all subsets of the dataset\n        -   subscribe to all updates in the dataset\n\n        | Param      | Type     | Description                          |\n        | :--------- | :------- | :----------------------------------- |\n        | `dataset`  | `SupervisableDataset` | the dataset to link to  |\n        | `**kwargs` | | kwargs to forward to the `BokehDataFinder` |\n    \"\"\"\n    # auto-detect the (main) feature to use\n    feature = dataset.__class__.FEATURE_KEY\n    explorer_cls = get_explorer_class(\"finder\", feature)\n\n    # first \"static\" version of the plot\n    subsets = explorer_cls.SUBSET_GLYPH_KWARGS.keys()\n    finder = explorer_cls.from_dataset(\n        dataset,\n        {_k: _k for _k in subsets},\n        title=\"Finder: use search for highlight and filter\",\n        **kwargs,\n    )\n    finder.activate_search()\n    finder.plot()\n\n    # subscribe for df updates\n    dataset.subscribe_update_push(finder, {_k: _k for _k in subsets})\n    return finder\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.subroutine.standard_snorkel","title":"<code>standard_snorkel(dataset, **kwargs)</code>","text":"Set up a <code>BokehSnorkelExplorer</code> for a <code>SupervisableDataset</code>. <p>The snorkel explorer has a few standard interactions with the dataset:</p> <ul> <li>read \"raw\" and \"dev\" subsets of the dataset, interpreting \"dev\" as \"labeled\"</li> <li>subscribe to all updates in those subsets</li> </ul> Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>**kwargs</code> kwargs to forward to the <code>BokehSnorkelExplorer</code> Source code in <code>hover/recipes/subroutine.py</code> <pre><code>def standard_snorkel(dataset, **kwargs):\n\"\"\"\n    ???+ note \"Set up a `BokehSnorkelExplorer` for a `SupervisableDataset`.\"\n\n        The snorkel explorer has a few standard interactions with the dataset:\n\n        -   read \"raw\" and \"dev\" subsets of the dataset, interpreting \"dev\" as \"labeled\"\n        -   subscribe to all updates in those subsets\n\n        | Param      | Type     | Description                          |\n        | :--------- | :------- | :----------------------------------- |\n        | `dataset`  | `SupervisableDataset` | the dataset to link to  |\n        | `**kwargs` | | kwargs to forward to the `BokehSnorkelExplorer` |\n    \"\"\"\n    # auto-detect the (main) feature to use\n    feature = dataset.__class__.FEATURE_KEY\n    explorer_cls = get_explorer_class(\"snorkel\", feature)\n\n    # first \"static\" version of the plot\n    snorkel = explorer_cls.from_dataset(\n        dataset,\n        {\"raw\": \"raw\", \"dev\": \"labeled\"},\n        title=\"Snorkel: \u25a1 for correct, x for incorrect, + for missed, o for hit; click on legends to hide or show LF\",\n        **kwargs,\n    )\n    snorkel.activate_search()\n    snorkel.plot()\n\n    # subscribe to dataset widgets\n    dataset.subscribe_update_push(snorkel, {\"raw\": \"raw\", \"dev\": \"labeled\"})\n    return snorkel\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.subroutine.standard_softlabel","title":"<code>standard_softlabel(dataset, **kwargs)</code>","text":"Set up a <code>BokehSoftLabelExplorer</code> for a <code>SupervisableDataset</code>. <p>The soft label explorer has a few standard interactions with the dataset:</p> <ul> <li>read all subsets of the dataset</li> <li>subscribe to all updates in the dataset</li> </ul> Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>**kwargs</code> kwargs to forward to <code>BokehSoftLabelExplorer</code> Source code in <code>hover/recipes/subroutine.py</code> <pre><code>def standard_softlabel(dataset, **kwargs):\n\"\"\"\n    ???+ note \"Set up a `BokehSoftLabelExplorer` for a `SupervisableDataset`.\"\n\n        The soft label explorer has a few standard interactions with the dataset:\n\n        -   read all subsets of the dataset\n        -   subscribe to all updates in the dataset\n\n        | Param      | Type     | Description                          |\n        | :--------- | :------- | :----------------------------------- |\n        | `dataset`  | `SupervisableDataset` | the dataset to link to  |\n        | `**kwargs` | | kwargs to forward to `BokehSoftLabelExplorer` |\n    \"\"\"\n    # auto-detect the (main) feature to use\n    feature = dataset.__class__.FEATURE_KEY\n    explorer_cls = get_explorer_class(\"softlabel\", feature)\n\n    # first \"static\" version of the plot\n    subsets = explorer_cls.SUBSET_GLYPH_KWARGS.keys()\n    softlabel = explorer_cls.from_dataset(\n        dataset,\n        {_k: _k for _k in subsets},\n        \"pred_label\",\n        \"pred_score\",\n        title=\"SoftLabel: inspect predictions and use score range as filter\",\n        **kwargs,\n    )\n    softlabel.activate_search()\n    softlabel.plot()\n\n    # subscribe to dataset widgets\n    dataset.subscribe_update_push(softlabel, {_k: _k for _k in subsets})\n    return softlabel\n</code></pre>"},{"location":"pages/reference/recipes/#hover.recipes.subroutine","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.subroutine.active_learning_components","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.subroutine.get_explorer_class","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.subroutine.recipe_layout","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.subroutine.standard_annotator","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.subroutine.standard_finder","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.subroutine.standard_snorkel","title":"hover.recipes","text":""},{"location":"pages/reference/recipes/#hover.recipes.subroutine.standard_softlabel","title":"hover.recipes","text":""},{"location":"pages/reference/utils-bokeh_helper/","title":"hover.utils.bokeh_helper","text":"<ul> <li> Useful subroutines for working with bokeh in general. </li> </ul>"},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.auto_label_color","title":"<code>auto_label_color(labels)</code>","text":"Create a label-&gt;hex color mapping dict. Source code in <code>hover/utils/bokeh_helper/__init__.py</code> <pre><code>def auto_label_color(labels):\n\"\"\"\n    ???+ note \"Create a label-&gt;hex color mapping dict.\"\n    \"\"\"\n    use_labels = set(labels)\n    use_labels.discard(module_config.ABSTAIN_DECODED)\n    use_labels = sorted(use_labels, reverse=False)\n\n    palette = hover.config[\"visual\"][\"bokeh_palette\"]\n    assert len(use_labels) &lt;= len(\n        palette\n    ), f\"Too many labels to support (max at {len(palette)})\"\n\n    use_palette_idx = np.linspace(0.0, len(palette), len(use_labels) + 2).astype(int)[\n        1:-1\n    ]\n    assert len(set(use_palette_idx)) == len(\n        use_palette_idx\n    ), \"Found repeated palette index\"\n    assert len(use_palette_idx) == len(\n        use_labels\n    ), \"Number of labels vs. palette colors must equal.\"\n\n    use_palette = [palette[i] for i in use_palette_idx]\n    color_dict = {\n        module_config.ABSTAIN_DECODED: module_config.ABSTAIN_HEXCOLOR,\n        **{_l: _c for _l, _c in zip(use_labels, use_palette)},\n    }\n    return color_dict\n</code></pre>"},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.binder_proxy_app_url","title":"<code>binder_proxy_app_url(app_path, port=5006)</code>","text":"Find the URL of Bokeh server app in the current Binder session. <p>Intended for visiting a Binder-hosted Bokeh server app.</p> <p>Will NOT work outside of Binder.</p> Source code in <code>hover/utils/bokeh_helper/__init__.py</code> <pre><code>def binder_proxy_app_url(app_path, port=5006):\n\"\"\"\n    ???+ note \"Find the URL of Bokeh server app in the current Binder session.\"\n\n        Intended for visiting a Binder-hosted Bokeh server app.\n\n        Will NOT work outside of Binder.\n    \"\"\"\n\n    service_url_path = os.environ.get(\n        \"JUPYTERHUB_SERVICE_PREFIX\", \"/user/hover-binder/\"\n    )\n    proxy_url_path = f\"proxy/{port}/{app_path}\"\n\n    base_url = \"https://hub.gke2.mybinder.org\"\n    user_url_path = urljoin(service_url_path, proxy_url_path)\n    full_url = urljoin(base_url, user_url_path)\n    return full_url\n</code></pre>"},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.bokeh_hover_tooltip","title":"<code>bokeh_hover_tooltip(label=None, text=None, image=None, audio=None, coords=True, index=True, custom=None)</code>","text":"Create a Bokeh hover tooltip from a template. Source code in <code>hover/utils/bokeh_helper/__init__.py</code> <pre><code>def bokeh_hover_tooltip(\n    label=None,\n    text=None,\n    image=None,\n    audio=None,\n    coords=True,\n    index=True,\n    custom=None,\n):\n\"\"\"\n    ???+ note \"Create a Bokeh hover tooltip from a template.\"\n    \"\"\"\n    # initialize default values of mutable type\n    label = label or dict(Label=label)\n    text = text or dict()\n    image = image or dict()\n    audio = audio or dict()\n    custom = custom or dict()\n\n    # prepare encapsulation of a div box and an associated script\n    divbox_prefix = \"\"\"&lt;div class=\"out tooltip\"&gt;\\n\"\"\"\n    divbox_suffix = \"\"\"&lt;/div&gt;\\n\"\"\"\n    script_prefix = \"\"\"&lt;script&gt;\\n\"\"\"\n    script_suffix = \"\"\"&lt;/script&gt;\\n\"\"\"\n\n    # dynamically add contents to the div box and the script\n    divbox = divbox_prefix\n    script = script_prefix\n\n    for _field, _key in label.items():\n        divbox += TOOLTIP_LABEL_TEMPLATE.format(field=_field, key=_key)\n\n    for _field, _key in text.items():\n        divbox += TOOLTIP_TEXT_TEMPLATE.format(field=_field, key=_key)\n\n    for _field, _style in image.items():\n        divbox += TOOLTIP_IMAGE_TEMPLATE.format(field=_field, style=_style)\n\n    for _field, _option in audio.items():\n        divbox += TOOLTIP_AUDIO_TEMPLATE.format(field=_field, option=_option)\n\n    if coords:\n        divbox += TOOLTIP_COORDS_DIV\n\n    if index:\n        divbox += TOOLTIP_INDEX_DIV\n\n    for _field, _key in custom.items():\n        divbox += TOOLTIP_CUSTOM_TEMPLATE.format(field=_field, key=_key)\n\n    divbox += divbox_suffix\n    script += script_suffix\n    return divbox + script\n</code></pre>"},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.remote_jupyter_proxy_url","title":"<code>remote_jupyter_proxy_url(port)</code>","text":"Callable to configure Bokeh's show method when using a proxy (JupyterHub). <p>Intended for rendering a in-notebook Bokeh app.</p> <p>Usage:</p> <pre><code># show(plot)\nshow(plot, notebook_url=remote_jupyter_proxy_url)\n</code></pre> Source code in <code>hover/utils/bokeh_helper/__init__.py</code> <pre><code>def remote_jupyter_proxy_url(port):\n\"\"\"\n    ???+ note \"Callable to configure Bokeh's show method when using a proxy (JupyterHub).\"\n\n        Intended for rendering a in-notebook Bokeh app.\n\n        Usage:\n\n        ```python\n        # show(plot)\n        show(plot, notebook_url=remote_jupyter_proxy_url)\n        ```\n    \"\"\"\n\n    # find JupyterHub base (external) url, default to Binder\n    base_url = os.environ.get(\"JUPYTERHUB_BASE_URL\", \"https://hub.gke2.mybinder.org\")\n    host = urlparse(base_url).netloc\n\n    if port is None:\n        return host\n\n    service_url_path = os.environ.get(\n        \"JUPYTERHUB_SERVICE_PREFIX\", \"/user/hover-binder/\"\n    )\n    proxy_url_path = f\"proxy/{port}\"\n\n    user_url = urljoin(base_url, service_url_path)\n    full_url = urljoin(user_url, proxy_url_path)\n    return full_url\n</code></pre>"},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.servable","title":"<code>servable(title=None)</code>","text":"Create a decorator which returns an app (or \"handle\" function) to be passed to bokeh. <p>Usage:</p> <p>First wrap a function that creates bokeh plot elements:</p> <pre><code>@servable()\ndef dummy(*args, **kwargs):\n    from hover.core.explorer import BokehCorpusAnnotator\n    annotator = BokehCorpusAnnotator(*args, **kwargs)\n    annotator.plot()\n\n    return annotator.view()\n</code></pre> <p>Then serve the app in your preferred setting:</p> inlinebokeh serveembedded app <pre><code># in a Jupyter cell\n\nfrom bokeh.io import show, output_notebook\noutput_notebook()\nshow(dummy(*args, **kwargs))\n</code></pre> <pre><code># in &lt;your-bokeh-app-dir&gt;/main.py\n\nfrom bokeh.io import curdoc\ndoc = curdoc()\ndummy(*args, **kwargs)(doc)\n</code></pre> <pre><code># anywhere in your use case\n\nfrom bokeh.server.server import Server\napp_dict = {\n    'my-app': dummy(*args, **kwargs),\n    'my-other-app': dummy(*args, **kwargs),\n}\nserver = Server(app_dict)\nserver.start()\n</code></pre> Source code in <code>hover/utils/bokeh_helper/__init__.py</code> <pre><code>def servable(title=None):\n\"\"\"\n    ???+ note \"Create a decorator which returns an app (or \"handle\" function) to be passed to bokeh.\"\n\n        Usage:\n\n        First wrap a function that creates bokeh plot elements:\n\n        ```python\n        @servable()\n        def dummy(*args, **kwargs):\n            from hover.core.explorer import BokehCorpusAnnotator\n            annotator = BokehCorpusAnnotator(*args, **kwargs)\n            annotator.plot()\n\n            return annotator.view()\n        ```\n\n        Then serve the app in your preferred setting:\n\n        === \"inline\"\n            ```python\n            # in a Jupyter cell\n\n            from bokeh.io import show, output_notebook\n            output_notebook()\n            show(dummy(*args, **kwargs))\n            ```\n\n        === \"bokeh serve\"\n            ```python\n            # in &lt;your-bokeh-app-dir&gt;/main.py\n\n            from bokeh.io import curdoc\n            doc = curdoc()\n            dummy(*args, **kwargs)(doc)\n            ```\n\n        === \"embedded app\"\n            ```python\n            # anywhere in your use case\n\n            from bokeh.server.server import Server\n            app_dict = {\n                'my-app': dummy(*args, **kwargs),\n                'my-other-app': dummy(*args, **kwargs),\n            }\n            server = Server(app_dict)\n            server.start()\n            ```\n    \"\"\"\n\n    def wrapper(func):\n        @wraps(func)\n        def wrapped(*args, **kwargs):\n            def handle(doc):\n\"\"\"\n                Note that the handle must create a brand new bokeh model every time it is called.\n\n                Reference: https://github.com/bokeh/bokeh/issues/8579\n                \"\"\"\n                spinner = PreText(text=\"loading...\")\n                layout = column(spinner)\n\n                def progress():\n\"\"\"\n                    If still loading, show some progress.\n                    \"\"\"\n                    if spinner in layout.children:\n                        spinner.text += \".\"\n\n                def load():\n                    try:\n                        bokeh_model = func(*args, **kwargs)\n                        layout.children.append(bokeh_model)\n                        layout.children.pop(0)\n                    except Exception as e:\n                        # exception handling\n                        message = PreText(text=f\"{type(e)}: {e}\\n{format_exc()}\")\n                        layout.children.append(message)\n\n                doc.add_root(layout)\n                doc.add_periodic_callback(progress, 5000)\n                doc.add_timeout_callback(load, 500)\n                doc.title = title or func.__name__\n\n            return handle\n\n        return wrapped\n\n    return wrapper\n</code></pre>"},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.show_as_interactive","title":"<code>show_as_interactive(obj, **kwargs)</code>","text":"Wrap a bokeh LayoutDOM as an application to allow Python callbacks. <p>Must have the same signature as <code>bokeh.io.show()</code>[https://docs.bokeh.org/en/latest/docs/reference/io.html#bokeh.io.show].</p> Source code in <code>hover/utils/bokeh_helper/__init__.py</code> <pre><code>def show_as_interactive(obj, **kwargs):\n\"\"\"\n    ???+ note \"Wrap a bokeh LayoutDOM as an application to allow Python callbacks.\"\n\n        Must have the same signature as `bokeh.io.show()`[https://docs.bokeh.org/en/latest/docs/reference/io.html#bokeh.io.show].\n    \"\"\"\n    from bokeh.io import show\n    from bokeh.models.layouts import LayoutDOM\n\n    assert isinstance(obj, LayoutDOM), f\"Expected Bokeh LayoutDOM, got {type(obj)}\"\n\n    def handle(doc):\n        doc.add_root(column(obj))\n\n    return show(handle, **kwargs)\n</code></pre>"},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.auto_label_color","title":"hover.utils.bokeh_helper","text":""},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.binder_proxy_app_url","title":"hover.utils.bokeh_helper","text":""},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.bokeh_hover_tooltip","title":"hover.utils.bokeh_helper","text":""},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.remote_jupyter_proxy_url","title":"hover.utils.bokeh_helper","text":""},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.servable","title":"hover.utils.bokeh_helper","text":""},{"location":"pages/reference/utils-bokeh_helper/#hover.utils.bokeh_helper.show_as_interactive","title":"hover.utils.bokeh_helper","text":""},{"location":"pages/reference/utils-snorkel_helper/","title":"hover.utils.snorkel_helper","text":""},{"location":"pages/reference/utils-snorkel_helper/#hover.utils.snorkel_helper.labeling_function","title":"<code>labeling_function(targets, label_encoder=None, **kwargs)</code>","text":"Hover's flavor of the Snorkel labeling_function decorator. <p>However, due to the dynamic label encoding nature of hover, the decorated function should return the original string label, not its encoding integer.</p> <ul> <li>assigns a UUID for easy identification</li> <li>keeps track of LF targets</li> </ul> Param Type Description <code>targets</code> <code>list</code> of <code>str</code> labels that the labeling function is intended to create <code>label_encoder</code> <code>dict</code> {decoded_label -&gt; encoded_label} mapping, if you also want an original snorkel-style labeling function linked as a <code>.snorkel</code> attribute <code>**kwargs</code> forwarded to <code>snorkel</code>'s <code>labeling_function()</code> Source code in <code>hover/utils/snorkel_helper.py</code> <pre><code>def labeling_function(targets, label_encoder=None, **kwargs):\n\"\"\"\n    ???+ note \"Hover's flavor of the Snorkel labeling_function decorator.\"\n        However, due to the dynamic label encoding nature of hover,\n        the decorated function should return the original string label, not its encoding integer.\n\n        - assigns a UUID for easy identification\n        - keeps track of LF targets\n\n        | Param           | Type   | Description                          |\n        | :-------------- | :----- | :----------------------------------- |\n        | `targets`       | `list` of `str` | labels that the labeling function is intended to create |\n        | `label_encoder` | `dict` | {decoded_label -&gt; encoded_label} mapping, if you also want an original snorkel-style labeling function linked as a `.snorkel` attribute |\n        | `**kwargs`      |        | forwarded to `snorkel`'s `labeling_function()` |\n    \"\"\"\n    # lazy import so that the package does not require snorkel\n    # Feb 3, 2022: snorkel's dependency handling is too strict\n    # for other dependencies like NumPy, SciPy, SpaCy, etc.\n    # Let's cite Snorkel and lazy import or copy functions.\n    # DO NOT explicitly depend on Snorkel without confirming\n    # that all builds/tests pass by Anaconda standards, else\n    # we risk having to drop conda support.\n    from snorkel.labeling import (\n        labeling_function as snorkel_lf,\n        LabelingFunction as SnorkelLF,\n    )\n\n    def wrapper(func):\n        # set up kwargs for Snorkel's LF\n        # a default name that can be overridden\n        snorkel_kwargs = {\"name\": func.__name__}\n        snorkel_kwargs.update(kwargs)\n\n        # return value of hover's decorator\n        lf = SnorkelLF(f=func, **snorkel_kwargs)\n\n        # additional attributes\n        lf.uuid = uuid.uuid1()\n        lf.targets = targets[:]\n\n        # link a snorkel-style labeling function if applicable\n        if label_encoder:\n            lf.label_encoder = label_encoder\n\n            def snorkel_style_func(x):\n                return lf.label_encoder[func(x)]\n\n            lf.snorkel = snorkel_lf(**kwargs)(snorkel_style_func)\n        else:\n            lf.label_encoder = None\n            lf.snorkel = None\n\n        return lf\n\n    return wrapper\n</code></pre>"},{"location":"pages/reference/utils-snorkel_helper/#hover.utils.snorkel_helper.labeling_function","title":"hover.utils.snorkel_helper","text":""},{"location":"pages/tutorial/t0-quickstart/","title":"Quickstart","text":"<p>Welcome to the basic use case of <code>hover</code>!</p> <p> Let's say we want to label some data and call it a day.</p>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p> Dependencies for  local environments  <p>When you run the code locally, you may need to install additional packages.</p> <p>To run the text embedding code on this page, you need:     <pre><code>pip install spacy\npython -m spacy download en_core_web_md\n</code></pre> To render <code>bokeh</code> plots in Jupyter, you need:     <pre><code>pip install jupyter_bokeh\n</code></pre></p> <pre><code>If you are using JupyterLab older than 3.0, use this instead ([reference](https://pypi.org/project/jupyter-bokeh/)):\n```shell\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install @bokeh/jupyter_bokeh\n```\n</code></pre>"},{"location":"pages/tutorial/t0-quickstart/#ingredient-1-3-raw-data","title":"Ingredient 1 / 3: Raw Data","text":"<p>Start with a spreadsheet loaded in <code>pandas</code>.</p> <p>We turn it into a <code>SupervisableDataset</code> designed for labeling:</p> <pre>\nfrom hover.core.dataset import SupervisableTextDataset\nimport pandas as pd\n\nexample_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_raw.csv\"\n# for fast, low-memory demonstration purpose, sample the data\ndf_raw = pd.read_csv(example_csv_path).sample(1000)\ndf_raw[\"text\"] = df_raw[\"text\"].astype(str)\n\n# data is divided into 4 subsets: \"raw\" / \"train\" / \"dev\" / \"test\"\n# this example assumes no labeled data available., i.e. only \"raw\"\ndf_raw[\"SUBSET\"] = \"raw\"\n\n# this class stores the dataset throught the labeling process\ndataset = SupervisableTextDataset.from_pandas(df_raw, feature_key=\"text\", label_key=\"label\")\n\n# each subset can be accessed as its own DataFrame\ndataset.dfs[\"raw\"].head(5)\n</pre> FAQ What if I have multiple features? <p><code>feature_key</code> refers to the field that will be vectorized later on, which can be a JSON that encloses multiple features.</p> <p>For example, suppose our data entries look like this: <pre><code>{\"f1\": \"foo\", \"f2\": \"bar\", \"non_feature\": \"abc\"}\n</code></pre></p> <p>We can put <code>f1</code> and <code>f2</code> in a JSON and convert the entries like this: <pre><code># could also keep f1 and f2 around\n{'feature': '{\"f1\": \"foo\", \"f2\": \"bar\"}', 'non_feature': 'abc'}\n</code></pre></p> Can I use audio or image data? <p>Yes! Please check out the \"Guides\" section of the documentation.</p>"},{"location":"pages/tutorial/t0-quickstart/#ingredient-2-3-embedding","title":"Ingredient 2 / 3: Embedding","text":"<p>A pre-trained embedding lets us group data points semantically.</p> <p>In particular, let's define a <code>data -&gt; embedding vector</code> function.</p> <pre>\nimport spacy\nimport re\nfrom functools import lru_cache\n\n# use your preferred embedding for the task\nnlp = spacy.load(\"en_core_web_md\")\n\n# raw data (str in this case) -&gt; np.array\n@lru_cache(maxsize=int(1e+4))\ndef vectorizer(text):\n    clean_text = re.sub(r\"[\\s]+\", r\" \", str(text))\n    return nlp(clean_text, disable=nlp.pipe_names).vector\n\ntext = dataset.dfs[\"raw\"].loc[0, \"text\"]\nvec = vectorizer(text)\nprint(f\"Text: {text}\")\nprint(f\"Vector shape: {vec.shape}\")\n</pre> Tips Caching <p><code>dataset</code> by itself stores the original features but not the corresponding vectors.</p> <p>To avoid vectorizing the same feature again and again, we could simply do: <pre><code>from functools import cache\n\n@cache\ndef vectorizer(feature):\n    # put code here\n</code></pre></p> <p>If you'd like to limit the size of the cache, something like <code>@lru_cache(maxsize=10000)</code> could help.</p> <p>Check out functools for more options.</p> Vectorizing multiple features <p>Suppose we have multiple features enclosed in a JSON:</p> <pre><code># could also keep f1 and f2 around\n{'feature': '{\"f1\": \"foo\", \"f2\": \"bar\"}', 'non_feature': 'abc'}\n</code></pre> <p>Also, suppose we have individual vectorizers likes this: <pre><code>def vectorizer_1(feature_1):\n    # put code here\n\ndef vectorizer_2(feature_2):\n    # put code here\n</code></pre></p> <p>Then we can define a composite vectorizer: <pre><code>import json\nimport numpy as np\n\ndef vectorizer(feature_json):\n    data_dict = json.loads(feature_json)\n    vectors = []\n    for field, func in [\n        (\"f1\", vectorizer_1),\n        (\"f2\", vectorizer_2),\n    ]:\n        vectors.append(func(data_dict[field]))\n\n    return np.concatenate(vectors)\n</code></pre></p>"},{"location":"pages/tutorial/t0-quickstart/#ingredient-3-3-2d-embedding","title":"Ingredient 3 / 3: 2D Embedding","text":"<p>We compute a 2D version of the pre-trained embedding to visualize the whole dataset.</p> <p>Hover has built-in methods for calling umap or ivis.</p> Dependencies (when in your own environment) <p>The libraries for this step are not directly required by <code>hover</code>:</p> <ul> <li>for umap: <code>pip install umap-learn</code></li> <li>for ivis: <code>pip install ivis[cpu]</code> or <code>pip install ivis[gpu]</code></li> </ul> <p><code>umap-learn</code> is installed in this demo environment.</p> <pre>\n# any kwargs will be passed onto the corresponding reduction\n# for umap: https://umap-learn.readthedocs.io/en/latest/parameters.html\n# for ivis: https://bering-ivis.readthedocs.io/en/latest/api.html\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=2)\n\n# what we did adds 'embed_2d_0' and 'embed_2d_1' columns to the DataFrames in dataset.dfs\ndataset.dfs[\"raw\"].head(5)\n</pre>"},{"location":"pages/tutorial/t0-quickstart/#apply-labels","title":"Apply Labels","text":"<p>We are ready for the annotation interface!</p> <pre>\nfrom hover.recipes.stable import simple_annotator\n\ninteractive_plot = simple_annotator(dataset)\n\n# ---------- SERVER MODE: for the documentation page ----------\n# because this tutorial is remotely hosted, we need explicit serving to expose the plot to you\nfrom local_lib.binder_helper import binder_proxy_app_url\nfrom bokeh.server.server import Server\nserver = Server({'/my-app': interactive_plot}, port=5007, allow_websocket_origin=['*'], use_xheaders=True)\nserver.start()\n# visit this URL printed in cell output to see the interactive plot; locally you would just do \"https://localhost:5007/my-app\"\nbinder_proxy_app_url('my-app', port=5007)\n\n# ---------- NOTEBOOK MODE: for your actual Jupyter environment ---------\n# this code will render the entire plot in Jupyter\n# from bokeh.io import show, output_notebook\n# output_notebook()\n# show(interactive_plot, notebook_url='https://localhost:8888')\n</pre> Tips: annotation interface basics Video guide <p></p> Text guide <p>There should be a <code>SupervisableDataset</code> board on the left and an <code>BokehDataAnnotator</code> on the right, each with a few buttons.</p> SupervisableDatasetBokehDataAnnotator <ul> <li><code>push</code>: push <code>Dataset</code> updates to the bokeh plots.</li> <li><code>commit</code>: add data entries selected in the <code>Annotator</code> to a specified subset.</li> <li><code>dedup</code>: deduplicate across subsets by <code>feature</code> (last in gets kept).</li> <li><code>export</code>: save your data (all subsets) in a specified format.</li> </ul> <ul> <li><code>raw</code>/<code>train</code>/<code>dev</code>/<code>test</code>: choose which subsets to display or hide.</li> <li><code>apply</code>: apply the <code>label</code> input to the selected points in the <code>raw</code> subset only.</li> </ul> <p>We've essentially put the data into neighborboods based on the vectorizer, but the quality (homogeneity of labels) of such neighborhoods can vary.</p> <ul> <li>hover over any data point to see its tooltip.</li> <li>take advantage of different selection tools to apply labels at appropriate scales.</li> <li>the search widget might turn out useful.<ul> <li>note that it does not select points but highlights them.</li> </ul> </li> </ul>"},{"location":"pages/tutorial/t1-active-learning/","title":"Using Recipes","text":"<p>The most common usage of <code>hover</code> is through built-in <code>recipe</code>s like in the quickstart.</p> <p> Let's explore another <code>recipe</code> -- an active learning example.</p>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p> Dependencies for  local environments  <p>When you run the code locally, you may need to install additional packages.</p> <p>To run the text embedding code on this page, you need:     <pre><code>pip install spacy\npython -m spacy download en_core_web_md\n</code></pre> To render <code>bokeh</code> plots in Jupyter, you need:     <pre><code>pip install jupyter_bokeh\n</code></pre></p> <pre><code>If you are using JupyterLab older than 3.0, use this instead ([reference](https://pypi.org/project/jupyter-bokeh/)):\n```shell\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install @bokeh/jupyter_bokeh\n```\n</code></pre>"},{"location":"pages/tutorial/t1-active-learning/#fundamentals","title":"Fundamentals","text":"<p>Hover <code>recipe</code>s are functions that take a <code>SupervisableDataset</code> and return an annotation interface.</p> <p>The <code>SupervisableDataset</code> is assumed to have some data and embeddings.</p>"},{"location":"pages/tutorial/t1-active-learning/#recap-data-embeddings","title":"Recap: Data &amp; Embeddings","text":"<p>Let's preprare a dataset with embeddings. This is almost the same as in the quickstart:</p> <pre>\nfrom hover.core.dataset import SupervisableTextDataset\nimport pandas as pd\n\nraw_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_raw.csv\"\ntrain_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_train.csv\"\n\n# for fast, low-memory demonstration purpose, sample the data\ndf_raw = pd.read_csv(raw_csv_path).sample(400)\ndf_raw[\"SUBSET\"] = \"raw\"\ndf_train = pd.read_csv(train_csv_path).sample(400)\ndf_train[\"SUBSET\"] = \"train\"\ndf_dev = pd.read_csv(train_csv_path).sample(100)\ndf_dev[\"SUBSET\"] = \"dev\"\ndf_test = pd.read_csv(train_csv_path).sample(100)\ndf_test[\"SUBSET\"] = \"test\"\n\n# build overall dataframe and ensure feature type\ndf = pd.concat([df_raw, df_train, df_dev, df_test])\ndf[\"text\"] = df[\"text\"].astype(str)\n\n# this class stores the dataset throught the labeling process\ndataset = SupervisableTextDataset.from_pandas(df, feature_key=\"text\", label_key=\"label\")\n</pre> <p></p> <pre>\nimport spacy\nimport re\nfrom functools import lru_cache\n\n# use your preferred embedding for the task\nnlp = spacy.load(\"en_core_web_md\")\n\n# raw data (str in this case) -&gt; np.array\n@lru_cache(maxsize=int(1e+4))\ndef vectorizer(text):\n    clean_text = re.sub(r\"[\\s]+\", r\" \", str(text))\n    return nlp(clean_text, disable=nlp.pipe_names).vector\n\ntext = dataset.dfs[\"raw\"].loc[0, \"text\"]\nvec = vectorizer(text)\nprint(f\"Text: {text}\")\nprint(f\"Vector shape: {vec.shape}\")\n</pre> <p></p> <pre>\n# any kwargs will be passed onto the corresponding reduction\n# for umap: https://umap-learn.readthedocs.io/en/latest/parameters.html\n# for ivis: https://bering-ivis.readthedocs.io/en/latest/api.html\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=2)\n</pre> <p></p>"},{"location":"pages/tutorial/t1-active-learning/#recipe-specific-ingredient","title":"Recipe-Specific Ingredient","text":"<p>Each recipe has different functionalities and potentially different signature.</p> <p>To utilize active learning, we need to specify how to get a model in the loop.</p> <p><code>hover</code> considers the <code>vectorizer</code> as a \"frozen\" embedding and follows up with a neural network, which infers its own dimensionality from the vectorizer and the output classes.</p> <ul> <li>This architecture named <code>VectorNet</code> is the (default) basis of active learning in <code>hover</code>.</li> </ul> Custom models <p>It is possible to use a model other than <code>VectorNet</code> or its subclass.</p> <p>You will need to implement the following methods with the same signatures as <code>VectorNet</code>:</p> <ul> <li><code>train</code></li> <li><code>save</code></li> <li><code>predict_proba</code></li> <li><code>prepare_loader</code></li> <li><code>manifold_trajectory</code></li> </ul> <pre>\nfrom hover.core.neural import VectorNet\nfrom hover.utils.common_nn import LogisticRegression\n\n# Create a model with vectorizer-NN architecture.\n# model.pt will point to a PyTorch state dict (to be created)\n# the label classes in the dataset can change, and vecnet can adjust to that\nvecnet = VectorNet(vectorizer, LogisticRegression, \"model.pt\", dataset.classes)\n\n# predict_proba accepts individual strings or list\n# text -&gt; vector -&gt; class probabilities\n# if no classes right now, will see an empty list\nprint(vecnet.predict_proba(text))\nprint(vecnet.predict_proba([text]))\n</pre> <p>Note how the callback dynamically takes <code>dataset.classes</code>, which means the model architecture will adapt when we add classes during annotation.</p>"},{"location":"pages/tutorial/t1-active-learning/#apply-labels","title":"Apply Labels","text":"<p>Now we invoke the <code>active_learning</code> recipe.</p> Tips: how recipes work programmatically <p>In general, a <code>recipe</code> is a function taking a <code>SupervisableDataset</code> and other arguments based on its functionality.</p> <p>Here are a few common recipes:</p> active_learningsimple_annotatorlinked_annotator Display the dataset for annotation, putting a classification model in the loop. <p>Currently works most smoothly with <code>VectorNet</code>.</p> Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>vecnet</code> <code>VectorNet</code> model to use in the loop <code>**kwargs</code> forwarded to each Bokeh figure <p>Expected visual layout:</p> SupervisableDataset BokehSoftLabelExplorer BokehDataAnnotator BokehDataFinder manage data subsets inspect model predictions make annotations search and filter Source code in <code>hover/recipes/experimental.py</code> <pre><code>@servable(title=\"Active Learning\")\ndef active_learning(dataset, vecnet, **kwargs):\n\"\"\"\n    ???+ note \"Display the dataset for annotation, putting a classification model in the loop.\"\n        Currently works most smoothly with `VectorNet`.\n\n        | Param     | Type     | Description                          |\n        | :-------- | :------- | :----------------------------------- |\n        | `dataset` | `SupervisableDataset` | the dataset to link to  |\n        | `vecnet`  | `VectorNet` | model to use in the loop          |\n        | `**kwargs` |         | forwarded to each Bokeh figure       |\n\n        Expected visual layout:\n\n        | SupervisableDataset | BokehSoftLabelExplorer    | BokehDataAnnotator | BokehDataFinder     |\n        | :------------------ | :------------------------ | :----------------- | :------------------ |\n        | manage data subsets | inspect model predictions | make annotations   | search and filter   |\n    \"\"\"\n    layout, _ = _active_learning(dataset, vecnet, **kwargs)\n    return layout\n</code></pre> Display the dataset with on a 2D map for annotation. Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>**kwargs</code> kwargs to forward to each Bokeh figure <p>Expected visual layout:</p> SupervisableDataset BokehDataAnnotator manage data subsets make annotations Source code in <code>hover/recipes/stable.py</code> <pre><code>@servable(title=\"Simple Annotator\")\ndef simple_annotator(dataset, **kwargs):\n\"\"\"\n    ???+ note \"Display the dataset with on a 2D map for annotation.\"\n\n        | Param     | Type     | Description                          |\n        | :-------- | :------- | :----------------------------------- |\n        | `dataset` | `SupervisableDataset` | the dataset to link to  |\n        | `**kwargs` |       | kwargs to forward to each Bokeh figure |\n\n        Expected visual layout:\n\n        | SupervisableDataset | BokehDataAnnotator |\n        | :------------------ | :----------------- |\n        | manage data subsets | make annotations   |\n    \"\"\"\n    layout, _ = _simple_annotator(dataset, **kwargs)\n    return layout\n</code></pre> Display the dataset on a 2D map in two views, one for search and one for annotation. Param Type Description <code>dataset</code> <code>SupervisableDataset</code> the dataset to link to <code>**kwargs</code> kwargs to forward to each Bokeh figure <p>Expected visual layout:</p> SupervisableDataset BokehDataFinder BokehDataAnnotator manage data subsets search -&gt; highlight make annotations Source code in <code>hover/recipes/stable.py</code> <pre><code>@servable(title=\"Linked Annotator\")\ndef linked_annotator(dataset, **kwargs):\n\"\"\"\n    ???+ note \"Display the dataset on a 2D map in two views, one for search and one for annotation.\"\n\n        | Param     | Type     | Description                          |\n        | :-------- | :------- | :----------------------------------- |\n        | `dataset` | `SupervisableDataset` | the dataset to link to  |\n        | `**kwargs` |       | kwargs to forward to each Bokeh figure |\n\n        Expected visual layout:\n\n        | SupervisableDataset | BokehDataFinder     | BokehDataAnnotator |\n        | :------------------ | :------------------ | :----------------- |\n        | manage data subsets | search -&gt; highlight | make annotations   |\n    \"\"\"\n    layout, _ = _linked_annotator(dataset, **kwargs)\n    return layout\n</code></pre> <p>The recipe returns a <code>handle</code> function which <code>bokeh</code> can use to visualize an annotation interface in multiple settings.</p> <pre>\nfrom hover.recipes.experimental import active_learning\n\ninteractive_plot = active_learning(dataset, vecnet)\n\n# ---------- SERVER MODE: for the documentation page ----------\n# because this tutorial is remotely hosted, we need explicit serving to expose the plot to you\nfrom local_lib.binder_helper import binder_proxy_app_url\nfrom bokeh.server.server import Server\nserver = Server({'/my-app': interactive_plot}, port=5007, allow_websocket_origin=['*'], use_xheaders=True)\nserver.start()\n# visit this URL printed in cell output to see the interactive plot; locally you would just do \"https://localhost:5007/my-app\"\nbinder_proxy_app_url('my-app', port=5007)\n\n# ---------- NOTEBOOK MODE: for your actual Jupyter environment ---------\n# this code will render the entire plot in Jupyter\n# from bokeh.io import show, output_notebook\n# output_notebook()\n# show(interactive_plot, notebook_url='https://localhost:8888')\n</pre> Tips: annotation interface with multiple plots Video guide: leveraging linked selection <p></p> Video guide: active learning <p></p> Text guide: active learning <p>Inspecting model predictions allows us to</p> <ul> <li>get an idea of how the current set of annotations will likely teach the model.</li> <li>locate the most valuable samples for further annotation.</li> </ul>"},{"location":"pages/tutorial/t2-bokeh-app/","title":"Server Options","text":"<p><code>hover</code> creates a <code>bokeh</code> server app to deliver its annotation interface.</p> <p> This app can be served flexibly based on your needs.</p>"},{"location":"pages/tutorial/t2-bokeh-app/#prerequisites","title":"Prerequisites","text":"<p>Suppose that we've already used a <code>recipe</code> to create a <code>handle</code> function like in the quickstart.</p> Recap from the tutorials before <ul> <li>the <code>handle</code> is a function which renders plot elements on a <code>bokeh</code> document.</li> </ul>"},{"location":"pages/tutorial/t2-bokeh-app/#option-1-jupyter","title":"Option 1: Jupyter","text":"<p>We are probably familiar with this now:</p> <pre><code>from bokeh.io import show, output_notebook\noutput_notebook()\nshow(handle) # notebook_url='http://localhost:8888'\n</code></pre> Pros &amp; Cons <p>This inline Jupyter mode can integrate particularly well with your notebook workflow. For example, when your are (tentatively) done with annotation, the <code>SupervisableDataset</code> can be accessed directly in the notebook, rather than exported to a file and loaded back.</p> <p>The inline mode is highly recommended for local usage.</p> <ul> <li> <p>On the contrary, with a remote Jupyter server, it may have trouble displaying the plots.</p> <ul> <li>this can be due to failure of loading JavaScript libraries or accessing implicit bokeh server ports.</li> </ul> </li> </ul>"},{"location":"pages/tutorial/t2-bokeh-app/#option-2-command-line","title":"Option 2: Command Line","text":"<p><code>bokeh serve</code> starts an explicit <code>tornado</code> server from the command line:</p> <pre><code>bokeh serve my-app.py\n</code></pre> <pre><code># my-app.py\n\n# handle = ...\n\nfrom bokeh.io import curdoc\ndoc = curdoc()\nhandle(doc)\n</code></pre> Pros &amp; Cons <p>This is the \"classic\" approach to run a <code>bokeh</code> server. Remote access is simple through parameters specified here. The bokeh plot tools are mobile-friendly too -- this means you can host a server, e.g. an http-enabled cloud virtual machine, and annotate from a tablet.</p> <p>The command line mode is less interactive, since Python objects in the script cannot be accessed on the fly.</p>"},{"location":"pages/tutorial/t2-bokeh-app/#option-3-anywhere-in-python","title":"Option 3: Anywhere in Python","text":"<p>It is possible to embed the app in regular Python:</p> <pre><code>from bokeh.server.server import Server\nserver = Server({'/my-app': handle})\nserver.start()\n</code></pre> Pros &amp; Cons <p>This embedded mode is a go-to for serving within a greater application.</p> <p>Also note that each command line argument for <code>bokeh serve</code> has a corresponding keyword argument to <code>Server()</code>.</p> <p>For instance, <code>bokeh serve &lt;args&gt; --allow-websocket-origin=*</code> in the command line mirrors <code>Server(*args, allow_websocket_origin='*')</code> in Python.</p> <p>The embedded mode gives you the most control of your server.</p>"},{"location":"pages/tutorial/t3-dataset-population-selection/","title":"Dataset Mechanisms","text":"<p><code>SupervisableDataset</code> holds your data throughout the labeling process.</p> <p> Let's take a look at its core mechanisms.</p>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p> This page addresses single components of <code>hover</code> <p>We are using code snippets to pick out parts of the annotation interface, so that the documentation can explain what they do.</p> <ul> <li>Please be aware that this is NOT how one would typically use <code>hover</code>.</li> <li>Typical usage deals with recipes where the individual parts have been tied together.</li> </ul> Dependencies for  local environments  <p>When you run the code locally, you may need to install additional packages.</p> <p>To render <code>bokeh</code> plots in Jupyter, you need:     <pre><code>pip install jupyter_bokeh\n</code></pre></p> <pre><code>If you are using JupyterLab older than 3.0, use this instead ([reference](https://pypi.org/project/jupyter-bokeh/)):\n```shell\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install @bokeh/jupyter_bokeh\n```\n</code></pre>"},{"location":"pages/tutorial/t3-dataset-population-selection/#data-subsets","title":"Data Subsets","text":"<p>We place unlabeled data and labeled data in different subsets: \"raw\", \"train\", \"dev\", and \"test\". Unlabeled data start from the \"raw\" subset, and can be transferred to other subsets after it gets labeled.</p> <p><code>SupervisableDataset</code> uses a \"population table\", <code>dataset.pop_table</code>, to show the size of each subset:</p> <pre>\nfrom hover.core.dataset import SupervisableTextDataset\nimport pandas as pd\n\nraw_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_raw.csv\"\ntrain_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_train.csv\"\n\n# for fast, low-memory demonstration purpose, sample the data\ndf_raw = pd.read_csv(raw_csv_path).sample(400)\ndf_raw[\"SUBSET\"] = \"raw\"\ndf_train = pd.read_csv(train_csv_path).sample(400)\ndf_train[\"SUBSET\"] = \"train\"\ndf_dev = pd.read_csv(train_csv_path).sample(100)\ndf_dev[\"SUBSET\"] = \"dev\"\ndf_test = pd.read_csv(train_csv_path).sample(100)\ndf_test[\"SUBSET\"] = \"test\"\n\n# build overall dataframe and ensure feature type\ndf = pd.concat([df_raw, df_train, df_dev, df_test])\ndf[\"text\"] = df[\"text\"].astype(str)\n\n# this class stores the dataset throught the labeling process\ndataset = SupervisableTextDataset.from_pandas(df, feature_key=\"text\", label_key=\"label\")\n</pre> <p></p> <pre>\nfrom bokeh.io import show, output_notebook\n\noutput_notebook()\n\n# normally your would skip notebook_url or use Jupyter address\nnotebook_url = 'localhost:8888'\n\n# special configuration for this remotely hosted tutorial\nfrom local_lib.binder_helper import remote_jupyter_proxy_url\nnotebook_url = remote_jupyter_proxy_url\n\nshow(dataset.pop_table, notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t3-dataset-population-selection/#transfer-data-between-subsets","title":"Transfer Data Between Subsets","text":"<p><code>COMMIT</code> and <code>DEDUP</code> are the mechanisms that <code>hover</code> uses to transfer data between subsets.</p> <ul> <li><code>COMMIT</code> copies selected points (to be discussed later) to a destination subset<ul> <li>labeled-raw-only: <code>COMMIT</code> automatically detects which points are in the raw set with a valid label. Other points will not get copied.</li> <li>keep-last: you can commit the same point to the same subset multiple times and the last copy will be kept. This can be useful for revising labels before <code>DEDUP</code>.</li> </ul> </li> <li><code>DEDUP</code> removes duplicates (identified by feature value) across subsets<ul> <li>priority rule: test &gt; dev &gt; train &gt; raw, i.e. test set data always gets kept during deduplication</li> </ul> </li> </ul> FAQ Why does COMMIT only work on the raw subset? <p>Most selections will happen through plots, where different subsets are on top of each other. This means selections can contain both unlabeled and labeled points.</p> <p>Way too often we find ourselves trying to view both the labeled and the unlabeled, but only moving the unlabeled \"raw\" points. So it's handy that COMMIT picks those points only.</p> <p>These mechanisms correspond to buttons in <code>hover</code>'s annotation interface, which you have encountered in the quickstart:</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nfrom bokeh.layouts import row, column\n\nshow(column(\n    row(\n        dataset.data_committer,\n        dataset.dedup_trigger,\n    ),\n    dataset.pop_table,\n), notebook_url=notebook_url)\n</pre> <p></p> <p>Of course, so far we have nothing to move, because there's no data selected. We shall now discuss selections.</p>"},{"location":"pages/tutorial/t3-dataset-population-selection/#selection","title":"Selection","text":"<p><code>hover</code> labels data points in bulk, which requires selecting groups of homogeneous data, i.e. semantically similar or going to have the same label. Being able to skim through what you selected gives you confidence about homogeneity.</p> <p>Normally, selection happens through a plot (<code>explorer</code>), as we have seen in the quickstart. For the purpose here, we will \"cheat\" and assign the selection programmatically:</p> <pre>\ndataset._callback_update_selection(dataset.dfs[\"raw\"].loc[:10])\n\nshow(dataset.sel_table, notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t3-dataset-population-selection/#edit-data-within-a-selection","title":"Edit Data Within a Selection","text":"<p>Often the points selected are not perfectly homogeneous, i.e. some outliers belong to a different label from the selected group overall. It would be helpful to <code>EVICT</code> them, and <code>SupervisableDataset</code> has a button for it.</p> <p>Sometimes you may also wish to edit data values on the fly.  In hover this is called <code>PATCH</code>, and there also is a button for it.</p> <ul> <li>by default, labels can be edited but feature values cannot.</li> </ul> <p>Let's plot the forementioned buttons along with the selection table. Toggle any number of rows in the table, then click the button to <code>EVICT</code> or <code>PATCH</code> those rows:</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nshow(column(\n    row(\n        dataset.selection_evictor,\n        dataset.selection_patcher,\n    ),\n    dataset.sel_table,\n), notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/","title":"Annotator & Plot Tools","text":"<p><code>Annotator</code> is an <code>explorer</code> which provides a map of your data colored by labels.</p> <p> Let's walk through its components and how they interact with the <code>dataset</code>.</p> <ul> <li> You will find many of these components again in other <code>explorer</code>s. </li> </ul>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p> This page addresses single components of <code>hover</code> <p>We are using code snippets to pick out parts of the annotation interface, so that the documentation can explain what they do.</p> <ul> <li>Please be aware that this is NOT how one would typically use <code>hover</code>.</li> <li>Typical usage deals with recipes where the individual parts have been tied together.</li> </ul> Dependencies for  local environments  <p>When you run the code locally, you may need to install additional packages.</p> <p>To run the text embedding code on this page, you need:     <pre><code>pip install spacy\npython -m spacy download en_core_web_md\n</code></pre> To render <code>bokeh</code> plots in Jupyter, you need:     <pre><code>pip install jupyter_bokeh\n</code></pre></p> <pre><code>If you are using JupyterLab older than 3.0, use this instead ([reference](https://pypi.org/project/jupyter-bokeh/)):\n```shell\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install @bokeh/jupyter_bokeh\n```\n</code></pre>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#preparation","title":"Preparation","text":"<p>As always, start with a ready-for-plot dataset:</p> <pre>\nfrom hover.core.dataset import SupervisableTextDataset\nimport pandas as pd\n\nraw_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_raw.csv\"\ntrain_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_train.csv\"\n\n# for fast, low-memory demonstration purpose, sample the data\ndf_raw = pd.read_csv(raw_csv_path).sample(400)\ndf_raw[\"SUBSET\"] = \"raw\"\ndf_train = pd.read_csv(train_csv_path).sample(400)\ndf_train[\"SUBSET\"] = \"train\"\ndf_dev = pd.read_csv(train_csv_path).sample(100)\ndf_dev[\"SUBSET\"] = \"dev\"\ndf_test = pd.read_csv(train_csv_path).sample(100)\ndf_test[\"SUBSET\"] = \"test\"\n\n# build overall dataframe and ensure feature type\ndf = pd.concat([df_raw, df_train, df_dev, df_test])\ndf[\"text\"] = df[\"text\"].astype(str)\n\n# this class stores the dataset throught the labeling process\ndataset = SupervisableTextDataset.from_pandas(df, feature_key=\"text\", label_key=\"label\")\n</pre> <p></p> <pre>\nimport spacy\nimport re\nfrom functools import lru_cache\n\n# use your preferred embedding for the task\nnlp = spacy.load(\"en_core_web_md\")\n\n# raw data (str in this case) -&gt; np.array\n@lru_cache(maxsize=int(1e+4))\ndef vectorizer(text):\n    clean_text = re.sub(r\"[\\s]+\", r\" \", str(text))\n    return nlp(clean_text, disable=nlp.pipe_names).vector\n\n# any kwargs will be passed onto the corresponding reduction\n# for umap: https://umap-learn.readthedocs.io/en/latest/parameters.html\n# for ivis: https://bering-ivis.readthedocs.io/en/latest/api.html\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=2)\n</pre> <p></p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#scatter-plot-semantically-similar-points-are-close-together","title":"Scatter Plot: Semantically Similar Points are Close Together","text":"<p><code>hover</code> labels data points in bulk, which requires selecting groups of homogeneous data.</p> <p>The core of the annotator is a scatter plot and labeling widgets:</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nfrom bokeh.io import show, output_notebook\n\noutput_notebook()\n\n# normally your would skip notebook_url or use Jupyter address\nnotebook_url = 'localhost:8888'\n\n# special configuration for this remotely hosted tutorial\nfrom local_lib.binder_helper import remote_jupyter_proxy_url\nnotebook_url = remote_jupyter_proxy_url\n\nfrom hover.recipes.subroutine import standard_annotator\nfrom bokeh.layouts import row, column\n\nannotator = standard_annotator(dataset)\nshow(column(\n    row(annotator.annotator_input, annotator.annotator_apply),\n    annotator.figure,\n), notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#select-points-on-the-plot","title":"Select Points on the Plot","text":"<p>On the right of the scatter plot, you can find tap, polygon, and lasso tools which can select data points.</p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#view-tooltips-with-mouse-hover","title":"View Tooltips with Mouse Hover","text":"<p>Embeddings are helpful but rarely perfect. This is why we have tooltips that show the detail of each point on mouse hover, allowing us to inspect points, discover patterns, and come up with new labels on the fly.</p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#show-hide-subsets","title":"Show &amp; Hide Subsets","text":"<p>Showing labeled subsets can tell you which parts of the data has been explored and which ones have not. With toggle buttons, you can turn on/off the display for any subset.</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nshow(annotator.data_key_button_group, notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#make-consecutive-selections","title":"Make Consecutive Selections","text":"<p>Ever selected multiple (non-adjacent) files in your file system using Ctrl/Command?</p> <p>Similarly but more powerfully, you can make consecutive selections with a \"keep selecting\" option.</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nshow(annotator.selection_option_box, notebook_url=notebook_url)\n</pre> <p></p> Selection option values: what do they do? <p>Basic set operations on your old &amp; new selection. Quick intro here</p> <ul> <li><code>none</code>: the default, where a new selection <code>B</code> simply replaces the old one <code>A</code>.</li> <li><code>union</code>: <code>A \u222a B</code>, the new selection gets unioned with the old one.<ul> <li>this resembles the Ctrl/Command mentioned above.</li> </ul> </li> <li><code>intersection</code>: <code>A \u2229 B</code>, the new selection gets intersected with the old one.<ul> <li>this is particularly useful when going beyond simple 2D plots.</li> </ul> </li> <li><code>difference</code>: <code>A \u2216 B</code>, the new selection gets subtracted from the old one.<ul> <li>this is for de-selecting outliers.</li> </ul> </li> </ul>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#change-plot-axes","title":"Change Plot Axes","text":"<p><code>hover</code> supports dynamically choosing which embedding dimensions to use for your 2D plot. This becomes nontrivial, and sometimes very useful, when we have a 3D embedding (or higher):</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=3)\n\nannotator = standard_annotator(dataset)\n\nshow(column(\n    row(annotator.dropdown_x_axis, annotator.dropdown_y_axis),\n    annotator.figure,\n), notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#text-search-widget-includeexclude","title":"Text Search Widget: Include/Exclude","text":"<p>Keywords or regular expressions can be great starting points for identifying a cluster of similar points based on domain expertise.</p> <p>You may specify a positive regular expression to look for and/or a negative one to not look for.</p> <p>The <code>annotator</code> will amplify the sizes of positive-match data points and shrink those of negative matches.</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nshow(row(annotator.search_pos, annotator.search_neg), notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#preview-use-search-for-selection-in-finder","title":"Preview: Use Search for Selection in Finder","text":"<p>In a particular kind of plots called <code>finder</code> (see later in the tutorials), the search widget can directly operate on your selection as a filter.</p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#the-plot-and-the-dataset","title":"The Plot and The Dataset","text":"<p>When we apply labels through the annotator plot, it's acutally the <code>dataset</code> behind the plot that gets immediately updated. The plot itself is not in direct sync with the dataset, which is a design choice for performance. Instead, we will use a trigger called <code>PUSH</code> for updating the data entries to the plot.</p>"},{"location":"pages/tutorial/t4-annotator-dataset-interaction/#push-synchronize-from-dataset-to-plots","title":"PUSH: Synchronize from Dataset to Plots","text":"<p>Below is the full interface of the <code>dataset</code>, where you can find a green \"Push\" button:</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nshow(dataset.view(), notebook_url=notebook_url)\n</pre> <p>In a built-in <code>recipe</code>, the \"Push\" button will update the latest data to every <code>explorer</code> linked to the <code>dataset</code>.</p>"},{"location":"pages/tutorial/t5-finder-filter/","title":"Finder & Selection Filter","text":"<p><code>Finder</code> is an <code>explorer</code> focused on search.</p> <p> It can help you select points using a filter based on search results.</p>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p> This page addresses single components of <code>hover</code> <p>We are using code snippets to pick out parts of the annotation interface, so that the documentation can explain what they do.</p> <ul> <li>Please be aware that this is NOT how one would typically use <code>hover</code>.</li> <li>Typical usage deals with recipes where the individual parts have been tied together.</li> </ul> Dependencies for  local environments  <p>When you run the code locally, you may need to install additional packages.</p> <p>To run the text embedding code on this page, you need:     <pre><code>pip install spacy\npython -m spacy download en_core_web_md\n</code></pre> To render <code>bokeh</code> plots in Jupyter, you need:     <pre><code>pip install jupyter_bokeh\n</code></pre></p> <pre><code>If you are using JupyterLab older than 3.0, use this instead ([reference](https://pypi.org/project/jupyter-bokeh/)):\n```shell\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install @bokeh/jupyter_bokeh\n```\n</code></pre>"},{"location":"pages/tutorial/t5-finder-filter/#more-angles-better-results","title":"More Angles -&gt; Better Results","text":"<p><code>Explorer</code>s other than <code>annotator</code> are specialized in finding additional insight to help us understand the data. Having them juxtaposed with <code>annotator</code>, we can label more accurately, more confidently, and even faster.</p>"},{"location":"pages/tutorial/t5-finder-filter/#preparation","title":"Preparation","text":"<p>As always, start with a ready-for-plot dataset:</p> <pre>\nfrom hover.core.dataset import SupervisableTextDataset\nimport pandas as pd\n\nraw_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_raw.csv\"\ntrain_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_train.csv\"\n\n# for fast, low-memory demonstration purpose, sample the data\ndf_raw = pd.read_csv(raw_csv_path).sample(400)\ndf_raw[\"SUBSET\"] = \"raw\"\ndf_train = pd.read_csv(train_csv_path).sample(400)\ndf_train[\"SUBSET\"] = \"train\"\ndf_dev = pd.read_csv(train_csv_path).sample(100)\ndf_dev[\"SUBSET\"] = \"dev\"\ndf_test = pd.read_csv(train_csv_path).sample(100)\ndf_test[\"SUBSET\"] = \"test\"\n\n# build overall dataframe and ensure feature type\ndf = pd.concat([df_raw, df_train, df_dev, df_test])\ndf[\"text\"] = df[\"text\"].astype(str)\n\n# this class stores the dataset throught the labeling process\ndataset = SupervisableTextDataset.from_pandas(df, feature_key=\"text\", label_key=\"label\")\n</pre> <p></p> <pre>\nimport spacy\nimport re\nfrom functools import lru_cache\n\n# use your preferred embedding for the task\nnlp = spacy.load(\"en_core_web_md\")\n\n# raw data (str in this case) -&gt; np.array\n@lru_cache(maxsize=int(1e+4))\ndef vectorizer(text):\n    clean_text = re.sub(r\"[\\s]+\", r\" \", str(text))\n    return nlp(clean_text, disable=nlp.pipe_names).vector\n\n# any kwargs will be passed onto the corresponding reduction\n# for umap: https://umap-learn.readthedocs.io/en/latest/parameters.html\n# for ivis: https://bering-ivis.readthedocs.io/en/latest/api.html\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=2)\n</pre> <p></p>"},{"location":"pages/tutorial/t5-finder-filter/#filter-toggles","title":"Filter Toggles","text":"<p>When we use lasso or polygon select, we are describing a shape. Sometimes that shape is not accurate enough -- we need extra conditions to narrow down the data.</p> <p>Just like <code>annotator</code>, <code>finder</code> has search widgets. But unlike <code>annotator</code>, <code>finder</code> has a filter toggle which can directly intersect what we selected with what meets the search criteria.</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nfrom bokeh.io import show, output_notebook\n\noutput_notebook()\n\n# normally your would skip notebook_url or use Jupyter address\nnotebook_url = 'localhost:8888'\n\n# special configuration for this remotely hosted tutorial\nfrom local_lib.binder_helper import remote_jupyter_proxy_url\nnotebook_url = remote_jupyter_proxy_url\n\nfrom hover.recipes.subroutine import standard_finder\nfrom bokeh.layouts import row, column\n\nfinder = standard_finder(dataset)\nshow(row(\n    column(finder.search_pos, finder.search_neg),\n    finder.search_filter_box,\n), notebook_url=notebook_url)\n</pre> <p></p> <p>Next to the search widgets is a checkbox. The filter will stay active as long as the checkbox is.</p> How the filter interacts with selection options <p>Selection options apply before filters.</p> <p><code>hover</code> memorizes your pre-filter selections, so you can keep selecting without having to tweaking the filter toggle.</p> <ul> <li> <p>Example:</p> <ul> <li>suppose you have previously selected a set of points called <code>A</code>.</li> <li>then you toggled a filter <code>f</code>, giving you <code>A\u2229F</code> where <code>F</code> is the set satisfying <code>f</code>.</li> <li>now, with selection option \"union\", you select a set of points called <code>B</code>.</li> <li>your current selection will be <code>(A \u222a B) \u2229 F</code>, i.e. <code>(A \u2229 F) \u222a (B \u2229 F)</code>.<ul> <li>similarly, you would get <code>(A \u2229 B) \u2229 F</code> for \"intersection\" and <code>(A \u2216 B) \u2229 F</code> for \"difference\".</li> </ul> </li> <li>if you untoggle the filter now, you selection would be <code>A \u222a B</code>.</li> </ul> </li> <li> <p>In the later tutorials, we shall see multiple filters in action together.</p> <ul> <li>spoiler: <code>F = F1 \u2229 F2 \u2229 ...</code> and that's it!</li> </ul> </li> </ul>"},{"location":"pages/tutorial/t5-finder-filter/#stronger-highlight-for-search","title":"Stronger Highlight for Search","text":"<p><code>finder</code> also colors data points based on search criteria, making them easier to find.</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nshow(column(\n    row(finder.search_pos, finder.search_neg),\n    finder.figure,\n), notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t6-softlabel-joint-filter/","title":"Soft Label & Joint Filters","text":"<p><code>hover</code> filters can stack together.</p> <p> This makes selections incredibly powerful.</p>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p> This page addresses single components of <code>hover</code> <p>We are using code snippets to pick out parts of the annotation interface, so that the documentation can explain what they do.</p> <ul> <li>Please be aware that this is NOT how one would typically use <code>hover</code>.</li> <li>Typical usage deals with recipes where the individual parts have been tied together.</li> </ul> Dependencies for  local environments  <p>When you run the code locally, you may need to install additional packages.</p> <p>To run the text embedding code on this page, you need:     <pre><code>pip install spacy\npython -m spacy download en_core_web_md\n</code></pre> To render <code>bokeh</code> plots in Jupyter, you need:     <pre><code>pip install jupyter_bokeh\n</code></pre></p> <pre><code>If you are using JupyterLab older than 3.0, use this instead ([reference](https://pypi.org/project/jupyter-bokeh/)):\n```shell\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install @bokeh/jupyter_bokeh\n```\n</code></pre>"},{"location":"pages/tutorial/t6-softlabel-joint-filter/#preparation","title":"Preparation","text":"<p>As always, start with a ready-for-plot dataset:</p> <pre>\nfrom hover.core.dataset import SupervisableTextDataset\nimport pandas as pd\n\nraw_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_raw.csv\"\ntrain_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_train.csv\"\n\n# for fast, low-memory demonstration purpose, sample the data\ndf_raw = pd.read_csv(raw_csv_path).sample(400)\ndf_raw[\"SUBSET\"] = \"raw\"\ndf_train = pd.read_csv(train_csv_path).sample(400)\ndf_train[\"SUBSET\"] = \"train\"\ndf_dev = pd.read_csv(train_csv_path).sample(100)\ndf_dev[\"SUBSET\"] = \"dev\"\ndf_test = pd.read_csv(train_csv_path).sample(100)\ndf_test[\"SUBSET\"] = \"test\"\n\n# build overall dataframe and ensure feature type\ndf = pd.concat([df_raw, df_train, df_dev, df_test])\ndf[\"text\"] = df[\"text\"].astype(str)\n\n# this class stores the dataset throught the labeling process\ndataset = SupervisableTextDataset.from_pandas(df, feature_key=\"text\", label_key=\"label\")\n</pre> <p></p> <pre>\nimport spacy\nimport re\nfrom functools import lru_cache\n\n# use your preferred embedding for the task\nnlp = spacy.load(\"en_core_web_md\")\n\n# raw data (str in this case) -&gt; np.array\n@lru_cache(maxsize=int(1e+4))\ndef vectorizer(text):\n    clean_text = re.sub(r\"[\\s]+\", r\" \", str(text))\n    return nlp(clean_text, disable=nlp.pipe_names).vector\n\n# any kwargs will be passed onto the corresponding reduction\n# for umap: https://umap-learn.readthedocs.io/en/latest/parameters.html\n# for ivis: https://bering-ivis.readthedocs.io/en/latest/api.html\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=2)\n</pre> <p></p>"},{"location":"pages/tutorial/t6-softlabel-joint-filter/#soft-label-explorer","title":"Soft-Label Explorer","text":"<p>Active learning works by predicting labels and scores (i.e. soft labels) and utilizing that prediction. An intuitive way to plot soft labels is to color-code labels and use opacity (\"alpha\" by <code>bokeh</code> terminology) to represent scores.</p> <p><code>SoftLabelExplorer</code> delivers this functionality:</p> <pre>\nfrom bokeh.io import show, output_notebook\n\noutput_notebook()\n\n# normally your would skip notebook_url or use Jupyter address\nnotebook_url = 'localhost:8888'\n\n# special configuration for this remotely hosted tutorial\nfrom local_lib.binder_helper import remote_jupyter_proxy_url\nnotebook_url = remote_jupyter_proxy_url\n\nfrom hover.recipes.subroutine import standard_softlabel\nfrom bokeh.layouts import row, column\n\nsoftlabel = standard_softlabel(dataset)\nshow(softlabel.figure, notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t6-softlabel-joint-filter/#filter-selection-by-score-range","title":"Filter Selection by Score Range","text":"<p>Similarly to <code>finder</code>, a <code>softlabel</code> plot has its own selection filter. The difference lies in the filter condition:</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nshow(softlabel.score_filter, notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t6-softlabel-joint-filter/#linked-selections-joint-filters","title":"Linked Selections &amp; Joint Filters","text":"<p>When we plot multiple <code>explorer</code>s for the same <code>dataset</code>, it makes sense to synchronize selections between those plots. <code>hover</code> recipes take care of this synchronization.</p> <ul> <li> This also works with cumulative selections. Consequently, the cumulative toggle is synchronized too.</li> </ul> <p>Since each filter is narrowing down the selections we make, joint filters is just set intersection, extended</p> <ul> <li>from two sets (original selection + filter)</li> <li>to N sets (original selection + filter A + filter B + ...)</li> </ul> <p>The <code>active_learning</code> recipe is built of <code>softlabel + annotator + finder</code>, plus a few widgets for iterating the model-in-loop.</p> <p>In the next tutorial(s), we will see more recipes taking advantage of linked selections and joint filters. Powerful indeed!</p>"},{"location":"pages/tutorial/t7-snorkel-improvise-rules/","title":"Custom Labeling Functions","text":"<p>Suppose we have some custom functions for labeling or filtering data, which resembles <code>snorkel</code>'s typical scenario.</p> <p> Let's see how these functions can be combined with <code>hover</code>.</p>    {     bootstrap: true,     mountStatusWidget: true,     mountActivateWidget: false,     mountRunButton: false,     mountRestartButton: false,     mountRestartallButton: false,     requestKernel: true,     binderOptions: {       repo: \"phurwicz/hover-binder\",       ref: \"master\",       &lt;!-- ref: \"dev\", --&gt;       codeMirrorConfig: {         theme: \"monokai\",         indentUnit: 4,       }     },   }  Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p> This page addresses single components of <code>hover</code> <p>We are using code snippets to pick out parts of the annotation interface, so that the documentation can explain what they do.</p> <ul> <li>Please be aware that this is NOT how one would typically use <code>hover</code>.</li> <li>Typical usage deals with recipes where the individual parts have been tied together.</li> </ul> Dependencies for  local environments  <p>When you run the code locally, you may need to install additional packages.</p> <p>To run the text embedding code on this page, you need:     <pre><code>pip install spacy\npython -m spacy download en_core_web_md\n</code></pre> To use <code>snorkel</code> labeling functions, you need:     <pre><code>pip install snorkel\n</code></pre> To render <code>bokeh</code> plots in Jupyter, you need:     <pre><code>pip install jupyter_bokeh\n</code></pre></p> <pre><code>If you are using JupyterLab older than 3.0, use this instead ([reference](https://pypi.org/project/jupyter-bokeh/)):\n```shell\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install @bokeh/jupyter_bokeh\n```\n</code></pre>"},{"location":"pages/tutorial/t7-snorkel-improvise-rules/#preparation","title":"Preparation","text":"<p>As always, start with a ready-for-plot dataset:</p> <pre>\nfrom hover.core.dataset import SupervisableTextDataset\nimport pandas as pd\n\nraw_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_raw.csv\"\ntrain_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_train.csv\"\n\n# for fast, low-memory demonstration purpose, sample the data\ndf_raw = pd.read_csv(raw_csv_path).sample(400)\ndf_raw[\"SUBSET\"] = \"raw\"\ndf_train = pd.read_csv(train_csv_path).sample(400)\ndf_train[\"SUBSET\"] = \"train\"\ndf_dev = pd.read_csv(train_csv_path).sample(100)\ndf_dev[\"SUBSET\"] = \"dev\"\ndf_test = pd.read_csv(train_csv_path).sample(100)\ndf_test[\"SUBSET\"] = \"test\"\n\n# build overall dataframe and ensure feature type\ndf = pd.concat([df_raw, df_train, df_dev, df_test])\ndf[\"text\"] = df[\"text\"].astype(str)\n\n# this class stores the dataset throught the labeling process\ndataset = SupervisableTextDataset.from_pandas(df, feature_key=\"text\", label_key=\"label\")\n</pre> <p></p> <pre>\nimport spacy\nimport re\nfrom functools import lru_cache\n\n# use your preferred embedding for the task\nnlp = spacy.load(\"en_core_web_md\")\n\n# raw data (str in this case) -&gt; np.array\n@lru_cache(maxsize=int(1e+4))\ndef vectorizer(text):\n    clean_text = re.sub(r\"[\\s]+\", r\" \", str(text))\n    return nlp(clean_text, disable=nlp.pipe_names).vector\n\n# any kwargs will be passed onto the corresponding reduction\n# for umap: https://umap-learn.readthedocs.io/en/latest/parameters.html\n# for ivis: https://bering-ivis.readthedocs.io/en/latest/api.html\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=2)\n</pre> <p></p>"},{"location":"pages/tutorial/t7-snorkel-improvise-rules/#labeling-functions","title":"Labeling Functions","text":"<p>Labeling functions are functions that take a <code>pd.DataFrame</code> row and return a label or abstain.</p> <p>Inside the function one can do many things, but let's start with simple keywords wrapped in regex:</p> About the decorator @labeling_function <pre>\nfrom hover.utils.snorkel_helper import labeling_function\nfrom hover.module_config import ABSTAIN_DECODED as ABSTAIN\nimport re\n\n\n@labeling_function(targets=[\"rec.autos\"])\ndef auto_keywords(row):\n    flag = re.search(\n        r\"(?i)(diesel|gasoline|automobile|vehicle|drive|driving)\", row.text\n    )\n    return \"rec.autos\" if flag else ABSTAIN\n\n\n@labeling_function(targets=[\"rec.sport.baseball\"])\ndef baseball_keywords(row):\n    flag = re.search(r\"(?i)(baseball|stadium|\\ bat\\ |\\ base\\ )\", row.text)\n    return \"rec.sport.baseball\" if flag else ABSTAIN\n\n\n@labeling_function(targets=[\"sci.crypt\"])\ndef crypt_keywords(row):\n    flag = re.search(r\"(?i)(crypt|math|encode|decode|key)\", row.text)\n    return \"sci.crypt\" if flag else ABSTAIN\n\n\n@labeling_function(targets=[\"talk.politics.guns\"])\ndef guns_keywords(row):\n    flag = re.search(r\"(?i)(gun|rifle|ammunition|violence|shoot)\", row.text)\n    return \"talk.politics.guns\" if flag else ABSTAIN\n\n\n@labeling_function(targets=[\"misc.forsale\"])\ndef forsale_keywords(row):\n    flag = re.search(r\"(?i)(sale|deal|price|discount)\", row.text)\n    return \"misc.forsale\" if flag else ABSTAIN\n\n\nLABELING_FUNCTIONS = [\n    auto_keywords,\n    baseball_keywords,\n    crypt_keywords,\n    guns_keywords,\n    forsale_keywords,\n]\n</pre> <p></p> <pre>\n# we will come back to this block later on\n# LABELING_FUNCTIONS.pop(-1)\n</pre> <p></p>"},{"location":"pages/tutorial/t7-snorkel-improvise-rules/#hover.utils.snorkel_helper.labeling_function","title":"<code>hover.utils.snorkel_helper.labeling_function(targets, label_encoder=None, **kwargs)</code>","text":"Hover's flavor of the Snorkel labeling_function decorator. <p>However, due to the dynamic label encoding nature of hover, the decorated function should return the original string label, not its encoding integer.</p> <ul> <li>assigns a UUID for easy identification</li> <li>keeps track of LF targets</li> </ul> Param Type Description <code>targets</code> <code>list</code> of <code>str</code> labels that the labeling function is intended to create <code>label_encoder</code> <code>dict</code> {decoded_label -&gt; encoded_label} mapping, if you also want an original snorkel-style labeling function linked as a <code>.snorkel</code> attribute <code>**kwargs</code> forwarded to <code>snorkel</code>'s <code>labeling_function()</code> Source code in <code>hover/utils/snorkel_helper.py</code> <pre><code>def labeling_function(targets, label_encoder=None, **kwargs):\n\"\"\"\n    ???+ note \"Hover's flavor of the Snorkel labeling_function decorator.\"\n        However, due to the dynamic label encoding nature of hover,\n        the decorated function should return the original string label, not its encoding integer.\n\n        - assigns a UUID for easy identification\n        - keeps track of LF targets\n\n        | Param           | Type   | Description                          |\n        | :-------------- | :----- | :----------------------------------- |\n        | `targets`       | `list` of `str` | labels that the labeling function is intended to create |\n        | `label_encoder` | `dict` | {decoded_label -&gt; encoded_label} mapping, if you also want an original snorkel-style labeling function linked as a `.snorkel` attribute |\n        | `**kwargs`      |        | forwarded to `snorkel`'s `labeling_function()` |\n    \"\"\"\n    # lazy import so that the package does not require snorkel\n    # Feb 3, 2022: snorkel's dependency handling is too strict\n    # for other dependencies like NumPy, SciPy, SpaCy, etc.\n    # Let's cite Snorkel and lazy import or copy functions.\n    # DO NOT explicitly depend on Snorkel without confirming\n    # that all builds/tests pass by Anaconda standards, else\n    # we risk having to drop conda support.\n    from snorkel.labeling import (\n        labeling_function as snorkel_lf,\n        LabelingFunction as SnorkelLF,\n    )\n\n    def wrapper(func):\n        # set up kwargs for Snorkel's LF\n        # a default name that can be overridden\n        snorkel_kwargs = {\"name\": func.__name__}\n        snorkel_kwargs.update(kwargs)\n\n        # return value of hover's decorator\n        lf = SnorkelLF(f=func, **snorkel_kwargs)\n\n        # additional attributes\n        lf.uuid = uuid.uuid1()\n        lf.targets = targets[:]\n\n        # link a snorkel-style labeling function if applicable\n        if label_encoder:\n            lf.label_encoder = label_encoder\n\n            def snorkel_style_func(x):\n                return lf.label_encoder[func(x)]\n\n            lf.snorkel = snorkel_lf(**kwargs)(snorkel_style_func)\n        else:\n            lf.label_encoder = None\n            lf.snorkel = None\n\n        return lf\n\n    return wrapper\n</code></pre>"},{"location":"pages/tutorial/t7-snorkel-improvise-rules/#hover.utils.snorkel_helper.labeling_function","title":"Custom Labeling Functions","text":""},{"location":"pages/tutorial/t7-snorkel-improvise-rules/#using-a-function-to-apply-labels","title":"Using a Function to Apply Labels","text":"<p>Hover's <code>SnorkelExplorer</code> (short as <code>snorkel</code>) can take the labeling functions above and apply them on areas of data that you choose. The widget below is responsible for labeling:</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nfrom bokeh.io import show, output_notebook\n\noutput_notebook()\n\n# normally your would skip notebook_url or use Jupyter address\nnotebook_url = 'localhost:8888'\n\n# special configuration for this remotely hosted tutorial\nfrom local_lib.binder_helper import remote_jupyter_proxy_url\nnotebook_url = remote_jupyter_proxy_url\n\nfrom hover.recipes.subroutine import standard_snorkel\n\nsnorkel_plot = standard_snorkel(dataset)\nsnorkel_plot.subscribed_lf_list = LABELING_FUNCTIONS\nshow(snorkel_plot.lf_apply_trigger, notebook_url=notebook_url)\n</pre> <p></p>"},{"location":"pages/tutorial/t7-snorkel-improvise-rules/#using-a-function-to-apply-filters","title":"Using a Function to Apply Filters","text":"<p>Any function that labels is also a function that filters. The filter condition is <code>\"keep if did not abstain\"</code>. The widget below handles filtering:</p> Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul> <pre>\nshow(snorkel_plot.lf_filter_trigger, notebook_url=notebook_url)\n</pre> <p></p> <p>Unlike the toggled filters for <code>finder</code> and <code>softlabel</code>, filtering with functions is on a per-click basis. In other words, this particular filtration doesn't persist when you select another area.</p>"},{"location":"pages/tutorial/t7-snorkel-improvise-rules/#dynamic-list-of-functions","title":"Dynamic List of Functions","text":"<p>Python lists are mutable, and we are going to take advantage of that for improvising and editing labeling functions on the fly.</p> <p>Run the block below and open the resulting URL to launch a recipe.</p> <ul> <li>labeling functions are evaluated against the <code>dev</code> set.<ul> <li>hence you are advised to send the labels produced by these functions to the <code>train</code> set, not the <code>dev</code> set.</li> </ul> </li> <li>come back and edit the list of labeling functions in-place in one of the code cells above.<ul> <li>then go to the launched app and refresh the functions!</li> </ul> </li> </ul> <pre>\nfrom hover.recipes.experimental import snorkel_crosscheck\n\ninteractive_plot = snorkel_crosscheck(dataset, LABELING_FUNCTIONS)\n\n# ---------- SERVER MODE: for the documentation page ----------\n# because this tutorial is remotely hosted, we need explicit serving to expose the plot to you\nfrom local_lib.binder_helper import binder_proxy_app_url\nfrom bokeh.server.server import Server\nserver = Server({'/my-app': interactive_plot}, port=5007, allow_websocket_origin=['*'], use_xheaders=True)\nserver.start()\n# visit this URL printed in cell output to see the interactive plot; locally you would just do \"https://localhost:5007/my-app\"\nbinder_proxy_app_url('my-app', port=5007)\n\n# ---------- NOTEBOOK MODE: for your actual Jupyter environment ---------\n# this code will render the entire plot in Jupyter\n# from bokeh.io import show, output_notebook\n# output_notebook()\n# show(interactive_plot, notebook_url='https://localhost:8888')\n</pre> <p>What's really cool is that in your local environment, this update-and-refresh operation can be done all in a notebook. So now you can</p> <ul> <li>interactively evaluate and revise labeling functions</li> <li>visually assign specific data regions to apply those functions</li> </ul> <p>which makes labeling functions significantly more accurate and applicable.</p>"},{"location":"snippets/markdown/binder-kernel/","title":"Binder kernel","text":"Running Python right here <p>Think of this page as almost a Jupyter notebook. You can edit code and press <code>Shift+Enter</code> to execute.</p> <p>Behind the scene is a Binder-hosted Python environment. Below is the status of the kernel: </p> <p>To download a notebook file instead, visit here.</p>"},{"location":"snippets/markdown/component-tutorial/","title":"Component tutorial","text":"This page addresses single components of <code>hover</code> <p>We are using code snippets to pick out parts of the annotation interface, so that the documentation can explain what they do.</p> <ul> <li>Please be aware that this is NOT how one would typically use <code>hover</code>.</li> <li>Typical usage deals with recipes where the individual parts have been tied together.</li> </ul>"},{"location":"snippets/markdown/dataset-prep/","title":"Dataset prep","text":"<p>As always, start with a ready-for-plot dataset:</p> <pre>\nfrom hover.core.dataset import SupervisableTextDataset\nimport pandas as pd\n\nraw_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_raw.csv\"\ntrain_csv_path = \"https://raw.githubusercontent.com/phurwicz/hover-gallery/main/0.5.0/20_newsgroups_train.csv\"\n\n# for fast, low-memory demonstration purpose, sample the data\ndf_raw = pd.read_csv(raw_csv_path).sample(400)\ndf_raw[\"SUBSET\"] = \"raw\"\ndf_train = pd.read_csv(train_csv_path).sample(400)\ndf_train[\"SUBSET\"] = \"train\"\ndf_dev = pd.read_csv(train_csv_path).sample(100)\ndf_dev[\"SUBSET\"] = \"dev\"\ndf_test = pd.read_csv(train_csv_path).sample(100)\ndf_test[\"SUBSET\"] = \"test\"\n\n# build overall dataframe and ensure feature type\ndf = pd.concat([df_raw, df_train, df_dev, df_test])\ndf[\"text\"] = df[\"text\"].astype(str)\n\n# this class stores the dataset throught the labeling process\ndataset = SupervisableTextDataset.from_pandas(df, feature_key=\"text\", label_key=\"label\")\n</pre> <p></p> <pre>\nimport spacy\nimport re\nfrom functools import lru_cache\n\n# use your preferred embedding for the task\nnlp = spacy.load(\"en_core_web_md\")\n\n# raw data (str in this case) -&gt; np.array\n@lru_cache(maxsize=int(1e+4))\ndef vectorizer(text):\n    clean_text = re.sub(r\"[\\s]+\", r\" \", str(text))\n    return nlp(clean_text, disable=nlp.pipe_names).vector\n\n# any kwargs will be passed onto the corresponding reduction\n# for umap: https://umap-learn.readthedocs.io/en/latest/parameters.html\n# for ivis: https://bering-ivis.readthedocs.io/en/latest/api.html\nreducer = dataset.compute_nd_embedding(vectorizer, \"umap\", dimension=2)\n</pre> <p></p>"},{"location":"snippets/markdown/jupyterlab-js-issue/","title":"Jupyterlab js issue","text":"Showcase widgets here are not interactive <p> Plotted widgets on this page are not interactive, but only for illustration. </p> <p>Widgets  will be interactive when you actually use them  (in your local environment or server apps like in the quickstart).</p> <ul> <li>be sure to use a whole <code>recipe</code> rather than individual widgets.</li> <li>if you really want to plot interactive widgets on their own, try <code>from hover.utils.bokeh_helper import show_as_interactive as show</code> instead of <code>from bokeh.io import show</code>.<ul> <li>this works in your own environment but still not on the documentation page.</li> <li><code>show_as_interactive</code> is a simple tweak of <code>bokeh.io.show</code> by turning standalone LayoutDOM to an application.</li> </ul> </li> </ul>"},{"location":"snippets/markdown/local-dep-audio/","title":"Local dep audio","text":"<pre><code>To run the audio embedding code on this page, you need `pip install librosa wrappy`.\n</code></pre>"},{"location":"snippets/markdown/local-dep-image/","title":"Local dep image","text":"<pre><code>To run the image embedding code on this page, you need `pip install efficientnet_pytorch torchvision wrappy`.\n</code></pre>"},{"location":"snippets/markdown/local-dep-jupyter-bokeh/","title":"Local dep jupyter bokeh","text":"<pre><code>To render `bokeh` plots in Jupyter, you need:\n```shell\npip install jupyter_bokeh\n```\n\nIf you are using JupyterLab older than 3.0, use this instead ([reference](https://pypi.org/project/jupyter-bokeh/)):\n```shell\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install @bokeh/jupyter_bokeh\n```\n</code></pre>"},{"location":"snippets/markdown/local-dep-snorkel/","title":"Local dep snorkel","text":"<pre><code>To use `snorkel` labeling functions, you need:\n```shell\npip install snorkel\n```\n</code></pre>"},{"location":"snippets/markdown/local-dep-text/","title":"Local dep text","text":"<pre><code>To run the text embedding code on this page, you need:\n```shell\npip install spacy\npython -m spacy download en_core_web_md\n```\n</code></pre>"},{"location":"snippets/markdown/local-dependency/","title":"Local dependency","text":"Dependencies for  local environments  <p>When you run the code locally, you may need to install additional packages.</p>"},{"location":"snippets/markdown/tutorial-required/","title":"Tutorial required","text":"This page assumes that you have know the basics <p>i.e. simple usage of <code>dataset</code> and <code>annotator</code>. Please visit the quickstart tutorial if you haven't done so.</p>"},{"location":"snippets/markdown/wrappy-cache/","title":"Wrappy cache","text":"Caching and reading from disk <p>This guide uses <code>@wrappy.memoize</code> in place of <code>@functools.lru_cache</code> for caching.</p> <ul> <li>The benefit is that <code>wrappy.memoize</code> can persist the cache to disk, speeding up code across sessions.</li> </ul> <p>Cached values for this guide have been pre-computed, making it much master to run the guide.</p>"}]}